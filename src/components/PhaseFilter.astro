---
export interface Props {
  items?: Array<{
    phase?: string;
  }>;
  initialPhase?: string;
}

const { items = [], initialPhase = 'all' } = Astro.props;

const phases = [
  { value: 'all', label: 'All Phases', color: '#666' },
  { value: 'PLAN', label: 'Plan', color: '#1565c0' },
  { value: 'BUILD', label: 'Build', color: '#7b1fa2' },
  { value: 'DEPLOY', label: 'Deploy', color: '#2e7d32' },
  { value: 'SUPPORT', label: 'Support', color: '#f57c00' }
];
---

<div class="phase-filter" data-initial-phase={initialPhase}>
  <h3>Filter by SDLC Phase</h3>
  <div class="filter-buttons">
    {phases.map(phase => (
      <button
        class="phase-button"
        data-phase={phase.value}
        style={`--phase-color: ${phase.color}`}
      >
        {phase.label}
        {phase.value !== 'all' && (
          <span class="count">
            {items.filter(item => item.phase === phase.value).length}
          </span>
        )}
      </button>
    ))}
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const phaseFilter = document.querySelector('.phase-filter');
    if (!phaseFilter) return;
    
    const phaseButtons = phaseFilter.querySelectorAll('.phase-button');
    const initialPhase = phaseFilter.getAttribute('data-initial-phase') || 'all';
    
    let selectedPhase = initialPhase;
    
    // Initialize active phase button
    phaseButtons.forEach(button => {
      if (button.getAttribute('data-phase') === selectedPhase) {
        button.classList.add('active');
      }
    });
    
    function handlePhaseChange(phase: string) {
      selectedPhase = phase;
      
      // Update button states
      phaseButtons.forEach(button => {
        button.classList.toggle('active', button.getAttribute('data-phase') === phase);
      });
      
      // Update URL without page reload
      const url = new URL(window.location.href);
      if (phase === 'all') {
        url.searchParams.delete('phase');
      } else {
        url.searchParams.set('phase', phase);
      }
      window.history.replaceState({}, '', url.toString());
      
      // Dispatch custom event for other components to listen to
      const event = new CustomEvent('phaseChanged', { 
        detail: { phase },
        bubbles: true 
      });
      phaseFilter.dispatchEvent(event);
    }
    
    // Phase button event listeners
    phaseButtons.forEach(button => {
      button.addEventListener('click', () => {
        const phase = button.getAttribute('data-phase');
        if (phase) handlePhaseChange(phase);
      });
    });
  });
</script>

<style>
  .phase-filter {
    margin-bottom: 2rem;
    padding: 1.5rem;
    background: #f8f9fa;
    border-radius: 6px;
  }
  
  h3 {
    margin: 0 0 1rem 0;
    color: #333;
    font-size: 1rem;
  }
  
  .filter-buttons {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
  }
  
  .phase-button {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    border: 1px solid #ddd;
    border-radius: 4px;
    background: #fff;
    color: #666;
    font-size: 0.875rem;
    cursor: pointer;
    transition: all 0.2s ease;
  }
  
  .phase-button:hover {
    border-color: var(--phase-color);
    color: var(--phase-color);
  }
  
  .phase-button.active {
    background: var(--phase-color);
    border-color: var(--phase-color);
    color: white;
  }
  
  .count {
    background: rgba(255, 255, 255, 0.3);
    padding: 0.125rem 0.375rem;
    border-radius: 10px;
    font-size: 0.75rem;
    font-weight: 600;
  }
  
  .phase-button:not(.active) .count {
    background: #e9ecef;
    color: #666;
  }
</style>
