[["Map",1,2,9,10,1518,1519],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.13.2","content-config-digest","f01e23d30c26f5d0","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false,\"staticImportMetaEnv\":false,\"chromeDevtoolsWorkspace\":false},\"legacy\":{\"collections\":false}}","guides",["Map",11,12,52,53,79,80,106,107,168,169,192,193,216,217,264,265,353,354,408,409,574,575,607,608,685,686,748,749,811,812,838,839,888,889,948,949,990,991,1069,1070,1084,1085,1156,1157,1235,1236,1349,1350],"readme",{"id":11,"data":13,"body":14,"filePath":15,"digest":16,"rendered":17,"legacyId":51},{},"# Guides\n\nGuides provide high-level guidance on using Amp with various development workflows and patterns.\nThey are designed to apply to any workflow regardless of tools, languages, or frameworks in use.\n\n## Development Workflow Guides\n\n|Guide|Description|\n|:---|:---|\n|[Agent File](agent-file/README.md)|Using AGENT.md files to provide Amp with codebase structure, build/test commands, and conventions|\n|[Command Piping](command-piping/README.md)|Using the output of other commands to provide input to an Amp prompt|\n|[Context Management](context-management/Context%20Engineering%20-%20Amp.md)|High-level guidance on context engineering for agentic AI workflows|\n|[Code Migrations](code-migrations/)|Methodologies for migrations and upgrades using AI-guided planning|\n|[Documentation Workflows](documentation/README.md)|Strategic approaches to documentation generation and maintenance|\n|[MCP Setup](mcp/amp-mcp-setup-guide.md)|General workflow guidance for Model Context Protocol integration|\n|[Day 0 Operations](day-0/README.md)|Initial project setup and onboarding workflows|\n|[CLI Guide](cli/README.md)|Complete guide to using Amp from the command line|\n|[Tips & Tricks](tips/README.md)|Community-contributed tips and power-user insights|\n\n## SDLC Phase-Specific Guides\n\nThe following guides are organized by software development lifecycle phases to help you leverage Amp\neffectively throughout your development process:\n\n### PLAN Phase\n**[Planning Guide](plan/README.md)** - Analyse, explore, and strategize your development approach\nwith intelligent codebase understanding\n- Codebase Exploration & Understanding  \n- Search & Contextual Analysis Across Codebase\n- Git History Exploration & Feature Evolution\n- Learning and Discovery\n- Feature Implementation Planning\n\n### BUILD Phase  \n**[Building Guide](build/README.md)** - Implement, refactor, and enhance your code with AI-assisted development and testing\n- Code Analysis and Refactoring\n- UI Iteration with Visual Feedback  \n- MCP Integration\n- IDE Completions and Context-Aware Development\n- Automated Refactoring & Standards Enforcement\n- End-to-End Test Generation\n- Automate Debugging Loops\n- From Bug Report to Draft PR\n\n### DEPLOY Phase\n**[Deployment Guide](deploy/README.md)** - Streamline your deployment pipeline with automated workflows and quality gates\n- Git Workflow Enhancement\n- Build and Test Automation  \n- Automated Pull Request Generation\n- End-to-End Development Workflows\n- Database Operations\n\n### SUPPORT Phase\n**[Support Guide](support/README.md)** - Maintain, secure, and collaborate on your deployed applications\nwith ongoing optimisation  \n- Documentation Generation\n- Security and Code Quality\n- Batch File Operations\n- Development Environment Debugging\n- Review & Cleanup Changes  \n- Thread History & Contextual Documentation\n- Team Knowledge Sharing & Collaboration\n- Cross-Platform Thread Sharing\n\n## Getting Started Tips\n\n- **Be Specific:** The more context you provide, the better Amp can assist you\n- **Iterate:** Start with basic requests and refine based on Amp's output\n- **Combine Workflows:** Mix and match patterns from different sections\n- **Save Useful Threads:** Bookmark successful workflows for team sharing\n- **Experiment with MCP:** Extend Amp's capabilities with custom integrations","src/content/guides/README.md","cf94cc518fc37198",{"html":18,"metadata":19},"\u003Ch1 id=\"guides\">Guides\u003C/h1>\n\u003Cp>Guides provide high-level guidance on using Amp with various development workflows and patterns.\nThey are designed to apply to any workflow regardless of tools, languages, or frameworks in use.\u003C/p>\n\u003Ch2 id=\"development-workflow-guides\">Development Workflow Guides\u003C/h2>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth align=\"left\">Guide\u003C/th>\u003Cth align=\"left\">Description\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd align=\"left\">\u003Ca href=\"agent-file/README.md\">Agent File\u003C/a>\u003C/td>\u003Ctd align=\"left\">Using AGENT.md files to provide Amp with codebase structure, build/test commands, and conventions\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd align=\"left\">\u003Ca href=\"command-piping/README.md\">Command Piping\u003C/a>\u003C/td>\u003Ctd align=\"left\">Using the output of other commands to provide input to an Amp prompt\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd align=\"left\">\u003Ca href=\"context-management/Context%20Engineering%20-%20Amp.md\">Context Management\u003C/a>\u003C/td>\u003Ctd align=\"left\">High-level guidance on context engineering for agentic AI workflows\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd align=\"left\">\u003Ca href=\"code-migrations/\">Code Migrations\u003C/a>\u003C/td>\u003Ctd align=\"left\">Methodologies for migrations and upgrades using AI-guided planning\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd align=\"left\">\u003Ca href=\"documentation/README.md\">Documentation Workflows\u003C/a>\u003C/td>\u003Ctd align=\"left\">Strategic approaches to documentation generation and maintenance\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd align=\"left\">\u003Ca href=\"mcp/amp-mcp-setup-guide.md\">MCP Setup\u003C/a>\u003C/td>\u003Ctd align=\"left\">General workflow guidance for Model Context Protocol integration\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd align=\"left\">\u003Ca href=\"day-0/README.md\">Day 0 Operations\u003C/a>\u003C/td>\u003Ctd align=\"left\">Initial project setup and onboarding workflows\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd align=\"left\">\u003Ca href=\"cli/README.md\">CLI Guide\u003C/a>\u003C/td>\u003Ctd align=\"left\">Complete guide to using Amp from the command line\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd align=\"left\">\u003Ca href=\"tips/README.md\">Tips &#x26; Tricks\u003C/a>\u003C/td>\u003Ctd align=\"left\">Community-contributed tips and power-user insights\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Ch2 id=\"sdlc-phase-specific-guides\">SDLC Phase-Specific Guides\u003C/h2>\n\u003Cp>The following guides are organized by software development lifecycle phases to help you leverage Amp\neffectively throughout your development process:\u003C/p>\n\u003Ch3 id=\"plan-phase\">PLAN Phase\u003C/h3>\n\u003Cp>\u003Cstrong>\u003Ca href=\"plan/README.md\">Planning Guide\u003C/a>\u003C/strong> - Analyse, explore, and strategize your development approach\nwith intelligent codebase understanding\u003C/p>\n\u003Cul>\n\u003Cli>Codebase Exploration &#x26; Understanding\u003C/li>\n\u003Cli>Search &#x26; Contextual Analysis Across Codebase\u003C/li>\n\u003Cli>Git History Exploration &#x26; Feature Evolution\u003C/li>\n\u003Cli>Learning and Discovery\u003C/li>\n\u003Cli>Feature Implementation Planning\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"build-phase\">BUILD Phase\u003C/h3>\n\u003Cp>\u003Cstrong>\u003Ca href=\"build/README.md\">Building Guide\u003C/a>\u003C/strong> - Implement, refactor, and enhance your code with AI-assisted development and testing\u003C/p>\n\u003Cul>\n\u003Cli>Code Analysis and Refactoring\u003C/li>\n\u003Cli>UI Iteration with Visual Feedback\u003C/li>\n\u003Cli>MCP Integration\u003C/li>\n\u003Cli>IDE Completions and Context-Aware Development\u003C/li>\n\u003Cli>Automated Refactoring &#x26; Standards Enforcement\u003C/li>\n\u003Cli>End-to-End Test Generation\u003C/li>\n\u003Cli>Automate Debugging Loops\u003C/li>\n\u003Cli>From Bug Report to Draft PR\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"deploy-phase\">DEPLOY Phase\u003C/h3>\n\u003Cp>\u003Cstrong>\u003Ca href=\"deploy/README.md\">Deployment Guide\u003C/a>\u003C/strong> - Streamline your deployment pipeline with automated workflows and quality gates\u003C/p>\n\u003Cul>\n\u003Cli>Git Workflow Enhancement\u003C/li>\n\u003Cli>Build and Test Automation\u003C/li>\n\u003Cli>Automated Pull Request Generation\u003C/li>\n\u003Cli>End-to-End Development Workflows\u003C/li>\n\u003Cli>Database Operations\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"support-phase\">SUPPORT Phase\u003C/h3>\n\u003Cp>\u003Cstrong>\u003Ca href=\"support/README.md\">Support Guide\u003C/a>\u003C/strong> - Maintain, secure, and collaborate on your deployed applications\nwith ongoing optimisation\u003C/p>\n\u003Cul>\n\u003Cli>Documentation Generation\u003C/li>\n\u003Cli>Security and Code Quality\u003C/li>\n\u003Cli>Batch File Operations\u003C/li>\n\u003Cli>Development Environment Debugging\u003C/li>\n\u003Cli>Review &#x26; Cleanup Changes\u003C/li>\n\u003Cli>Thread History &#x26; Contextual Documentation\u003C/li>\n\u003Cli>Team Knowledge Sharing &#x26; Collaboration\u003C/li>\n\u003Cli>Cross-Platform Thread Sharing\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"getting-started-tips\">Getting Started Tips\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>Be Specific:\u003C/strong> The more context you provide, the better Amp can assist you\u003C/li>\n\u003Cli>\u003Cstrong>Iterate:\u003C/strong> Start with basic requests and refine based on Amp’s output\u003C/li>\n\u003Cli>\u003Cstrong>Combine Workflows:\u003C/strong> Mix and match patterns from different sections\u003C/li>\n\u003Cli>\u003Cstrong>Save Useful Threads:\u003C/strong> Bookmark successful workflows for team sharing\u003C/li>\n\u003Cli>\u003Cstrong>Experiment with MCP:\u003C/strong> Extend Amp’s capabilities with custom integrations\u003C/li>\n\u003C/ul>",{"headings":20,"localImagePaths":47,"remoteImagePaths":48,"frontmatter":49,"imagePaths":50},[21,24,28,31,35,38,41,44],{"depth":22,"slug":9,"text":23},1,"Guides",{"depth":25,"slug":26,"text":27},2,"development-workflow-guides","Development Workflow Guides",{"depth":25,"slug":29,"text":30},"sdlc-phase-specific-guides","SDLC Phase-Specific Guides",{"depth":32,"slug":33,"text":34},3,"plan-phase","PLAN Phase",{"depth":32,"slug":36,"text":37},"build-phase","BUILD Phase",{"depth":32,"slug":39,"text":40},"deploy-phase","DEPLOY Phase",{"depth":32,"slug":42,"text":43},"support-phase","SUPPORT Phase",{"depth":25,"slug":45,"text":46},"getting-started-tips","Getting Started Tips",[],[],{},[],"README.md","agent-file/readme",{"id":52,"data":54,"body":55,"filePath":56,"digest":57,"rendered":58,"legacyId":78},{},"# AGENT.md\n\n> See [AGENT.md](https://ampcode.com/manual#AGENT.md) for the most up-to-date documentation.\n\nThese examples are provided to:\n- Help users understand how to structure an `AGENT.md` file  \n- Demonstrate best practices for defining AI agent behavior\n\n## Usage\n\nTo get started, use the `/agent` slash command to generated one if it doesn't exist.\nThe generated file can then be modified to meet the team or individual's preferences.\n\n## Writing AGENT.md files\n\nSee: \u003Chttps://ampcode.com/manual#writing-agentmd-files>\n\n## AGENT.md Examples\n\nThis folder contains example `AGENT.md`  file sections that provide examples of how to direct Amp's behavior.\n\n|Example|Description|\n|:---|:---|\n|[AGENT.md](../../AGENT.md)|This repository's AGENT.md file|\n|[Testing Principles](testing-principals.md)|Guide the agent on testing principals for the project|\n|[Code Style Guidelines](code-style.md)|Guide the agent to use your project/team/organization's code style|","src/content/guides/agent-file/README.md","6cfde0fd7a1784a6",{"html":59,"metadata":60},"\u003Ch1 id=\"agentmd\">AGENT.md\u003C/h1>\n\u003Cblockquote>\n\u003Cp>See \u003Ca href=\"https://ampcode.com/manual#AGENT.md\">AGENT.md\u003C/a> for the most up-to-date documentation.\u003C/p>\n\u003C/blockquote>\n\u003Cp>These examples are provided to:\u003C/p>\n\u003Cul>\n\u003Cli>Help users understand how to structure an \u003Ccode>AGENT.md\u003C/code> file\u003C/li>\n\u003Cli>Demonstrate best practices for defining AI agent behavior\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"usage\">Usage\u003C/h2>\n\u003Cp>To get started, use the \u003Ccode>/agent\u003C/code> slash command to generated one if it doesn’t exist.\nThe generated file can then be modified to meet the team or individual’s preferences.\u003C/p>\n\u003Ch2 id=\"writing-agentmd-files\">Writing AGENT.md files\u003C/h2>\n\u003Cp>See: \u003Ca href=\"https://ampcode.com/manual#writing-agentmd-files\">https://ampcode.com/manual#writing-agentmd-files\u003C/a>\u003C/p>\n\u003Ch2 id=\"agentmd-examples\">AGENT.md Examples\u003C/h2>\n\u003Cp>This folder contains example \u003Ccode>AGENT.md\u003C/code>  file sections that provide examples of how to direct Amp’s behavior.\u003C/p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth align=\"left\">Example\u003C/th>\u003Cth align=\"left\">Description\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd align=\"left\">\u003Ca href=\"../../AGENT.md\">AGENT.md\u003C/a>\u003C/td>\u003Ctd align=\"left\">This repository’s AGENT.md file\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd align=\"left\">\u003Ca href=\"testing-principals.md\">Testing Principles\u003C/a>\u003C/td>\u003Ctd align=\"left\">Guide the agent on testing principals for the project\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd align=\"left\">\u003Ca href=\"code-style.md\">Code Style Guidelines\u003C/a>\u003C/td>\u003Ctd align=\"left\">Guide the agent to use your project/team/organization’s code style\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>",{"headings":61,"localImagePaths":74,"remoteImagePaths":75,"frontmatter":76,"imagePaths":77},[62,65,68,71],{"depth":22,"slug":63,"text":64},"agentmd","AGENT.md",{"depth":25,"slug":66,"text":67},"usage","Usage",{"depth":25,"slug":69,"text":70},"writing-agentmd-files","Writing AGENT.md files",{"depth":25,"slug":72,"text":73},"agentmd-examples","AGENT.md Examples",[],[],{},[],"agent-file/README.md","code-migrations/readme",{"id":79,"data":81,"body":82,"filePath":83,"digest":84,"rendered":85,"legacyId":105},{},"# Code Migrations\n\nMethodologies and strategies for migrating codebases, frameworks, and architecture using AI-guided planning and execution.\n\n## Available Migration Guides\n\n| Migration | Description |\n|:----------|:-----------|\n| [Multi-Repository Upgrade](multi-repo-upgrade/README.md) | Upgrade multiple repositories simultaneously using AI-guided planning and parallel sub-agents |\n| [.NET Framework to .NET Core](dotnet48-to-dotnet8core-rebuild/README.md) | Migrate from .NET Framework 4.8 to .NET 8 Core with comprehensive rebuild strategy |\n\n## General Migration Strategy\n\nWhen planning any code migration with Amp:\n\n1. **Analysis Phase**: Let Amp analyze the current state and identify migration requirements\n2. **Planning Phase**: Generate a comprehensive migration plan with checkpoints\n3. **Template Development**: Create a template by migrating one representative component first\n4. **Batch Processing**: Use the template to migrate similar components across the codebase\n5. **Validation**: Test and validate each migration step\n6. **Review**: Use Oracle for thorough code review of migration changes\n\n## Best Practices\n\n- Start with a small, representative subset to establish patterns\n- Use AGENT.md files to document migration-specific conventions\n- Leverage sub-agents for parallel processing of independent components\n- Set up validation hooks to catch common migration errors\n- Document lessons learned for future migrations","src/content/guides/code-migrations/README.md","84b6f921e5e11f75",{"html":86,"metadata":87},"\u003Ch1 id=\"code-migrations\">Code Migrations\u003C/h1>\n\u003Cp>Methodologies and strategies for migrating codebases, frameworks, and architecture using AI-guided planning and execution.\u003C/p>\n\u003Ch2 id=\"available-migration-guides\">Available Migration Guides\u003C/h2>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth align=\"left\">Migration\u003C/th>\u003Cth align=\"left\">Description\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd align=\"left\">\u003Ca href=\"multi-repo-upgrade/README.md\">Multi-Repository Upgrade\u003C/a>\u003C/td>\u003Ctd align=\"left\">Upgrade multiple repositories simultaneously using AI-guided planning and parallel sub-agents\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd align=\"left\">\u003Ca href=\"dotnet48-to-dotnet8core-rebuild/README.md\">.NET Framework to .NET Core\u003C/a>\u003C/td>\u003Ctd align=\"left\">Migrate from .NET Framework 4.8 to .NET 8 Core with comprehensive rebuild strategy\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Ch2 id=\"general-migration-strategy\">General Migration Strategy\u003C/h2>\n\u003Cp>When planning any code migration with Amp:\u003C/p>\n\u003Col>\n\u003Cli>\u003Cstrong>Analysis Phase\u003C/strong>: Let Amp analyze the current state and identify migration requirements\u003C/li>\n\u003Cli>\u003Cstrong>Planning Phase\u003C/strong>: Generate a comprehensive migration plan with checkpoints\u003C/li>\n\u003Cli>\u003Cstrong>Template Development\u003C/strong>: Create a template by migrating one representative component first\u003C/li>\n\u003Cli>\u003Cstrong>Batch Processing\u003C/strong>: Use the template to migrate similar components across the codebase\u003C/li>\n\u003Cli>\u003Cstrong>Validation\u003C/strong>: Test and validate each migration step\u003C/li>\n\u003Cli>\u003Cstrong>Review\u003C/strong>: Use Oracle for thorough code review of migration changes\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"best-practices\">Best Practices\u003C/h2>\n\u003Cul>\n\u003Cli>Start with a small, representative subset to establish patterns\u003C/li>\n\u003Cli>Use AGENT.md files to document migration-specific conventions\u003C/li>\n\u003Cli>Leverage sub-agents for parallel processing of independent components\u003C/li>\n\u003Cli>Set up validation hooks to catch common migration errors\u003C/li>\n\u003Cli>Document lessons learned for future migrations\u003C/li>\n\u003C/ul>",{"headings":88,"localImagePaths":101,"remoteImagePaths":102,"frontmatter":103,"imagePaths":104},[89,92,95,98],{"depth":22,"slug":90,"text":91},"code-migrations","Code Migrations",{"depth":25,"slug":93,"text":94},"available-migration-guides","Available Migration Guides",{"depth":25,"slug":96,"text":97},"general-migration-strategy","General Migration Strategy",{"depth":25,"slug":99,"text":100},"best-practices","Best Practices",[],[],{},[],"code-migrations/README.md","context-management/context-engineering---amp",{"id":106,"data":108,"body":109,"filePath":110,"assetImports":111,"digest":113,"rendered":114,"legacyId":167},{},"# Context Engineering for Agentic AI Tooling: A Guide to Amp\n\n## Overview\n\nIn agentic AI systems like Amp, context engineering becomes the backbone of intelligent automation. This enables AI agents to maintain coherent understanding across complex, multi-step workflows while preserving critical context about project requirements, codebase architecture, and user intentions.\n\n## What is Context Engineering?\n\nUnlike traditional prompt engineering, which focuses primarily on crafting individual queries, context engineering takes a holistic view of how information flows through an AI system over time.\n\nAt its core, context engineering involves:\n\n- **A system, not a string**: Structuring data and knowledge in ways that AI models can effectively process and utilise  \n- **Context Lifecycle Management**: Maintaining relevant information across multiple prompts in a thread, and forks of threads  \n- **Data Optimisation**: Ensuring that the most relevant information is prioritised and accessible when needed, avoids relevance issues or hallucinations  \n\nIn the realm of agentic AI tooling, context engineering becomes even more crucial because agents must navigate complex, multi-step workflows while maintaining awareness of project requirements, codebase structure, and user intentions. Amp isn't just responding to a single prompt, it's orchestrating a series of interconnected tasks that build upon each other.\n\n## Core Principles & Strategy for Amp\n\nIn an agentic tool like Amp, context engineering is foundational for multi-step developer workflows. Let’s start with what Amp does in a thread when a prompt is submitted:\n\n1. **Gather Context**: Amp uses a thinking model to first interpret the user's request, then automatically collects context using tools available to the agent to gather a comprehensive understanding of the problem  \n2. **Task Planning via TODOs**: It introspects the gathered context to generate clear, actionable tasks  \n3. **Tool Orchestration**: Amp coordinates code edits, test creation, documentation updates, and terminal commands to execute tasks efficiently  \n4. **Subagent Delegation**: Amp can create subagents for complex instructions and offload tasks to the subagent  \n5. **Complete TODOs**: Amp systematically works through the planned tasks, completing each one methodically  \n6. **Validate**: Continuous checks ensure the AI's output remains aligned with user goals  \n\n## Different Ingredients of Context in an Amp Thread\n\nUnderstanding how Amp assembles and manages context requires examining the various sources of information that feed into each agent interaction:\n![Diagram of Amp Context](amp-context.png)\n### User Prompt\n\nThe user's initial request serves as the primary directive on what to do. Context engineering is the art of clearly communicating your goals and instructions to an LLM. It's important to guide, direct, and define intent through well-crafted prompts. Unlike human collaborators who can ask clarifying questions, Amp relies heavily on the clarity and completeness of your input. This makes how you communicate all the more important.\n\n**Best Practices:**\n- **Be Clear and Specific**: Provide enough context and detail so the model fully understands what is being asked. For example, rather than saying \"sort array,\" say \"sort a list of integers in ascending order using Python.\"  \n- **Mention the context** with @ mentions or framework when relevant  \n- **Use Plain Language**: Write prompts using simple, clear language. Avoid complex jargon or vague concepts that might be misunderstood  \n- **Emphasise Desired Outcomes**: Clearly state what you want the model to do. Framing your prompt in a positive, goal-oriented way helps guide the model toward producing the result you need  \n\n### Current Amp Thread\n\nThe current conversation, including user prompts and model responses that are part of the current Amp thread.\n\n### Agent.md File\n\nThe Agent.md file serves as the foundational context document that defines how Amp's agents should behave within a specific project. This file contains:\n\n- **Project Overview**: High-level description of the project's purpose and architecture  \n- **Coding Standards**: Specific style guidelines, naming conventions, and best practices  \n- **Technology Stack**: Detailed information about frameworks, libraries, and tools used  \n- **Workflow Preferences**: How the user prefers certain tasks to be approached  \n- **Context Priorities**: Which aspects of the codebase should receive special attention  \n\nThis file acts as a persistent memory layer that ensures consistency across all agent interactions within a project.\n\nAmp also supports multiple Agent.md files:\n\n- **Root level**: Maintain a general `AGENT.md` file at the project's root to provide broad, overall guidance for Amp agents  \n- **Subdirectories**: Place specific `AGENT.md` files within subdirectories for context-sensitive instructions tailored to those parts of the project  \n- **Config**: Use a global `AGENT.md` in `~/.config/AGENT.md` for personal or environment-wide preferences that apply across projects  \n\n### Built-in Tools\n\nAmp comes with a comprehensive set of built-in tools that provide agents with essential capabilities:\n\n- **File Operations**: `bash`, `create_file`, `edit_file`, `read_file`, `list_directory`, `glob`  \n- **Search & Analysis**: `codebase_search_agent`, `web_search`, `read_web_page`, `grep`  \n- **Task Management**: `Task`, `todo_read`, `todo_write`, `undo_edit`  \n- **Visualisation**: `mermaid`  \n- **Diagnostics**: `get_diagnostics`  \n\n### Integrations\n\nConnect external services from ampcode.com:\n\n- **GitHub Tools** for searching and reading issues  \n- **Linear Tools** for searching and reading all Linear content, and updating issues, comments, and projects  \n- **Slack Tools** for searching and reading messages  \n\n### Additional MCP Tools\n\nBeyond the built-in capabilities, Amp can be extended with custom MCP (Model Context Protocol) tools that provide domain-specific context and functionality. These can be configured via local MCP servers (stdio, docker) or remote MCPs using SSE connections.\n\n**Infrastructure & DevOps:**\n\n- **Cloud Platform Tools**: AWS, Azure, GCP service management and monitoring  \n- **Container Tools**: Docker, Kubernetes deployment and orchestration  \n- **CI/CD Tools**: Pipeline management, build automation, and deployment workflows  \n- **Infrastructure as Code**: Terraform, CloudFormation, and configuration management  \n\n**Communication & Collaboration:**\n\n- **Project Management**: Jira, GitHub, Linear, GitLab etc.  \n- **Communication Platforms**: Discord, Microsoft Teams etc.  \n- **Knowledge Management**: Confluence, Notion, and wiki system connections  \n\n**Development & Code Management**: Git operations, linting, formatting, static analysis, automated documentation, and comprehensive testing workflows  \n\n**Data & Analytics**: Schema exploration, query optimisation, data visualisation, system monitoring, and custom metrics collection  \n\nThis extensibility ensures that agents can gather relevant context from external sources beyond just what is in the context window or local workspace.\n\n### Forked Thread\n\nAmp can fork existing threads and use the original thread as context in a new thread.\n\n## Challenges and Considerations\n\nSuccessfully implementing context engineering in Amp requires following proven strategies that maximize the effectiveness of agent interactions:\n\n### Context Window Management\n\nTraditional AI models face limitations in how much context they can process simultaneously. However, Amp addresses this challenge through several innovative approaches:\n\n- **Subagent Architecture**: When tasks require extensive context, Amp can launch subagents that focus on specific aspects of the problem. This distributed approach allows the system to handle complex tasks that would overwhelm a single agent's context window. This also means that even novice users can get started with agentic tools and don't need to be experts at context window management.\n- **Compacting Threads**: When Amp's context window approaches its limits during extended workflows, users can compact the thread. This allows agents to continue working on complex, multi-step tasks without losing critical context.\n- **Forking Threads**: Create new threads from existing threads, preserving previous thread history and context.\n\n## Reflection\n\nWith agentic AI assistants like Amp, context engineering will play an increasingly pivotal role in unlocking their full potential. Moving beyond traditional prompt design, context engineering introduces a structured, system-level approach that allows AI agents to operate with greater precision, consistency, and autonomy.\n\nLooking ahead, the integration of context-aware agents will reshape how software is built, tested, and maintained. Context engineering is not just a tactical tool—it's a strategic discipline that will define how agentic AI systems evolve and scale.","src/content/guides/context-management/Context Engineering - Amp.md",[112],"amp-context.png","21fc3c3d9ff9f757",{"html":115,"metadata":116},"\u003Ch1 id=\"context-engineering-for-agentic-ai-tooling-a-guide-to-amp\">Context Engineering for Agentic AI Tooling: A Guide to Amp\u003C/h1>\n\u003Ch2 id=\"overview\">Overview\u003C/h2>\n\u003Cp>In agentic AI systems like Amp, context engineering becomes the backbone of intelligent automation. This enables AI agents to maintain coherent understanding across complex, multi-step workflows while preserving critical context about project requirements, codebase architecture, and user intentions.\u003C/p>\n\u003Ch2 id=\"what-is-context-engineering\">What is Context Engineering?\u003C/h2>\n\u003Cp>Unlike traditional prompt engineering, which focuses primarily on crafting individual queries, context engineering takes a holistic view of how information flows through an AI system over time.\u003C/p>\n\u003Cp>At its core, context engineering involves:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>A system, not a string\u003C/strong>: Structuring data and knowledge in ways that AI models can effectively process and utilise\u003C/li>\n\u003Cli>\u003Cstrong>Context Lifecycle Management\u003C/strong>: Maintaining relevant information across multiple prompts in a thread, and forks of threads\u003C/li>\n\u003Cli>\u003Cstrong>Data Optimisation\u003C/strong>: Ensuring that the most relevant information is prioritised and accessible when needed, avoids relevance issues or hallucinations\u003C/li>\n\u003C/ul>\n\u003Cp>In the realm of agentic AI tooling, context engineering becomes even more crucial because agents must navigate complex, multi-step workflows while maintaining awareness of project requirements, codebase structure, and user intentions. Amp isn’t just responding to a single prompt, it’s orchestrating a series of interconnected tasks that build upon each other.\u003C/p>\n\u003Ch2 id=\"core-principles--strategy-for-amp\">Core Principles &#x26; Strategy for Amp\u003C/h2>\n\u003Cp>In an agentic tool like Amp, context engineering is foundational for multi-step developer workflows. Let’s start with what Amp does in a thread when a prompt is submitted:\u003C/p>\n\u003Col>\n\u003Cli>\u003Cstrong>Gather Context\u003C/strong>: Amp uses a thinking model to first interpret the user’s request, then automatically collects context using tools available to the agent to gather a comprehensive understanding of the problem\u003C/li>\n\u003Cli>\u003Cstrong>Task Planning via TODOs\u003C/strong>: It introspects the gathered context to generate clear, actionable tasks\u003C/li>\n\u003Cli>\u003Cstrong>Tool Orchestration\u003C/strong>: Amp coordinates code edits, test creation, documentation updates, and terminal commands to execute tasks efficiently\u003C/li>\n\u003Cli>\u003Cstrong>Subagent Delegation\u003C/strong>: Amp can create subagents for complex instructions and offload tasks to the subagent\u003C/li>\n\u003Cli>\u003Cstrong>Complete TODOs\u003C/strong>: Amp systematically works through the planned tasks, completing each one methodically\u003C/li>\n\u003Cli>\u003Cstrong>Validate\u003C/strong>: Continuous checks ensure the AI’s output remains aligned with user goals\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"different-ingredients-of-context-in-an-amp-thread\">Different Ingredients of Context in an Amp Thread\u003C/h2>\n\u003Cp>Understanding how Amp assembles and manages context requires examining the various sources of information that feed into each agent interaction:\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;amp-context.png&#x22;,&#x22;alt&#x22;:&#x22;Diagram of Amp Context&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Ch3 id=\"user-prompt\">User Prompt\u003C/h3>\n\u003Cp>The user’s initial request serves as the primary directive on what to do. Context engineering is the art of clearly communicating your goals and instructions to an LLM. It’s important to guide, direct, and define intent through well-crafted prompts. Unlike human collaborators who can ask clarifying questions, Amp relies heavily on the clarity and completeness of your input. This makes how you communicate all the more important.\u003C/p>\n\u003Cp>\u003Cstrong>Best Practices:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Be Clear and Specific\u003C/strong>: Provide enough context and detail so the model fully understands what is being asked. For example, rather than saying “sort array,” say “sort a list of integers in ascending order using Python.”\u003C/li>\n\u003Cli>\u003Cstrong>Mention the context\u003C/strong> with @ mentions or framework when relevant\u003C/li>\n\u003Cli>\u003Cstrong>Use Plain Language\u003C/strong>: Write prompts using simple, clear language. Avoid complex jargon or vague concepts that might be misunderstood\u003C/li>\n\u003Cli>\u003Cstrong>Emphasise Desired Outcomes\u003C/strong>: Clearly state what you want the model to do. Framing your prompt in a positive, goal-oriented way helps guide the model toward producing the result you need\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"current-amp-thread\">Current Amp Thread\u003C/h3>\n\u003Cp>The current conversation, including user prompts and model responses that are part of the current Amp thread.\u003C/p>\n\u003Ch3 id=\"agentmd-file\">Agent.md File\u003C/h3>\n\u003Cp>The Agent.md file serves as the foundational context document that defines how Amp’s agents should behave within a specific project. This file contains:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Project Overview\u003C/strong>: High-level description of the project’s purpose and architecture\u003C/li>\n\u003Cli>\u003Cstrong>Coding Standards\u003C/strong>: Specific style guidelines, naming conventions, and best practices\u003C/li>\n\u003Cli>\u003Cstrong>Technology Stack\u003C/strong>: Detailed information about frameworks, libraries, and tools used\u003C/li>\n\u003Cli>\u003Cstrong>Workflow Preferences\u003C/strong>: How the user prefers certain tasks to be approached\u003C/li>\n\u003Cli>\u003Cstrong>Context Priorities\u003C/strong>: Which aspects of the codebase should receive special attention\u003C/li>\n\u003C/ul>\n\u003Cp>This file acts as a persistent memory layer that ensures consistency across all agent interactions within a project.\u003C/p>\n\u003Cp>Amp also supports multiple Agent.md files:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Root level\u003C/strong>: Maintain a general \u003Ccode>AGENT.md\u003C/code> file at the project’s root to provide broad, overall guidance for Amp agents\u003C/li>\n\u003Cli>\u003Cstrong>Subdirectories\u003C/strong>: Place specific \u003Ccode>AGENT.md\u003C/code> files within subdirectories for context-sensitive instructions tailored to those parts of the project\u003C/li>\n\u003Cli>\u003Cstrong>Config\u003C/strong>: Use a global \u003Ccode>AGENT.md\u003C/code> in \u003Ccode>~/.config/AGENT.md\u003C/code> for personal or environment-wide preferences that apply across projects\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"built-in-tools\">Built-in Tools\u003C/h3>\n\u003Cp>Amp comes with a comprehensive set of built-in tools that provide agents with essential capabilities:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>File Operations\u003C/strong>: \u003Ccode>bash\u003C/code>, \u003Ccode>create_file\u003C/code>, \u003Ccode>edit_file\u003C/code>, \u003Ccode>read_file\u003C/code>, \u003Ccode>list_directory\u003C/code>, \u003Ccode>glob\u003C/code>\u003C/li>\n\u003Cli>\u003Cstrong>Search &#x26; Analysis\u003C/strong>: \u003Ccode>codebase_search_agent\u003C/code>, \u003Ccode>web_search\u003C/code>, \u003Ccode>read_web_page\u003C/code>, \u003Ccode>grep\u003C/code>\u003C/li>\n\u003Cli>\u003Cstrong>Task Management\u003C/strong>: \u003Ccode>Task\u003C/code>, \u003Ccode>todo_read\u003C/code>, \u003Ccode>todo_write\u003C/code>, \u003Ccode>undo_edit\u003C/code>\u003C/li>\n\u003Cli>\u003Cstrong>Visualisation\u003C/strong>: \u003Ccode>mermaid\u003C/code>\u003C/li>\n\u003Cli>\u003Cstrong>Diagnostics\u003C/strong>: \u003Ccode>get_diagnostics\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"integrations\">Integrations\u003C/h3>\n\u003Cp>Connect external services from ampcode.com:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>GitHub Tools\u003C/strong> for searching and reading issues\u003C/li>\n\u003Cli>\u003Cstrong>Linear Tools\u003C/strong> for searching and reading all Linear content, and updating issues, comments, and projects\u003C/li>\n\u003Cli>\u003Cstrong>Slack Tools\u003C/strong> for searching and reading messages\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"additional-mcp-tools\">Additional MCP Tools\u003C/h3>\n\u003Cp>Beyond the built-in capabilities, Amp can be extended with custom MCP (Model Context Protocol) tools that provide domain-specific context and functionality. These can be configured via local MCP servers (stdio, docker) or remote MCPs using SSE connections.\u003C/p>\n\u003Cp>\u003Cstrong>Infrastructure &#x26; DevOps:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Cloud Platform Tools\u003C/strong>: AWS, Azure, GCP service management and monitoring\u003C/li>\n\u003Cli>\u003Cstrong>Container Tools\u003C/strong>: Docker, Kubernetes deployment and orchestration\u003C/li>\n\u003Cli>\u003Cstrong>CI/CD Tools\u003C/strong>: Pipeline management, build automation, and deployment workflows\u003C/li>\n\u003Cli>\u003Cstrong>Infrastructure as Code\u003C/strong>: Terraform, CloudFormation, and configuration management\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>Communication &#x26; Collaboration:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Project Management\u003C/strong>: Jira, GitHub, Linear, GitLab etc.\u003C/li>\n\u003Cli>\u003Cstrong>Communication Platforms\u003C/strong>: Discord, Microsoft Teams etc.\u003C/li>\n\u003Cli>\u003Cstrong>Knowledge Management\u003C/strong>: Confluence, Notion, and wiki system connections\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>Development &#x26; Code Management\u003C/strong>: Git operations, linting, formatting, static analysis, automated documentation, and comprehensive testing workflows\u003C/p>\n\u003Cp>\u003Cstrong>Data &#x26; Analytics\u003C/strong>: Schema exploration, query optimisation, data visualisation, system monitoring, and custom metrics collection\u003C/p>\n\u003Cp>This extensibility ensures that agents can gather relevant context from external sources beyond just what is in the context window or local workspace.\u003C/p>\n\u003Ch3 id=\"forked-thread\">Forked Thread\u003C/h3>\n\u003Cp>Amp can fork existing threads and use the original thread as context in a new thread.\u003C/p>\n\u003Ch2 id=\"challenges-and-considerations\">Challenges and Considerations\u003C/h2>\n\u003Cp>Successfully implementing context engineering in Amp requires following proven strategies that maximize the effectiveness of agent interactions:\u003C/p>\n\u003Ch3 id=\"context-window-management\">Context Window Management\u003C/h3>\n\u003Cp>Traditional AI models face limitations in how much context they can process simultaneously. However, Amp addresses this challenge through several innovative approaches:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Subagent Architecture\u003C/strong>: When tasks require extensive context, Amp can launch subagents that focus on specific aspects of the problem. This distributed approach allows the system to handle complex tasks that would overwhelm a single agent’s context window. This also means that even novice users can get started with agentic tools and don’t need to be experts at context window management.\u003C/li>\n\u003Cli>\u003Cstrong>Compacting Threads\u003C/strong>: When Amp’s context window approaches its limits during extended workflows, users can compact the thread. This allows agents to continue working on complex, multi-step tasks without losing critical context.\u003C/li>\n\u003Cli>\u003Cstrong>Forking Threads\u003C/strong>: Create new threads from existing threads, preserving previous thread history and context.\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"reflection\">Reflection\u003C/h2>\n\u003Cp>With agentic AI assistants like Amp, context engineering will play an increasingly pivotal role in unlocking their full potential. Moving beyond traditional prompt design, context engineering introduces a structured, system-level approach that allows AI agents to operate with greater precision, consistency, and autonomy.\u003C/p>\n\u003Cp>Looking ahead, the integration of context-aware agents will reshape how software is built, tested, and maintained. Context engineering is not just a tactical tool—it’s a strategic discipline that will define how agentic AI systems evolve and scale.\u003C/p>",{"headings":117,"localImagePaths":163,"remoteImagePaths":164,"frontmatter":165,"imagePaths":166},[118,121,124,127,130,133,136,139,142,145,148,151,154,157,160],{"depth":22,"slug":119,"text":120},"context-engineering-for-agentic-ai-tooling-a-guide-to-amp","Context Engineering for Agentic AI Tooling: A Guide to Amp",{"depth":25,"slug":122,"text":123},"overview","Overview",{"depth":25,"slug":125,"text":126},"what-is-context-engineering","What is Context Engineering?",{"depth":25,"slug":128,"text":129},"core-principles--strategy-for-amp","Core Principles & Strategy for Amp",{"depth":25,"slug":131,"text":132},"different-ingredients-of-context-in-an-amp-thread","Different Ingredients of Context in an Amp Thread",{"depth":32,"slug":134,"text":135},"user-prompt","User Prompt",{"depth":32,"slug":137,"text":138},"current-amp-thread","Current Amp Thread",{"depth":32,"slug":140,"text":141},"agentmd-file","Agent.md File",{"depth":32,"slug":143,"text":144},"built-in-tools","Built-in Tools",{"depth":32,"slug":146,"text":147},"integrations","Integrations",{"depth":32,"slug":149,"text":150},"additional-mcp-tools","Additional MCP Tools",{"depth":32,"slug":152,"text":153},"forked-thread","Forked Thread",{"depth":25,"slug":155,"text":156},"challenges-and-considerations","Challenges and Considerations",{"depth":32,"slug":158,"text":159},"context-window-management","Context Window Management",{"depth":25,"slug":161,"text":162},"reflection","Reflection",[112],[],{},[112],"context-management/Context Engineering - Amp.md","agent-file/code-style",{"id":168,"data":170,"body":171,"filePath":172,"digest":173,"rendered":174,"legacyId":191},{},"# Code Style Guidelines\n\n## No Comments in Code\nCode should be self-documenting through clear naming and structure. Comments indicate that the code itself is not clear enough.\nClass-level/method-level comments should be used to ensure that documentation generators produce quality output.\n\n## Prefer Options Objects\nUse options objects for function parameters as the default pattern. Only use positional parameters when there's a clear, compelling reason.\n\n```typescript\n// Good: Options object with clear property names\ntype CreatePaymentOptions = {\n  amount: number;\n  currency: string;\n  cardId: string;\n  customerId: string;\n  description?: string;\n};\n\nconst createPayment = (options: CreatePaymentOptions): Payment => {\n  // implementation\n};\n```","src/content/guides/agent-file/code-style.md","704c44792673cacb",{"html":175,"metadata":176},"\u003Ch1 id=\"code-style-guidelines\">Code Style Guidelines\u003C/h1>\n\u003Ch2 id=\"no-comments-in-code\">No Comments in Code\u003C/h2>\n\u003Cp>Code should be self-documenting through clear naming and structure. Comments indicate that the code itself is not clear enough.\nClass-level/method-level comments should be used to ensure that documentation generators produce quality output.\u003C/p>\n\u003Ch2 id=\"prefer-options-objects\">Prefer Options Objects\u003C/h2>\n\u003Cp>Use options objects for function parameters as the default pattern. Only use positional parameters when there’s a clear, compelling reason.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Good: Options object with clear property names\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">type\u003C/span>\u003Cspan style=\"color:#B392F0\"> CreatePaymentOptions\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  amount\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  currency\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  cardId\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  customerId\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  description\u003C/span>\u003Cspan style=\"color:#F97583\">?:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#B392F0\"> createPayment\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">options\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> CreatePaymentOptions\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Payment\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // implementation\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\u003C/code>\u003C/pre>",{"headings":177,"localImagePaths":187,"remoteImagePaths":188,"frontmatter":189,"imagePaths":190},[178,181,184],{"depth":22,"slug":179,"text":180},"code-style-guidelines","Code Style Guidelines",{"depth":25,"slug":182,"text":183},"no-comments-in-code","No Comments in Code",{"depth":25,"slug":185,"text":186},"prefer-options-objects","Prefer Options Objects",[],[],{},[],"agent-file/code-style.md","agent-file/testing-principals",{"id":192,"data":194,"body":195,"filePath":196,"digest":197,"rendered":198,"legacyId":215},{},"# Testing Principles\n\n## Behavior-Driven Testing\n- **No \"unit tests\"** - this term is not helpful. Tests should verify expected behavior, treating implementation as a black box\n- Test through the public API exclusively - internals should be invisible to tests\n- No 1:1 mapping between test files and implementation files\n- Tests that examine internal implementation details are wasteful and should be avoided\n- **Coverage targets**: 100% coverage should be expected at all times, but these tests must ALWAYS be based on business behaviour, not implementation details\n- Tests must document expected business behaviour\n\n## Test Data Pattern\nUse factory functions with optional overrides for test data:\n\n```typescript\nconst getMockPaymentPostPaymentRequest = (\n  overrides?: Partial\u003CPostPaymentsRequestV3>\n): PostPaymentsRequestV3 => {\n  return {\n    CardAccountId: \"1234567890123456\",\n    Amount: 100,\n    Source: \"Web\",\n    AccountStatus: \"Normal\",\n    LastName: \"Doe\",\n    DateOfBirth: \"1980-01-01\",\n    PayingCardDetails: {\n      Cvv: \"123\",\n      Token: \"token\",\n    },\n    AddressDetails: getMockAddressDetails(),\n    Brand: \"Visa\",\n    ...overrides,\n  };\n};","src/content/guides/agent-file/testing-principals.md","878be58dadd89e7a",{"html":199,"metadata":200},"\u003Ch1 id=\"testing-principles\">Testing Principles\u003C/h1>\n\u003Ch2 id=\"behavior-driven-testing\">Behavior-Driven Testing\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>No “unit tests”\u003C/strong> - this term is not helpful. Tests should verify expected behavior, treating implementation as a black box\u003C/li>\n\u003Cli>Test through the public API exclusively - internals should be invisible to tests\u003C/li>\n\u003Cli>No 1:1 mapping between test files and implementation files\u003C/li>\n\u003Cli>Tests that examine internal implementation details are wasteful and should be avoided\u003C/li>\n\u003Cli>\u003Cstrong>Coverage targets\u003C/strong>: 100% coverage should be expected at all times, but these tests must ALWAYS be based on business behaviour, not implementation details\u003C/li>\n\u003Cli>Tests must document expected business behaviour\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"test-data-pattern\">Test Data Pattern\u003C/h2>\n\u003Cp>Use factory functions with optional overrides for test data:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#B392F0\"> getMockPaymentPostPaymentRequest\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  overrides\u003C/span>\u003Cspan style=\"color:#F97583\">?:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Partial\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">PostPaymentsRequestV3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> PostPaymentsRequestV3\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    CardAccountId: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"1234567890123456\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    Amount: \u003C/span>\u003Cspan style=\"color:#79B8FF\">100\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    Source: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Web\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    AccountStatus: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Normal\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    LastName: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Doe\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    DateOfBirth: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"1980-01-01\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    PayingCardDetails: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      Cvv: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"123\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      Token: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"token\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    AddressDetails: \u003C/span>\u003Cspan style=\"color:#B392F0\">getMockAddressDetails\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    Brand: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Visa\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    ...\u003C/span>\u003Cspan style=\"color:#E1E4E8\">overrides,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\u003C/code>\u003C/pre>",{"headings":201,"localImagePaths":211,"remoteImagePaths":212,"frontmatter":213,"imagePaths":214},[202,205,208],{"depth":22,"slug":203,"text":204},"testing-principles","Testing Principles",{"depth":25,"slug":206,"text":207},"behavior-driven-testing","Behavior-Driven Testing",{"depth":25,"slug":209,"text":210},"test-data-pattern","Test Data Pattern",[],[],{},[],"agent-file/testing-principals.md","agent-file/agent",{"id":216,"data":218,"body":219,"filePath":220,"digest":221,"rendered":222,"legacyId":263},{},"# Development Guidelines\n\n## Core Philosophy\n\n**TEST-DRIVEN DEVELOPMENT IS NON-NEGOTIABLE.** Every single line of production code must be written in response to a failing test. No exceptions. This is not a suggestion or a preference - it is the fundamental practice that enables all other principles.\n\nI follow Test-Driven Development (TDD) with a strong emphasis on behavior-driven testing and functional programming principles. All work should be done in small, incremental changes that maintain a working state throughout development.\n\n## Quick Reference\n\n**Key Principles:**\n- Write tests first (TDD)\n- Test behavior, not implementation\n- No `any` types or type assertions\n- Immutable data only\n- Small, pure functions\n- TypeScript strict mode always\n- Use real schemas/types in tests, never redefine them\n\n**Preferred Tools:**\n- **Language**: TypeScript (strict mode)\n- **Testing**: Jest/Vitest + React Testing Library\n- **State Management**: Prefer immutable patterns\n\n## TypeScript Guidelines\n\n### Strict Mode Requirements\n```json\n{\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"noImplicitAny\": true,\n    \"strictNullChecks\": true,\n    \"noImplicitReturns\": true,\n    \"noFallthroughCasesInSwitch\": true\n  }\n}\n```\n\n- **No `any`** - ever. Use `unknown` if type is truly unknown\n- **No type assertions** (`as SomeType`) unless absolutely necessary with clear justification\n- **No `@ts-ignore`** or `@ts-expect-error` without explicit explanation\n- These rules apply to test code as well as production code\n\n## Development Workflow\n\n### Task/Issue source\n- References to project Issues starting with GTM-* are from linear, access these via the Linear MCP server\n\n\n### Pull Request Guidelines\n\nWhen creating a pull request, follow these guidelines\n\n- Create a new branch for each user story\n- Name the branch with the user story number and a brief description\n- Include a link to the user story in the PR description\n- Create a PR using the GitHub Cli using the gh commands `gh pr create` \n- When create a GitHub PR be sure to include all the items below - to ensure it's formatted correctly use the flag --body-file with a temp pr-description.md file that isn't commited.\n- Reference any relevant issues in the PR description \n- Include a high level summary of the changes made in the PR description for a product manager to understand\n- When pushing a branch in GitHub always push to origin and never create a Fork\n- Include another summary of the changes made in the PR description for a developer to understand (Technical Notes)\n- Include a mermaid digram explain how the new features work in the PR description. This is to help a human quickly get up to speed as to what was changed and why. This is very important.\n- Ensure all CI checks pass before merging (unit tests)\n- Outline if you added any additional unit tests in the description and include the names of the new tests added and number of tests removed eg (Added 2 tests, removed 1 test) with a summary of the tests added and removed.\n- Include Human testing instructions for a human to review with URLS, eg visit / , perform action, expected 1. toggle to do XYZ\n- No need to include screenshots in the PR\n\n### TDD Process - THE FUNDAMENTAL PRACTICE\n**CRITICAL**: TDD is not optional. Every feature, every bug fix, every change MUST follow this process:\n\n1. **Red**: Write a failing test for the desired behavior. NO PRODUCTION CODE until you have a failing test.\n2. **Green**: Write the MINIMUM code to make the test pass. Resist the urge to write more than needed.\n3. **Refactor**: Assess the code for improvement opportunities. If refactoring would add value, clean up the code while keeping tests green.\n\n**Common TDD Violations to Avoid:**\n- Writing production code without a failing test first\n- Writing multiple tests before making the first one pass\n- Writing more production code than needed to pass the current test\n- Skipping the refactor assessment step when code could be improved\n\n**Remember**: If you're typing production code and there isn't a failing test demanding that code, you're not doing TDD.\n\n\n## Refactoring Guidelines\n\nRefactoring must never break existing consumers of your code. Always:\n1. Commit before refactoring\n2. Look for useful abstractions based on semantic meaning\n3. Maintain external APIs during refactoring\n4. Verify and commit after refactoring\n\n## Error Handling\nUse Result types or early returns:\n\n```typescript\ntype Result\u003CT, E = Error> =\n  | { success: true; data: T }\n  | { success: false; error: E };\n\nconst processPayment = (\n  payment: Payment\n): Result\u003CProcessedPayment, PaymentError> => {\n  if (!isValidPayment(payment)) {\n    return { success: false, error: new PaymentError(\"Invalid payment\") };\n  }\n  \n  return { success: true, data: executePayment(payment) };\n};\n```","src/content/guides/agent-file/AGENT.md","a746a9186978da59",{"html":223,"metadata":224},"\u003Ch1 id=\"development-guidelines\">Development Guidelines\u003C/h1>\n\u003Ch2 id=\"core-philosophy\">Core Philosophy\u003C/h2>\n\u003Cp>\u003Cstrong>TEST-DRIVEN DEVELOPMENT IS NON-NEGOTIABLE.\u003C/strong> Every single line of production code must be written in response to a failing test. No exceptions. This is not a suggestion or a preference - it is the fundamental practice that enables all other principles.\u003C/p>\n\u003Cp>I follow Test-Driven Development (TDD) with a strong emphasis on behavior-driven testing and functional programming principles. All work should be done in small, incremental changes that maintain a working state throughout development.\u003C/p>\n\u003Ch2 id=\"quick-reference\">Quick Reference\u003C/h2>\n\u003Cp>\u003Cstrong>Key Principles:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>Write tests first (TDD)\u003C/li>\n\u003Cli>Test behavior, not implementation\u003C/li>\n\u003Cli>No \u003Ccode>any\u003C/code> types or type assertions\u003C/li>\n\u003Cli>Immutable data only\u003C/li>\n\u003Cli>Small, pure functions\u003C/li>\n\u003Cli>TypeScript strict mode always\u003C/li>\n\u003Cli>Use real schemas/types in tests, never redefine them\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>Preferred Tools:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Language\u003C/strong>: TypeScript (strict mode)\u003C/li>\n\u003Cli>\u003Cstrong>Testing\u003C/strong>: Jest/Vitest + React Testing Library\u003C/li>\n\u003Cli>\u003Cstrong>State Management\u003C/strong>: Prefer immutable patterns\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"typescript-guidelines\">TypeScript Guidelines\u003C/h2>\n\u003Ch3 id=\"strict-mode-requirements\">Strict Mode Requirements\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"json\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"compilerOptions\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"strict\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"noImplicitAny\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"strictNullChecks\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"noImplicitReturns\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"noFallthroughCasesInSwitch\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cul>\n\u003Cli>\u003Cstrong>No \u003Ccode>any\u003C/code>\u003C/strong> - ever. Use \u003Ccode>unknown\u003C/code> if type is truly unknown\u003C/li>\n\u003Cli>\u003Cstrong>No type assertions\u003C/strong> (\u003Ccode>as SomeType\u003C/code>) unless absolutely necessary with clear justification\u003C/li>\n\u003Cli>\u003Cstrong>No \u003Ccode>@ts-ignore\u003C/code>\u003C/strong> or \u003Ccode>@ts-expect-error\u003C/code> without explicit explanation\u003C/li>\n\u003Cli>These rules apply to test code as well as production code\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"development-workflow\">Development Workflow\u003C/h2>\n\u003Ch3 id=\"taskissue-source\">Task/Issue source\u003C/h3>\n\u003Cul>\n\u003Cli>References to project Issues starting with GTM-* are from linear, access these via the Linear MCP server\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"pull-request-guidelines\">Pull Request Guidelines\u003C/h3>\n\u003Cp>When creating a pull request, follow these guidelines\u003C/p>\n\u003Cul>\n\u003Cli>Create a new branch for each user story\u003C/li>\n\u003Cli>Name the branch with the user story number and a brief description\u003C/li>\n\u003Cli>Include a link to the user story in the PR description\u003C/li>\n\u003Cli>Create a PR using the GitHub Cli using the gh commands \u003Ccode>gh pr create\u003C/code>\u003C/li>\n\u003Cli>When create a GitHub PR be sure to include all the items below - to ensure it’s formatted correctly use the flag —body-file with a temp pr-description.md file that isn’t commited.\u003C/li>\n\u003Cli>Reference any relevant issues in the PR description\u003C/li>\n\u003Cli>Include a high level summary of the changes made in the PR description for a product manager to understand\u003C/li>\n\u003Cli>When pushing a branch in GitHub always push to origin and never create a Fork\u003C/li>\n\u003Cli>Include another summary of the changes made in the PR description for a developer to understand (Technical Notes)\u003C/li>\n\u003Cli>Include a mermaid digram explain how the new features work in the PR description. This is to help a human quickly get up to speed as to what was changed and why. This is very important.\u003C/li>\n\u003Cli>Ensure all CI checks pass before merging (unit tests)\u003C/li>\n\u003Cli>Outline if you added any additional unit tests in the description and include the names of the new tests added and number of tests removed eg (Added 2 tests, removed 1 test) with a summary of the tests added and removed.\u003C/li>\n\u003Cli>Include Human testing instructions for a human to review with URLS, eg visit / , perform action, expected 1. toggle to do XYZ\u003C/li>\n\u003Cli>No need to include screenshots in the PR\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"tdd-process---the-fundamental-practice\">TDD Process - THE FUNDAMENTAL PRACTICE\u003C/h3>\n\u003Cp>\u003Cstrong>CRITICAL\u003C/strong>: TDD is not optional. Every feature, every bug fix, every change MUST follow this process:\u003C/p>\n\u003Col>\n\u003Cli>\u003Cstrong>Red\u003C/strong>: Write a failing test for the desired behavior. NO PRODUCTION CODE until you have a failing test.\u003C/li>\n\u003Cli>\u003Cstrong>Green\u003C/strong>: Write the MINIMUM code to make the test pass. Resist the urge to write more than needed.\u003C/li>\n\u003Cli>\u003Cstrong>Refactor\u003C/strong>: Assess the code for improvement opportunities. If refactoring would add value, clean up the code while keeping tests green.\u003C/li>\n\u003C/ol>\n\u003Cp>\u003Cstrong>Common TDD Violations to Avoid:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>Writing production code without a failing test first\u003C/li>\n\u003Cli>Writing multiple tests before making the first one pass\u003C/li>\n\u003Cli>Writing more production code than needed to pass the current test\u003C/li>\n\u003Cli>Skipping the refactor assessment step when code could be improved\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>Remember\u003C/strong>: If you’re typing production code and there isn’t a failing test demanding that code, you’re not doing TDD.\u003C/p>\n\u003Ch2 id=\"refactoring-guidelines\">Refactoring Guidelines\u003C/h2>\n\u003Cp>Refactoring must never break existing consumers of your code. Always:\u003C/p>\n\u003Col>\n\u003Cli>Commit before refactoring\u003C/li>\n\u003Cli>Look for useful abstractions based on semantic meaning\u003C/li>\n\u003Cli>Maintain external APIs during refactoring\u003C/li>\n\u003Cli>Verify and commit after refactoring\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"error-handling\">Error Handling\u003C/h2>\n\u003Cp>Use Result types or early returns:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">type\u003C/span>\u003Cspan style=\"color:#B392F0\"> Result\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">T\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#B392F0\">E\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> Error\u003C/span>\u003Cspan style=\"color:#E1E4E8\">> \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  |\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#FFAB70\">success\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#FFAB70\">data\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> T\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  |\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#FFAB70\">success\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> false\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#FFAB70\">error\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> E\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#B392F0\"> processPayment\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  payment\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Payment\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Result\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">ProcessedPayment\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#B392F0\">PaymentError\u003C/span>\u003Cspan style=\"color:#E1E4E8\">> \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">!\u003C/span>\u003Cspan style=\"color:#B392F0\">isValidPayment\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(payment)) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { success: \u003C/span>\u003Cspan style=\"color:#79B8FF\">false\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, error: \u003C/span>\u003Cspan style=\"color:#F97583\">new\u003C/span>\u003Cspan style=\"color:#B392F0\"> PaymentError\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Invalid payment\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { success: \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, data: \u003C/span>\u003Cspan style=\"color:#B392F0\">executePayment\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(payment) };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\u003C/code>\u003C/pre>",{"headings":225,"localImagePaths":259,"remoteImagePaths":260,"frontmatter":261,"imagePaths":262},[226,229,232,235,238,241,244,247,250,253,256],{"depth":22,"slug":227,"text":228},"development-guidelines","Development Guidelines",{"depth":25,"slug":230,"text":231},"core-philosophy","Core Philosophy",{"depth":25,"slug":233,"text":234},"quick-reference","Quick Reference",{"depth":25,"slug":236,"text":237},"typescript-guidelines","TypeScript Guidelines",{"depth":32,"slug":239,"text":240},"strict-mode-requirements","Strict Mode Requirements",{"depth":25,"slug":242,"text":243},"development-workflow","Development Workflow",{"depth":32,"slug":245,"text":246},"taskissue-source","Task/Issue source",{"depth":32,"slug":248,"text":249},"pull-request-guidelines","Pull Request Guidelines",{"depth":32,"slug":251,"text":252},"tdd-process---the-fundamental-practice","TDD Process - THE FUNDAMENTAL PRACTICE",{"depth":25,"slug":254,"text":255},"refactoring-guidelines","Refactoring Guidelines",{"depth":25,"slug":257,"text":258},"error-handling","Error Handling",[],[],{},[],"agent-file/AGENT.md","agent-file/best_practices",{"id":264,"data":266,"body":267,"filePath":268,"digest":269,"rendered":270,"legacyId":352},{},"## Overview\nThis is guide for creating effective AGENT.md files that enable AI coding tools like Amp to understand and work with your codebase.\nWhen you open up an empty project, Amp will ask you to generate an `AGENT.md` file. \nThis universal configuration file serves allows Amp or any agent using `AGENT.md`  file reference to understand your project's structure, conventions, and requirements.\n\n## Core Principles\n\n| Principle | Description |\n|-----------|-------------|\n| **Think Like Onboarding Documentation** | Write your `AGENT.md` as if you're onboarding a new team member on their first day. Include everything they'd need to know to start contributing effectively. |\n| **Be Explicit and Comprehensive** | AI agents work best with clear, detailed instructions. Don't assume the AI will guess your preferences—state them explicitly. |\n| **Keep It Current** | An outdated `AGENT.md` is worse than no `AGENT.md`. Make updating this file part of your development workflow when processes or conventions change. |\n\n## Essential Sections\n\n### Project Overview\n\nInclude these key elements:\n\n- **Purpose**: Brief description of what the project does\n- **Architecture**: High-level architecture overview  \n- **Key directories**: Map out your folder structure\n- **Tech stack**: List primary technologies, frameworks, and tools\n\n### Build & Commands\n\n> **Critical for AI agents** - This section enables effective automated assistance.\n\nDocument all essential commands:\n\n- **Development commands**: How to start local servers, run in development mode\n- **Testing commands**: Unit tests, integration tests, specific test files  \n- **Build commands**: Production builds, typecheck, linting\n- **Deployment commands**: If applicable\n- **Common debugging commands**: Log viewing, database access, etc.\n\n### Example\n```markdown\n\n\nBuild & Commands\n\nDevelopment\n- Start development: `npm run dev`\n- Hot reload: `npm run dev --watch`\n\nTesting  \n- Run all tests: `npm test`\n- Run specific test: `npm test src/components/Button.test.ts`\n- Test coverage: `npm run test:coverage`\n\nBuild & Deploy\n- Typecheck: `npm run type-check`\n- Lint and fix: `npm run lint:fix`  \n- Build for production: `npm run build`\n- Deploy: `npm run deploy`\n```\n\n### Tech Stack\n- **Languages**: TypeScript, JavaScript\n- **Frameworks**: React, Node.js, Express/Fastify\n- **State Management**: Zustand / Redux Toolkit / Context API\n- **Database**: PostgreSQL + Prisma\n- **Tooling**: ESLint, Prettier, Vitest/Jest, Playwright, Docker, pnpm\n\n\n### Code Style & Conventions\n\n| Category         | Guidelines                                                                 |\n|------------------|---------------------------------------------------------------------------|\n| **Formatting**   | 2-space indentation, single quotes, semicolons required, max line: 100 chars |\n| **Naming**       | `camelCase` for vars/functions, `PascalCase` for components, kebab-case files |\n| **Imports**      | Absolute imports preferred (`@/utils/foo.ts`), grouped & ordered alphabetically |\n| **Comments**     | Use inline comments sparingly. Use `/** JSDoc */` for all exported functions/types |\n| **TypeScript**   | Use `strict` mode, no `any`, prefer `unknown` over `any`, define shared types in `@/types/` |\n\n\n### Testing Guidelines\n\n- **Frameworks**: Unit tests with Vitest or Jest; integration + E2E with Playwright or Supertest.\n- **Test Structure**: Mirror source directory; test files next to source or in `/tests`.\n- **Naming**: Use `.test.ts` suffix. Example: `Button.test.ts`, `api/user.test.ts`\n- **Mocking**: Use `vi.mock()` or `jest.mock()` for services, API clients, and DB calls.\n- **Coverage**: Maintain ≥ 80% coverage; no PR merged without tests unless explicitly approved.\n\n\n### Architecture & Patterns\n\n- **Design Patterns**: Feature-based folder structure, dependency injection via service layers.\n- **State Management**: Use Zustand or Redux Toolkit; colocate state with components when possible.\n- **Data Flow**: Uni-directional data flow; APIs return normalized data; hydration via SWR or React Query.\n- **API Conventions**: RESTful endpoints; snake_case in DB, camelCase in API/Frontend.\n- **Database Patterns**: Prisma migrations in `db/migrations/`; seed scripts in `db/seed.ts`\n\n\n### Security Considerations\n\n- **Authentication**: JWTs via `Authorization` header; use HTTP-only cookies for frontend.\n- **Input Validation**: All inputs validated with Zod or Joi before DB access.\n- **Env Variables**: Stored in `.env`, accessed via `process.env`; secrets never committed.\n- **Dependencies**: Use `pnpm audit`; dependabot alerts must be addressed within 3 days.\n\n### Others Considerations\n- **MCP Tooling guidelines**: Specific tool usage via MCP for integration with third party services.\n- **SDLC Guideline**: Guidelines on which tools are used in SDLC.\n- **Dev Practices**: How your team works and is organised, to make your code more maintanable.\n---\n\n## Advanced Features\n\n### File References\nSee our API documentation in [@docs/api.md](docs/api.md) and coding standards in [@CONTRIBUTING.md](CONTRIBUTING.md)\n\n### Hierarchical Structure\nFor larger projects, consider multiple AGENT.md files:\n```text\nproject-root/\n├── AGENT.md              # General project guidance\n├── frontend/\n│   └── AGENT.md          # Frontend-specific rules\n├── api/\n│   └── AGENT.md          # API-specific rules\n└── ~/.config/AGENT.md    # Personal preferences\n```\n### Working in large code bases\nIf you are working on a large mono we generally recommend splitting into several `AGENT.md` files.\n\nAmp is selective about AGENT.md files based on a hierarchy:\n- Always loaded: ~/.config/AGENT.md, workspace root AGENT.md and parent directory `AGENT.md` files up to `$HOME`\n- Conditionally loaded:  AGENT.md files in subdirectories only when Amp reads files from those specific directories. Amp discovers them contextually as it works in different parts of your project.\n  \nFor instance, we have several AGENT.md in Amp codebase:\n```asridhar@Mac amp % find . -name AGENT.md\n./AGENT.md\n./external-api/types/AGENT.md\n./core/AGENT.md\n./web/AGENT.md\n./server/AGENT.md\n./server/src/routes/api/(external)/AGENT.md\n./server/src/routes/(agentmd)/AGENT.md\n./cli/AGENT.md\n./cli/src/tui/AGENT.md\n```\n\n\n\n### Environment-Specific Info\n\n#### Development Environment\n- Frontend: \u003Chttp://localhost:3000>  \n- Backend API: \u003Chttp://localhost:3001>  \n- DB: PostgreSQL `localhost:5432`  \n- Redis: `localhost:6379`  \n- Email previewer: \u003Chttp://localhost:8025>\n\n#### Staging Environment  \n- Frontend: \u003Chttps://staging.example.com>  \n- API: \u003Chttps://api-staging.example.com>  \n- DB: Managed PostgreSQL (Neon/AWS RDS)  \n- Secrets: Managed via GitHub Actions → AWS SSM\n\n\n---\n\n## Common Mistakes\n\n| Mistake                      | Problem                                   | Better Approach                                            |\n|-----------------------------|-------------------------------------------|------------------------------------------------------------|\n| ❌ Too vague commands        | “Run tests”                               | ✅ `pnpm test --run --no-color`                            |\n| ❌ Missing error handling    | No instructions for failed builds         | ✅ \"If build fails, check Node version (18+), try `pnpm install` again\" |\n| ❌ Unclear formatting rules  | “Use prettier”                            | ✅ “Prettier config: single quotes, trailing commas, 100-char line max” |\n| ❌ Stale commands            | Breaks CI/CD after tool updates           | ✅ AGENT.md reviewed every sprint, updated via PR checklist |\n\n---\n\n## Maintenance\n\n### Regular Reviews\n\n- Review AGENT.md regularly during sprint planning or retrospectives\n- Update when onboarding new team members (they'll spot gaps)\n- Check during major dependency updates or architecture changes\n\n### Version Control Integration\n\n- Make AGENT.md updates part of pull requests when changing processes\n- Include AGENT.md reviews in your code review checklist\n- Consider requiring AGENT.md updates for certain types of changes\n\n### Team Collaboration\n\n- Discuss AGENT.md contents in team meetings\n- Encourage team members to suggest improvements\n- Use the file as a living document that evolves with your team\n---\n## Quality Checklist\nBefore finalizing your AGENT.md, verify:\n\n- Could a new developer start contributing using only this file?\n- Are all essential commands documented with exact syntax?\n- Do you specify both what to do AND what not to do?\n- Are file paths and directory structures clearly explained?\n- Is the coding style specific enough to be actionable?\n- Are testing practices clearly defined?\n- Is security guidance included where relevant?\n- Are environment setup steps complete?\n- Is the information current and accurate?","src/content/guides/agent-file/Best_Practices.md","d71d423a4c12a9fe",{"html":271,"metadata":272},"\u003Ch2 id=\"overview\">Overview\u003C/h2>\n\u003Cp>This is guide for creating effective AGENT.md files that enable AI coding tools like Amp to understand and work with your codebase.\nWhen you open up an empty project, Amp will ask you to generate an \u003Ccode>AGENT.md\u003C/code> file.\nThis universal configuration file serves allows Amp or any agent using \u003Ccode>AGENT.md\u003C/code>  file reference to understand your project’s structure, conventions, and requirements.\u003C/p>\n\u003Ch2 id=\"core-principles\">Core Principles\u003C/h2>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>Principle\u003C/th>\u003Cth>Description\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>\u003Cstrong>Think Like Onboarding Documentation\u003C/strong>\u003C/td>\u003Ctd>Write your \u003Ccode>AGENT.md\u003C/code> as if you’re onboarding a new team member on their first day. Include everything they’d need to know to start contributing effectively.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Cstrong>Be Explicit and Comprehensive\u003C/strong>\u003C/td>\u003Ctd>AI agents work best with clear, detailed instructions. Don’t assume the AI will guess your preferences—state them explicitly.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Cstrong>Keep It Current\u003C/strong>\u003C/td>\u003Ctd>An outdated \u003Ccode>AGENT.md\u003C/code> is worse than no \u003Ccode>AGENT.md\u003C/code>. Make updating this file part of your development workflow when processes or conventions change.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Ch2 id=\"essential-sections\">Essential Sections\u003C/h2>\n\u003Ch3 id=\"project-overview\">Project Overview\u003C/h3>\n\u003Cp>Include these key elements:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Purpose\u003C/strong>: Brief description of what the project does\u003C/li>\n\u003Cli>\u003Cstrong>Architecture\u003C/strong>: High-level architecture overview\u003C/li>\n\u003Cli>\u003Cstrong>Key directories\u003C/strong>: Map out your folder structure\u003C/li>\n\u003Cli>\u003Cstrong>Tech stack\u003C/strong>: List primary technologies, frameworks, and tools\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"build--commands\">Build &#x26; Commands\u003C/h3>\n\u003Cblockquote>\n\u003Cp>\u003Cstrong>Critical for AI agents\u003C/strong> - This section enables effective automated assistance.\u003C/p>\n\u003C/blockquote>\n\u003Cp>Document all essential commands:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Development commands\u003C/strong>: How to start local servers, run in development mode\u003C/li>\n\u003Cli>\u003Cstrong>Testing commands\u003C/strong>: Unit tests, integration tests, specific test files\u003C/li>\n\u003Cli>\u003Cstrong>Build commands\u003C/strong>: Production builds, typecheck, linting\u003C/li>\n\u003Cli>\u003Cstrong>Deployment commands\u003C/strong>: If applicable\u003C/li>\n\u003Cli>\u003Cstrong>Common debugging commands\u003C/strong>: Log viewing, database access, etc.\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"example\">Example\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"markdown\">\u003Ccode>\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">Build &#x26; Commands\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">Development\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">-\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Start development: \u003C/span>\u003Cspan style=\"color:#79B8FF\">`npm run dev`\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">-\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Hot reload: \u003C/span>\u003Cspan style=\"color:#79B8FF\">`npm run dev --watch`\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">Testing  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">-\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Run all tests: \u003C/span>\u003Cspan style=\"color:#79B8FF\">`npm test`\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">-\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Run specific test: \u003C/span>\u003Cspan style=\"color:#79B8FF\">`npm test src/components/Button.test.ts`\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">-\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Test coverage: \u003C/span>\u003Cspan style=\"color:#79B8FF\">`npm run test:coverage`\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">Build &#x26; Deploy\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">-\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Typecheck: \u003C/span>\u003Cspan style=\"color:#79B8FF\">`npm run type-check`\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">-\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Lint and fix: \u003C/span>\u003Cspan style=\"color:#79B8FF\">`npm run lint:fix`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">-\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Build for production: \u003C/span>\u003Cspan style=\"color:#79B8FF\">`npm run build`\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">-\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Deploy: \u003C/span>\u003Cspan style=\"color:#79B8FF\">`npm run deploy`\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"tech-stack\">Tech Stack\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Languages\u003C/strong>: TypeScript, JavaScript\u003C/li>\n\u003Cli>\u003Cstrong>Frameworks\u003C/strong>: React, Node.js, Express/Fastify\u003C/li>\n\u003Cli>\u003Cstrong>State Management\u003C/strong>: Zustand / Redux Toolkit / Context API\u003C/li>\n\u003Cli>\u003Cstrong>Database\u003C/strong>: PostgreSQL + Prisma\u003C/li>\n\u003Cli>\u003Cstrong>Tooling\u003C/strong>: ESLint, Prettier, Vitest/Jest, Playwright, Docker, pnpm\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"code-style--conventions\">Code Style &#x26; Conventions\u003C/h3>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>Category\u003C/th>\u003Cth>Guidelines\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>\u003Cstrong>Formatting\u003C/strong>\u003C/td>\u003Ctd>2-space indentation, single quotes, semicolons required, max line: 100 chars\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Cstrong>Naming\u003C/strong>\u003C/td>\u003Ctd>\u003Ccode>camelCase\u003C/code> for vars/functions, \u003Ccode>PascalCase\u003C/code> for components, kebab-case files\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Cstrong>Imports\u003C/strong>\u003C/td>\u003Ctd>Absolute imports preferred (\u003Ccode>@/utils/foo.ts\u003C/code>), grouped &#x26; ordered alphabetically\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Cstrong>Comments\u003C/strong>\u003C/td>\u003Ctd>Use inline comments sparingly. Use \u003Ccode>/** JSDoc */\u003C/code> for all exported functions/types\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Cstrong>TypeScript\u003C/strong>\u003C/td>\u003Ctd>Use \u003Ccode>strict\u003C/code> mode, no \u003Ccode>any\u003C/code>, prefer \u003Ccode>unknown\u003C/code> over \u003Ccode>any\u003C/code>, define shared types in \u003Ccode>@/types/\u003C/code>\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Ch3 id=\"testing-guidelines\">Testing Guidelines\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Frameworks\u003C/strong>: Unit tests with Vitest or Jest; integration + E2E with Playwright or Supertest.\u003C/li>\n\u003Cli>\u003Cstrong>Test Structure\u003C/strong>: Mirror source directory; test files next to source or in \u003Ccode>/tests\u003C/code>.\u003C/li>\n\u003Cli>\u003Cstrong>Naming\u003C/strong>: Use \u003Ccode>.test.ts\u003C/code> suffix. Example: \u003Ccode>Button.test.ts\u003C/code>, \u003Ccode>api/user.test.ts\u003C/code>\u003C/li>\n\u003Cli>\u003Cstrong>Mocking\u003C/strong>: Use \u003Ccode>vi.mock()\u003C/code> or \u003Ccode>jest.mock()\u003C/code> for services, API clients, and DB calls.\u003C/li>\n\u003Cli>\u003Cstrong>Coverage\u003C/strong>: Maintain ≥ 80% coverage; no PR merged without tests unless explicitly approved.\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"architecture--patterns\">Architecture &#x26; Patterns\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Design Patterns\u003C/strong>: Feature-based folder structure, dependency injection via service layers.\u003C/li>\n\u003Cli>\u003Cstrong>State Management\u003C/strong>: Use Zustand or Redux Toolkit; colocate state with components when possible.\u003C/li>\n\u003Cli>\u003Cstrong>Data Flow\u003C/strong>: Uni-directional data flow; APIs return normalized data; hydration via SWR or React Query.\u003C/li>\n\u003Cli>\u003Cstrong>API Conventions\u003C/strong>: RESTful endpoints; snake_case in DB, camelCase in API/Frontend.\u003C/li>\n\u003Cli>\u003Cstrong>Database Patterns\u003C/strong>: Prisma migrations in \u003Ccode>db/migrations/\u003C/code>; seed scripts in \u003Ccode>db/seed.ts\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"security-considerations\">Security Considerations\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Authentication\u003C/strong>: JWTs via \u003Ccode>Authorization\u003C/code> header; use HTTP-only cookies for frontend.\u003C/li>\n\u003Cli>\u003Cstrong>Input Validation\u003C/strong>: All inputs validated with Zod or Joi before DB access.\u003C/li>\n\u003Cli>\u003Cstrong>Env Variables\u003C/strong>: Stored in \u003Ccode>.env\u003C/code>, accessed via \u003Ccode>process.env\u003C/code>; secrets never committed.\u003C/li>\n\u003Cli>\u003Cstrong>Dependencies\u003C/strong>: Use \u003Ccode>pnpm audit\u003C/code>; dependabot alerts must be addressed within 3 days.\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"others-considerations\">Others Considerations\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>MCP Tooling guidelines\u003C/strong>: Specific tool usage via MCP for integration with third party services.\u003C/li>\n\u003Cli>\u003Cstrong>SDLC Guideline\u003C/strong>: Guidelines on which tools are used in SDLC.\u003C/li>\n\u003Cli>\u003Cstrong>Dev Practices\u003C/strong>: How your team works and is organised, to make your code more maintanable.\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Ch2 id=\"advanced-features\">Advanced Features\u003C/h2>\n\u003Ch3 id=\"file-references\">File References\u003C/h3>\n\u003Cp>See our API documentation in \u003Ca href=\"docs/api.md\">@docs/api.md\u003C/a> and coding standards in \u003Ca href=\"CONTRIBUTING.md\">@CONTRIBUTING.md\u003C/a>\u003C/p>\n\u003Ch3 id=\"hierarchical-structure\">Hierarchical Structure\u003C/h3>\n\u003Cp>For larger projects, consider multiple AGENT.md files:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"text\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>project-root/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>├── AGENT.md              # General project guidance\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>├── frontend/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│   └── AGENT.md          # Frontend-specific rules\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>├── api/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│   └── AGENT.md          # API-specific rules\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>└── ~/.config/AGENT.md    # Personal preferences\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"working-in-large-code-bases\">Working in large code bases\u003C/h3>\n\u003Cp>If you are working on a large mono we generally recommend splitting into several \u003Ccode>AGENT.md\u003C/code> files.\u003C/p>\n\u003Cp>Amp is selective about AGENT.md files based on a hierarchy:\u003C/p>\n\u003Cul>\n\u003Cli>Always loaded: ~/.config/AGENT.md, workspace root AGENT.md and parent directory \u003Ccode>AGENT.md\u003C/code> files up to \u003Ccode>$HOME\u003C/code>\u003C/li>\n\u003Cli>Conditionally loaded:  AGENT.md files in subdirectories only when Amp reads files from those specific directories. Amp discovers them contextually as it works in different parts of your project.\u003C/li>\n\u003C/ul>\n\u003Cp>For instance, we have several AGENT.md in Amp codebase:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>./AGENT.md\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>./external-api/types/AGENT.md\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>./core/AGENT.md\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>./web/AGENT.md\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>./server/AGENT.md\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>./server/src/routes/api/(external)/AGENT.md\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>./server/src/routes/(agentmd)/AGENT.md\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>./cli/AGENT.md\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>./cli/src/tui/AGENT.md\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"environment-specific-info\">Environment-Specific Info\u003C/h3>\n\u003Ch4 id=\"development-environment\">Development Environment\u003C/h4>\n\u003Cul>\n\u003Cli>Frontend: \u003Ca href=\"http://localhost:3000\">http://localhost:3000\u003C/a>\u003C/li>\n\u003Cli>Backend API: \u003Ca href=\"http://localhost:3001\">http://localhost:3001\u003C/a>\u003C/li>\n\u003Cli>DB: PostgreSQL \u003Ccode>localhost:5432\u003C/code>\u003C/li>\n\u003Cli>Redis: \u003Ccode>localhost:6379\u003C/code>\u003C/li>\n\u003Cli>Email previewer: \u003Ca href=\"http://localhost:8025\">http://localhost:8025\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch4 id=\"staging-environment\">Staging Environment\u003C/h4>\n\u003Cul>\n\u003Cli>Frontend: \u003Ca href=\"https://staging.example.com\">https://staging.example.com\u003C/a>\u003C/li>\n\u003Cli>API: \u003Ca href=\"https://api-staging.example.com\">https://api-staging.example.com\u003C/a>\u003C/li>\n\u003Cli>DB: Managed PostgreSQL (Neon/AWS RDS)\u003C/li>\n\u003Cli>Secrets: Managed via GitHub Actions → AWS SSM\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Ch2 id=\"common-mistakes\">Common Mistakes\u003C/h2>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>Mistake\u003C/th>\u003Cth>Problem\u003C/th>\u003Cth>Better Approach\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>❌ Too vague commands\u003C/td>\u003Ctd>“Run tests”\u003C/td>\u003Ctd>✅ \u003Ccode>pnpm test --run --no-color\u003C/code>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>❌ Missing error handling\u003C/td>\u003Ctd>No instructions for failed builds\u003C/td>\u003Ctd>✅ “If build fails, check Node version (18+), try \u003Ccode>pnpm install\u003C/code> again”\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>❌ Unclear formatting rules\u003C/td>\u003Ctd>“Use prettier”\u003C/td>\u003Ctd>✅ “Prettier config: single quotes, trailing commas, 100-char line max”\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>❌ Stale commands\u003C/td>\u003Ctd>Breaks CI/CD after tool updates\u003C/td>\u003Ctd>✅ AGENT.md reviewed every sprint, updated via PR checklist\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Chr>\n\u003Ch2 id=\"maintenance\">Maintenance\u003C/h2>\n\u003Ch3 id=\"regular-reviews\">Regular Reviews\u003C/h3>\n\u003Cul>\n\u003Cli>Review AGENT.md regularly during sprint planning or retrospectives\u003C/li>\n\u003Cli>Update when onboarding new team members (they’ll spot gaps)\u003C/li>\n\u003Cli>Check during major dependency updates or architecture changes\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"version-control-integration\">Version Control Integration\u003C/h3>\n\u003Cul>\n\u003Cli>Make AGENT.md updates part of pull requests when changing processes\u003C/li>\n\u003Cli>Include AGENT.md reviews in your code review checklist\u003C/li>\n\u003Cli>Consider requiring AGENT.md updates for certain types of changes\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"team-collaboration\">Team Collaboration\u003C/h3>\n\u003Cul>\n\u003Cli>Discuss AGENT.md contents in team meetings\u003C/li>\n\u003Cli>Encourage team members to suggest improvements\u003C/li>\n\u003Cli>Use the file as a living document that evolves with your team\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Ch2 id=\"quality-checklist\">Quality Checklist\u003C/h2>\n\u003Cp>Before finalizing your AGENT.md, verify:\u003C/p>\n\u003Cul>\n\u003Cli>Could a new developer start contributing using only this file?\u003C/li>\n\u003Cli>Are all essential commands documented with exact syntax?\u003C/li>\n\u003Cli>Do you specify both what to do AND what not to do?\u003C/li>\n\u003Cli>Are file paths and directory structures clearly explained?\u003C/li>\n\u003Cli>Is the coding style specific enough to be actionable?\u003C/li>\n\u003Cli>Are testing practices clearly defined?\u003C/li>\n\u003Cli>Is security guidance included where relevant?\u003C/li>\n\u003Cli>Are environment setup steps complete?\u003C/li>\n\u003Cli>Is the information current and accurate?\u003C/li>\n\u003C/ul>",{"headings":273,"localImagePaths":348,"remoteImagePaths":349,"frontmatter":350,"imagePaths":351},[274,275,278,281,284,287,290,293,296,299,302,305,308,311,314,317,320,323,327,330,333,336,339,342,345],{"depth":25,"slug":122,"text":123},{"depth":25,"slug":276,"text":277},"core-principles","Core Principles",{"depth":25,"slug":279,"text":280},"essential-sections","Essential Sections",{"depth":32,"slug":282,"text":283},"project-overview","Project Overview",{"depth":32,"slug":285,"text":286},"build--commands","Build & Commands",{"depth":32,"slug":288,"text":289},"example","Example",{"depth":32,"slug":291,"text":292},"tech-stack","Tech Stack",{"depth":32,"slug":294,"text":295},"code-style--conventions","Code Style & Conventions",{"depth":32,"slug":297,"text":298},"testing-guidelines","Testing Guidelines",{"depth":32,"slug":300,"text":301},"architecture--patterns","Architecture & Patterns",{"depth":32,"slug":303,"text":304},"security-considerations","Security Considerations",{"depth":32,"slug":306,"text":307},"others-considerations","Others Considerations",{"depth":25,"slug":309,"text":310},"advanced-features","Advanced Features",{"depth":32,"slug":312,"text":313},"file-references","File References",{"depth":32,"slug":315,"text":316},"hierarchical-structure","Hierarchical Structure",{"depth":32,"slug":318,"text":319},"working-in-large-code-bases","Working in large code bases",{"depth":32,"slug":321,"text":322},"environment-specific-info","Environment-Specific Info",{"depth":324,"slug":325,"text":326},4,"development-environment","Development Environment",{"depth":324,"slug":328,"text":329},"staging-environment","Staging Environment",{"depth":25,"slug":331,"text":332},"common-mistakes","Common Mistakes",{"depth":25,"slug":334,"text":335},"maintenance","Maintenance",{"depth":32,"slug":337,"text":338},"regular-reviews","Regular Reviews",{"depth":32,"slug":340,"text":341},"version-control-integration","Version Control Integration",{"depth":32,"slug":343,"text":344},"team-collaboration","Team Collaboration",{"depth":25,"slug":346,"text":347},"quality-checklist","Quality Checklist",[],[],{},[],"agent-file/Best_Practices.md","build/readme",{"id":353,"data":355,"body":356,"filePath":357,"digest":358,"rendered":359,"legacyId":407},{},"# BUILD Phase - Implementation, Refactoring & Enhancement\n\nImplement, refactor, and enhance your code with AI-assisted development and testing.\n\n## Overview\n\nThe BUILD phase focuses on the actual implementation of features, refactoring existing code, and enhancing your application with robust testing and quality assurance practices.\n\n## Workflows\n\n### Code Analysis and Refactoring\n\nMaintain consistency across your codebase whilst preserving functionality.\n\n**Example Workflow:**\n> User: \"Refactor the UserService class to align with our team's coding standards (e.g., clean architecture, SOLID principles, consistent naming, error handling, etc.). Improve readability, remove any code smells, and ensure it's modular and testable. Then, write comprehensive unit tests for all public methods using [your test framework, e.g., Jest, JUnit, etc.]. Focus on meaningful test coverage, covering edge cases and error scenarios where appropriate\"\n\n**Generic Prompts:**\n- \"Convert this class component to hooks and ensure all props are typed\"\n- \"Refactor these utility functions to be more functional and add JSDoc\"\n- \"Apply ESLint rules across the entire components directory\"\n\n### UI Iteration with Visual Feedback\n\nLeverage Playwright MCP for screenshot-driven UI development.\n\n**Example Workflow:**\n> User: \"Visit \u003Chttp://localhost:3000/dashboard>, take a full-page screenshot, and analyze the current design. Then, create a simplified, minimal version of the dashboard layout. Focus on reducing visual clutter, limiting the color palette, using clean typography, and improving spacing. Preserve core functionality but streamline UI components for clarity and usability.\"\n\n**Generic Prompts:**\n- \"Screenshot the login page, then make it match our design system guidelines\"\n- \"Capture the mobile view and optimise it for better touch targets\"\n- \"Take screenshots of all form states and ensure consistent styling\"\n\n### MCP Integration\n\nExtend Amp's capabilities with custom MCP servers for your tech stack.\n\n**Example Workflow:**\n> User: \"I have an AWS RDS instance running [PostgreSQL/MySQL/etc.], and I want to generate migration scripts for changes to the users table. Inspect the current schema, and produce SQL migration scripts based on the following changes: [List of schema changes here, e.g., add profile_picture, rename name to full_name, etc.] Make sure the script is reversible (supports rollback), follows best practices, and is compatible with [tool name, e.g., raw SQL, Flyway, Prisma, Sequelize].\"\n\n**Generic Prompts:**\n- \"Deploy this feature branch to staging via our Kubernetes MCP server\"\n- \"Use the Stripe MCP to test payment flows with webhooks\"\n- \"Connect to Firebase and sync user authentication state\"\n\n### IDE Completions and Context-Aware Development\n\nLeverage Amp tab for intelligent code completions in VS Code.\n\n**Example Workflow:**\n> User: [Types partial class in VS Code]  \n> ```javascript\n> class UserAnalytics {\n>   constructor(\n> ```\n\n**Generic Prompts:**\n- \"Complete this API client class with all CRUD operations and error handling\"\n- \"Generate a complete React hook for managing form state with validation\"\n- \"Build a complete test suite scaffold for this service class\"\n\n### Automated Refactoring & Standards Enforcement\n\nApply consistent coding standards and patterns across your codebase.\n\n**Example Workflow:**\n> User: \"Apply our TypeScript strict mode settings across all components and fix any type errors. Ensure all components have proper prop types and error boundaries where appropriate.\"\n\n**Generic Prompts:**\n- \"Convert all JavaScript files in src/ to TypeScript with proper typing\"\n- \"Apply consistent error handling patterns across all API calls\"\n- \"Refactor all React components to use modern hooks patterns\"\n\n### End-to-End Test Generation\n\nAutomate comprehensive test coverage from user stories.\n\n**Example Workflow:**\n> User: \"Develop Playwright test scripts for the user registration flow, covering both successful registrations and validation error scenarios.\"\n\n**Generic Prompts:**\n- \"Generate Cypress tests for the e-commerce checkout process\"\n- \"Create unit tests for all utility functions with edge case coverage\"\n- \"Write integration tests for the API authentication middleware\"\n\n### Automate Debugging Loops\n\nSystematic debugging with documentation for future reference.\n\n**Example Workflow:**\n> User: \"I'm getting this error intermittently in production:\n> \n> ```text\n> TypeError: Cannot read properties of undefined (reading 'map')\n>     at UserDashboard.render (UserDashboard.jsx:127)\n>     at finishClassComponent (react-dom.js:2485)\n>     at updateClassComponent (react-dom.js:2439)\n>     at beginWork (react-dom.js:4072)\n> ```\n> \n> It happens about 20% of the time when users navigate to /dashboard. The component loads fine locally but fails randomly in production. Can you analyze this stack trace, identify the root cause, and implement a fix with proper error handling?\"\n\n**Generic Prompts:**\n- \"Debug this performance issue and create a monitoring dashboard\"\n- \"Investigate why tests are flaky and implement reliable alternatives\"\n- \"Reproduce this production error locally and create preventive measures\"\n\n### From Bug Report to Draft PR\n\nStreamline bug resolution from report to ready-for-review PR.\n\n**Example Workflow:**\n> User: Fix [Pastes stack trace] \n> OR \n> \"Fix TypeError: Cannot read property 'length' of undefined at UserList.render line 42\"\n\n**Generic Prompts:**\n- \"Fix this CORS error and create a PR with proper error handling\"\n- \"Resolve the memory leak in the WebSocket connection and add monitoring\"\n- \"Debug why the form validation isn't working and implement a robust solution\"\n\n## CLI Examples for BUILD Phase\n\n```bash\n# Fix build errors with intelligent debugging\nnpm run build 2>&1 | amp -x \"Parse these build errors and fix all TypeScript issues\"\n\n# Comprehensive refactoring analysis\nfind . -name \"*.js\" -o -name \"*.ts\" | head -20 | amp -x \"Analyze these files for code duplication, suggest refactoring opportunities, and estimate the impact of proposed changes\"\n\n# Test generation and analysis\namp -x \"Analyze test coverage and spawn subagents to: 1) identify untested code paths, 2) generate missing unit tests, 3) suggest integration test scenarios\"\n```\n\n## Tips for Effective Building\n\n- **Test-Driven Development:** Write tests alongside or before implementation\n- **Incremental Refactoring:** Make small, focused improvements rather than large rewrites\n- **Code Review Integration:** Use Amp to generate PR descriptions and review checklists\n- **Performance Monitoring:** Include performance considerations in every implementation\n- **Documentation as Code:** Keep documentation updated with code changes\n\n## Related Phases\n\n- **PLAN**: Use architectural decisions to guide implementation\n- **DEPLOY**: Ensure code is deployment-ready with proper CI/CD integration\n- **SUPPORT**: Build with maintainability and debugging in mind","src/content/guides/build/README.md","c1252ec4b653c1af",{"html":360,"metadata":361},"\u003Ch1 id=\"build-phase---implementation-refactoring--enhancement\">BUILD Phase - Implementation, Refactoring &#x26; Enhancement\u003C/h1>\n\u003Cp>Implement, refactor, and enhance your code with AI-assisted development and testing.\u003C/p>\n\u003Ch2 id=\"overview\">Overview\u003C/h2>\n\u003Cp>The BUILD phase focuses on the actual implementation of features, refactoring existing code, and enhancing your application with robust testing and quality assurance practices.\u003C/p>\n\u003Ch2 id=\"workflows\">Workflows\u003C/h2>\n\u003Ch3 id=\"code-analysis-and-refactoring\">Code Analysis and Refactoring\u003C/h3>\n\u003Cp>Maintain consistency across your codebase whilst preserving functionality.\u003C/p>\n\u003Cp>\u003Cstrong>Example Workflow:\u003C/strong>\u003C/p>\n\u003Cblockquote>\n\u003Cp>User: “Refactor the UserService class to align with our team’s coding standards (e.g., clean architecture, SOLID principles, consistent naming, error handling, etc.). Improve readability, remove any code smells, and ensure it’s modular and testable. Then, write comprehensive unit tests for all public methods using [your test framework, e.g., Jest, JUnit, etc.]. Focus on meaningful test coverage, covering edge cases and error scenarios where appropriate”\u003C/p>\n\u003C/blockquote>\n\u003Cp>\u003Cstrong>Generic Prompts:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>“Convert this class component to hooks and ensure all props are typed”\u003C/li>\n\u003Cli>“Refactor these utility functions to be more functional and add JSDoc”\u003C/li>\n\u003Cli>“Apply ESLint rules across the entire components directory”\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"ui-iteration-with-visual-feedback\">UI Iteration with Visual Feedback\u003C/h3>\n\u003Cp>Leverage Playwright MCP for screenshot-driven UI development.\u003C/p>\n\u003Cp>\u003Cstrong>Example Workflow:\u003C/strong>\u003C/p>\n\u003Cblockquote>\n\u003Cp>User: “Visit \u003Ca href=\"http://localhost:3000/dashboard\">http://localhost:3000/dashboard\u003C/a>, take a full-page screenshot, and analyze the current design. Then, create a simplified, minimal version of the dashboard layout. Focus on reducing visual clutter, limiting the color palette, using clean typography, and improving spacing. Preserve core functionality but streamline UI components for clarity and usability.”\u003C/p>\n\u003C/blockquote>\n\u003Cp>\u003Cstrong>Generic Prompts:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>“Screenshot the login page, then make it match our design system guidelines”\u003C/li>\n\u003Cli>“Capture the mobile view and optimise it for better touch targets”\u003C/li>\n\u003Cli>“Take screenshots of all form states and ensure consistent styling”\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"mcp-integration\">MCP Integration\u003C/h3>\n\u003Cp>Extend Amp’s capabilities with custom MCP servers for your tech stack.\u003C/p>\n\u003Cp>\u003Cstrong>Example Workflow:\u003C/strong>\u003C/p>\n\u003Cblockquote>\n\u003Cp>User: “I have an AWS RDS instance running [PostgreSQL/MySQL/etc.], and I want to generate migration scripts for changes to the users table. Inspect the current schema, and produce SQL migration scripts based on the following changes: [List of schema changes here, e.g., add profile_picture, rename name to full_name, etc.] Make sure the script is reversible (supports rollback), follows best practices, and is compatible with [tool name, e.g., raw SQL, Flyway, Prisma, Sequelize].”\u003C/p>\n\u003C/blockquote>\n\u003Cp>\u003Cstrong>Generic Prompts:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>“Deploy this feature branch to staging via our Kubernetes MCP server”\u003C/li>\n\u003Cli>“Use the Stripe MCP to test payment flows with webhooks”\u003C/li>\n\u003Cli>“Connect to Firebase and sync user authentication state”\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"ide-completions-and-context-aware-development\">IDE Completions and Context-Aware Development\u003C/h3>\n\u003Cp>Leverage Amp tab for intelligent code completions in VS Code.\u003C/p>\n\u003Cp>\u003Cstrong>Example Workflow:\u003C/strong>\u003C/p>\n\u003Cblockquote>\n\u003Cp>User: [Types partial class in VS Code]\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">class\u003C/span>\u003Cspan style=\"color:#B392F0\"> UserAnalytics\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  constructor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003C/blockquote>\n\u003Cp>\u003Cstrong>Generic Prompts:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>“Complete this API client class with all CRUD operations and error handling”\u003C/li>\n\u003Cli>“Generate a complete React hook for managing form state with validation”\u003C/li>\n\u003Cli>“Build a complete test suite scaffold for this service class”\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"automated-refactoring--standards-enforcement\">Automated Refactoring &#x26; Standards Enforcement\u003C/h3>\n\u003Cp>Apply consistent coding standards and patterns across your codebase.\u003C/p>\n\u003Cp>\u003Cstrong>Example Workflow:\u003C/strong>\u003C/p>\n\u003Cblockquote>\n\u003Cp>User: “Apply our TypeScript strict mode settings across all components and fix any type errors. Ensure all components have proper prop types and error boundaries where appropriate.”\u003C/p>\n\u003C/blockquote>\n\u003Cp>\u003Cstrong>Generic Prompts:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>“Convert all JavaScript files in src/ to TypeScript with proper typing”\u003C/li>\n\u003Cli>“Apply consistent error handling patterns across all API calls”\u003C/li>\n\u003Cli>“Refactor all React components to use modern hooks patterns”\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"end-to-end-test-generation\">End-to-End Test Generation\u003C/h3>\n\u003Cp>Automate comprehensive test coverage from user stories.\u003C/p>\n\u003Cp>\u003Cstrong>Example Workflow:\u003C/strong>\u003C/p>\n\u003Cblockquote>\n\u003Cp>User: “Develop Playwright test scripts for the user registration flow, covering both successful registrations and validation error scenarios.”\u003C/p>\n\u003C/blockquote>\n\u003Cp>\u003Cstrong>Generic Prompts:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>“Generate Cypress tests for the e-commerce checkout process”\u003C/li>\n\u003Cli>“Create unit tests for all utility functions with edge case coverage”\u003C/li>\n\u003Cli>“Write integration tests for the API authentication middleware”\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"automate-debugging-loops\">Automate Debugging Loops\u003C/h3>\n\u003Cp>Systematic debugging with documentation for future reference.\u003C/p>\n\u003Cp>\u003Cstrong>Example Workflow:\u003C/strong>\u003C/p>\n\u003Cblockquote>\n\u003Cp>User: “I’m getting this error intermittently in production:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"text\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>TypeError: Cannot read properties of undefined (reading 'map')\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    at UserDashboard.render (UserDashboard.jsx:127)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    at finishClassComponent (react-dom.js:2485)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    at updateClassComponent (react-dom.js:2439)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    at beginWork (react-dom.js:4072)\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>It happens about 20% of the time when users navigate to /dashboard. The component loads fine locally but fails randomly in production. Can you analyze this stack trace, identify the root cause, and implement a fix with proper error handling?”\u003C/p>\n\u003C/blockquote>\n\u003Cp>\u003Cstrong>Generic Prompts:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>“Debug this performance issue and create a monitoring dashboard”\u003C/li>\n\u003Cli>“Investigate why tests are flaky and implement reliable alternatives”\u003C/li>\n\u003Cli>“Reproduce this production error locally and create preventive measures”\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"from-bug-report-to-draft-pr\">From Bug Report to Draft PR\u003C/h3>\n\u003Cp>Streamline bug resolution from report to ready-for-review PR.\u003C/p>\n\u003Cp>\u003Cstrong>Example Workflow:\u003C/strong>\u003C/p>\n\u003Cblockquote>\n\u003Cp>User: Fix [Pastes stack trace]\nOR\n“Fix TypeError: Cannot read property ‘length’ of undefined at UserList.render line 42”\u003C/p>\n\u003C/blockquote>\n\u003Cp>\u003Cstrong>Generic Prompts:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>“Fix this CORS error and create a PR with proper error handling”\u003C/li>\n\u003Cli>“Resolve the memory leak in the WebSocket connection and add monitoring”\u003C/li>\n\u003Cli>“Debug why the form validation isn’t working and implement a robust solution”\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"cli-examples-for-build-phase\">CLI Examples for BUILD Phase\u003C/h2>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Fix build errors with intelligent debugging\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">npm\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> run\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> build\u003C/span>\u003Cspan style=\"color:#F97583\"> 2>&#x26;1\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Parse these build errors and fix all TypeScript issues\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Comprehensive refactoring analysis\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">find\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> .\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -name\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"*.js\"\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -o\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -name\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"*.ts\"\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> head\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -20\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Analyze these files for code duplication, suggest refactoring opportunities, and estimate the impact of proposed changes\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Test generation and analysis\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Analyze test coverage and spawn subagents to: 1) identify untested code paths, 2) generate missing unit tests, 3) suggest integration test scenarios\"\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"tips-for-effective-building\">Tips for Effective Building\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>Test-Driven Development:\u003C/strong> Write tests alongside or before implementation\u003C/li>\n\u003Cli>\u003Cstrong>Incremental Refactoring:\u003C/strong> Make small, focused improvements rather than large rewrites\u003C/li>\n\u003Cli>\u003Cstrong>Code Review Integration:\u003C/strong> Use Amp to generate PR descriptions and review checklists\u003C/li>\n\u003Cli>\u003Cstrong>Performance Monitoring:\u003C/strong> Include performance considerations in every implementation\u003C/li>\n\u003Cli>\u003Cstrong>Documentation as Code:\u003C/strong> Keep documentation updated with code changes\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"related-phases\">Related Phases\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>PLAN\u003C/strong>: Use architectural decisions to guide implementation\u003C/li>\n\u003Cli>\u003Cstrong>DEPLOY\u003C/strong>: Ensure code is deployment-ready with proper CI/CD integration\u003C/li>\n\u003Cli>\u003Cstrong>SUPPORT\u003C/strong>: Build with maintainability and debugging in mind\u003C/li>\n\u003C/ul>",{"headings":362,"localImagePaths":403,"remoteImagePaths":404,"frontmatter":405,"imagePaths":406},[363,366,367,370,373,376,379,382,385,388,391,394,397,400],{"depth":22,"slug":364,"text":365},"build-phase---implementation-refactoring--enhancement","BUILD Phase - Implementation, Refactoring & Enhancement",{"depth":25,"slug":122,"text":123},{"depth":25,"slug":368,"text":369},"workflows","Workflows",{"depth":32,"slug":371,"text":372},"code-analysis-and-refactoring","Code Analysis and Refactoring",{"depth":32,"slug":374,"text":375},"ui-iteration-with-visual-feedback","UI Iteration with Visual Feedback",{"depth":32,"slug":377,"text":378},"mcp-integration","MCP Integration",{"depth":32,"slug":380,"text":381},"ide-completions-and-context-aware-development","IDE Completions and Context-Aware Development",{"depth":32,"slug":383,"text":384},"automated-refactoring--standards-enforcement","Automated Refactoring & Standards Enforcement",{"depth":32,"slug":386,"text":387},"end-to-end-test-generation","End-to-End Test Generation",{"depth":32,"slug":389,"text":390},"automate-debugging-loops","Automate Debugging Loops",{"depth":32,"slug":392,"text":393},"from-bug-report-to-draft-pr","From Bug Report to Draft PR",{"depth":25,"slug":395,"text":396},"cli-examples-for-build-phase","CLI Examples for BUILD Phase",{"depth":25,"slug":398,"text":399},"tips-for-effective-building","Tips for Effective Building",{"depth":25,"slug":401,"text":402},"related-phases","Related Phases",[],[],{},[],"build/README.md","cli/readme",{"id":408,"data":410,"body":411,"filePath":412,"digest":413,"rendered":414,"legacyId":573},{},"# Amp CLI Guide\n\nComplete guide to using Amp from the command line for all phases of software development.\n\n## Table of Contents\n\n- [Introduction](#introduction)\n- [Quick Start](#quick-start)\n- [Core Concepts](#core-concepts)\n- [Basic Usage](#basic-usage)\n- [Thread Management](#thread-management)\n- [Intermediate Features](#intermediate-features)\n- [Configuration](#configuration)\n- [Tools & Extensions](#tools--extensions)\n- [Real-World Use Cases & Examples](#real-world-use-cases--examples)\n- [Troubleshooting](#troubleshooting)\n\n---\n\n## Introduction\n\nAmp is designed for developers who want to stay in their command-line workflow. Amp can be run anywhere - from your terminal, IDE, CI/CD pipelines, Docker container or anywhere with a terminal.\n\n---\n\n## Quick Start\n\n### Installation\n\n```bash\n# Using pnpm (recommended)\npnpm add -g @sourcegraph/amp\n\n# Using npm\nnpm install -g @sourcegraph/amp\n\n# Using yarn\nyarn global add @sourcegraph/amp\n```\n\n### First Run\n\nYou can get started in two ways:\n\n### Option 1: Interactive Authentication\n\n1. **Start Amp:** `amp`\n2. **Authenticate:** Follow the automatic authentication prompt or run `amp login`\n3. **Try a simple request:** \"Show me the structure of this project\"\n4. **Get help:** `amp --help`\n\n### Option 2: Environment Variables (CI/CD & Automation)\n\nSet up environment variables for automated workflows, GitHub pipelines, or any environment where an executable can run:\n\n```bash\nexport AMP_API_KEY=\"your-api-key\"              # API key from ampcode.com/settings\nexport AMP_LOG_LEVEL=\"info\"                    # Set log level (error, warn, info, debug)\nexport AMP_SETTINGS_FILE=\"/custom/path/settings.json\"  # Custom settings location\n```\n\n---\n\n## Core Concepts\n\n### Threads\nThreads are persistent conversations that maintain context across interactions. Your threads sync to [ampcode.com](https://ampcode.com), allowing you to continue conversations across devices.\n\n### AGENT.md Files\nAdd an `AGENT.md` file in your project root to provide context about your codebase structure, build commands, and coding standards. This helps Amp understand your project better.\n\n### Tools\nAmp comes with built-in tools for coding tasks and can be extended with custom MCP (Model Context Protocol) servers.\n\n### Execution Modes\n\n| Mode | Description | Usage |\n|------|-------------|--------|\n| **Interactive Mode** | Ongoing conversations with the AI | `amp` (default) |\n| **Execute Mode** | Non-interactive, single-shot responses | `amp -x \"command\"` |\n| **Piping/Streaming Mode** | Pipe commands and data from streams | `command \\| amp` |\n\n---\n\n## Basic Usage\n\n### Interactive Mode\n\n```bash\namp  # Start interactive session\n```\n\n**Interactive Features:**\n\n- **File Mentions:** Type `@` followed by a pattern for fuzzy file search\n- **Full Screen Navigation:** Hit `Ctrl+R` to enter full screen mode\n  - `Space`: Navigate between pages\n  - `J/K`: Move line by line  \n  - `G/Shift+G`: Jump to top/bottom\n  - `Q`: Quit full screen mode\n- **Slash Commands:** Use `/compact` to compress conversation history\n\n### Execute Mode\n\n```bash\n# Single command\namp -x \"commit all my unstaged changes\"\n\n# From file\namp \u003C prompt.txt > output.txt\n\n# Piping\necho \"analyze this code for bugs\" | amp\n```\n\n### File References\n\n- **Mention Files:** Type `@` followed by a pattern to fuzzy-search files\n\n---\n\n## Thread Management\n\n### Basic Thread Operations\n\n```bash\n# Create new thread\namp threads new\n\n# Continue existing thread (if threadId provided, previous thread is continued)\namp threads continue [threadId]\n\n# List all threads\namp threads list\n\n# Fork existing thread (if threadId provided, previous thread is forked)\namp threads fork [threadId]\n\n# Share thread\namp threads share [threadId]\n\n# Compact thread (reduce token usage)\namp threads compact [threadId]\n```\n\n### Thread Workflows\n\n**Feature Development (Linear Workflow):**  \nThis example shows a continuous thread where each command builds on the previous context:\n\n```bash\n# Start a feature development thread\namp threads new -x \"Plan implementation of user authentication feature\"\n\n# Continue working on the same feature\namp threads continue -x \"Implement the login endpoint\"\n```\n\n**Bug Investigation (Thread Resumption):**  \nThis example shows how to resume a specific thread from days or weeks ago by specifying its threadID:\n\n```bash\n# Start debugging thread\namp threads new -x \"Investigate why users can't log in on mobile devices\"\n\n# Deep dive into the issue\namp threads continue [threadId] -x \"Check mobile-specific CSS and JavaScript errors\"\n```\n\n---\n\n## Intermediate Features\n\n### Slash Commands in Interactive Mode\n\n| Command | Description |\n|---------|-------------|\n| `/editor` | Open your `$EDITOR` to write longer prompts |\n| `/agent` | Generate an AGENT.md file in the current workspace |\n| `/compact` | Compress conversation history to save tokens |\n| `/help` | Show help and hotkeys |\n| `/quit` | Quit Amp |\n\n### Piping and Redirection\n\n```bash\n# Process command output\nls -la | amp -x \"organize these files by type and suggest cleanup\"\n\n# Save results to file\namp -x \"generate a project readme\" > README.md\n\n# Chain commands\ngit log --oneline -10 | amp -x \"summarize recent changes\" | tee summary.txt\n```\n\n### Environment Variables\n\n```bash\nexport AMP_API_KEY=\"your-api-key\"              # API key from ampcode.com/settings\nexport AMP_LOG_LEVEL=\"info\"                    # Set log level (error, warn, info, debug)\nexport AMP_SETTINGS_FILE=\"/custom/path/settings.json\"  # Custom settings location\n```\n\n---\n\n## Configuration\n\n### Settings File Location\n\nConfigure Amp using a JSON settings file at `~/.config/amp/settings.json`:\n\n```json\n{\n  \"amp.notifications.enabled\": true,\n  \"amp.mcpServers\": {\n    \"filesystem\": {\n      \"command\": \"npx\",\n      \"args\": [\"@modelcontextprotocol/server-filesystem\", \"/path/to/allowed/dir\"]\n    }\n  },\n  \"amp.tools.disable\": [\"browser_navigate\"],\n  \"amp.commands.allowlist\": [\"git status\", \"npm run build\"],\n  \"amp.commands.strict\": false,\n  \"amp.dangerouslyAllowAll\": false\n}\n```\n\n### Command Allowlisting\n\n> [!IMPORTANT]\n> For security, Amp uses command allowlisting. Add safe commands to your allowlist:\n\n```json\n\"amp.commands.allowlist\": [\n  \"pnpm exec tsc --build\",\n  \"pnpm -C web check\", \n  \"make build\",\n  \"npm run * --test\"\n]\n```\n\n### Environment Configuration\n\n```json\n{\n  \"amp.commands.loadUserEnvironment\": true\n}\n```\n\nThis loads variables from `.bashrc`, `.zshrc`, `.envrc` before running MCP servers.\n\n---\n\n## Tools & Extensions\n\n### Built-in Tools (16 available)\n\n- **Bash** - Execute shell commands with safety controls\n- **codebase_search_agent** - Intelligent codebase search with AI assistant\n- **create_file** - Create or overwrite files in workspace\n- **edit_file** - Make precise edits to existing files\n- **glob** - Fast file pattern matching and discovery\n- **Grep** - Search for exact text patterns using ripgrep\n- **list_directory** - List files and directories\n- **mermaid** - Generate flowcharts and architecture diagrams\n- **oracle** - Consult AI advisor for planning and code reviews\n- **Read** - Read files from filesystem (supports images)\n- **read_web_page** - Read and analyze web page contents\n- **Task** - Spawn independent sub-agents for complex tasks\n- **todo_read** - Read current session todo list\n- **todo_write** - Update and track session todos\n- **undo_edit** - Revert last file edit\n- **web_search** - Search the web for current information\n\n### Managing Tools\n\n```bash\n# View available tools\namp tools show\n```\n\n**Disable specific tools** (in settings.json):\n\n```json\n{\n  \"amp.tools.disable\": [\n    \"browser_navigate\",\n    \"builtin:edit_file\"\n  ]\n}\n```\n\n### MCP (Model Context Protocol) Servers\n\n#### Adding Local MCP Servers\n\n```json\n{\n  \"amp.mcpServers\": {\n    \"filesystem\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"@modelcontextprotocol/server-filesystem\",\n        \"/path/to/allowed/directory\"\n      ]\n    },\n    \"playwright\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@playwright/mcp@latest\", \"--headless\", \"--isolated\"]\n    },\n    \"supabase\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@supabase/mcp-server-supabase@latest\",\n        \"--read-only\",\n        \"--project-ref=your-project-ref\"\n      ],\n      \"env\": {\n        \"SUPABASE_ACCESS_TOKEN\": \"your-token\"\n      }\n    }\n  }\n}\n```\n\n#### Remote MCP Servers\n\n```json\n{\n  \"amp.mcpServers\": {\n    \"semgrep\": {\n      \"url\": \"https://mcp.semgrep.ai/mcp\"\n    },\n    \"linear\": {\n      \"command\": \"npx\",\n      \"args\": [\"mcp-remote\", \"https://mcp.linear.app/sse\"]\n    }\n  }\n}\n```\n\n#### MCP Best Practices\n\n- [x] **Selective Tool Use:** Be selective with tools to maintain model performance\n- [x] **Security Configuration:** Use read-only modes when possible\n- [x] **Project-Specific Setup:** Document required MCP servers in your `AGENT.md` file\n- [x] **Tool Discovery:** Use `amp tools show` to see all available tools \n\n---\n\n## Real-World Use Cases & Examples\n\n### 1. Code Analysis and Refactoring\n\n```bash\n# Complex analysis using multiple tools and piping\ngit log --oneline --since=\"3 months ago\" src/ | amp -x \"Analyze commit patterns and identify files with high churn rate\"\n\n# Deep security analysis with tool chaining\namp -x \"Run git blame on all files in src/auth/ and src/security/, then analyze the code for potential vulnerabilities, cross-reference with recent CVE databases, and generate a security risk assessment report\"\n\n# Comprehensive refactoring analysis\nfind . -name \"*.js\" -o -name \"*.ts\" | head -20 | amp -x \"Analyze these files for code duplication, suggest refactoring opportunities, and estimate the impact of proposed changes\"\n\n# Strategic refactoring planning with Amp Oracle\namp -x \"Use Amp Oracle to create a comprehensive refactoring plan for this codebase, including architectural debt assessment, effort estimation, and risk analysis\" | tee refactoring-plan.md\n```\n\n### 2. Git Workflow Enhancement\n\n```bash\n# Smart commit messages with context analysis\ngit diff --staged | amp -x \"Generate a conventional commit message based on these changes\"\n\n# Strategic git workflow planning with Oracle\ngit log --graph --oneline -20 | amp -x \"Use Amp Oracle to analyze this git history and create a comprehensive branching strategy optimization plan\"\n\n# Parallel git analysis with subagents\namp -x \"Spawn subagents to: 1) identify merge conflict patterns, 2) suggest branch naming conventions, 3) recommend automated workflow improvements\" | amp -x \"Create integrated git workflow improvement strategy\"\n\n# Complex release preparation with multi-stage pipeline\ngit diff HEAD~10..HEAD --name-only | amp -x \"Analyze changed files for this release\" | amp -x \"Spawn subagents to: validate changelog completeness, check for breaking changes, and generate release notes\"\n\n# Intelligent commit analysis and team insights\ngit log --since=\"1 month ago\" --pretty=format:\"%h %an %s\" | amp -x \"Analyze commit patterns by author, spawn subagents to: 1) identify code review bottlenecks, 2) suggest mentoring opportunities, 3) recommend process improvements\" | tee team-insights.md\n```\n\n### 3. Build and Test Automation\n\n```bash\n# Fix build errors with intelligent debugging\nnpm run build 2>&1 | amp -x \"Parse these build errors and fix all TypeScript issues\"\n\n# Strategic CI/CD planning with Oracle\nnpm run test -- --reporter=json | amp -x \"Use Amp Oracle to analyze test results and create a comprehensive test improvement strategy\"\n\n# Parallel CI/CD analysis with subagents\namp -x \"Spawn subagents to: 1) identify flaky tests, 2) suggest performance optimizations, 3) recommend test coverage improvements\"\n\n# Multi-environment validation pipeline\nfor env in dev staging prod; do echo \"Environment: $env\"; cat \"config/$env.json\"; done | amp -x \"Analyze environment configurations, spawn subagents to validate: 1) security settings consistency, 2) performance parameter optimization, 3) feature flag alignment\" | amp -x \"Generate environment-specific deployment recommendations\"\n```\n\n### 4. Database Operations\n\n```bash\n# Schema analysis with intelligent recommendations\namp -x \"Using MCP database tools and staging environment settings from AGENT.md, connect to the database and analyze the user table schema for potential optimizations\"\n\n# Complex data migration planning with risk assessment\npg_dump --schema-only database_name | amp -x \"Analyze this schema and spawn subagents to: 1) plan data migration strategy, 2) identify potential data integrity issues, 3) estimate downtime requirements\" | amp -x \"Create detailed migration runbook with rollback procedures\"\n\n# Multi-database performance analysis\nfor db in users products orders; do echo \"=== $db Database ===\" && psql -d $db -c \"\\dt+\"; done | amp -x \"Use Amp Oracle to analyze database schemas across services and create optimization strategy covering: 1) data duplication patterns, 2) microservice boundary optimizations, 3) caching strategies\"\n```\n\n### 5. Documentation Generation\n\n```bash\n# API documentation with comprehensive analysis\namp -x \"Analyze all Express routes in src/routes/ and generate OpenAPI documentation\"\n\n# Strategic documentation planning with Oracle\nfind . -name \"*.md\" -o -name \"*.js\" -o -name \"*.ts\" | grep -E \"(README|docs|comments)\" | amp -x \"Use Amp Oracle to assess documentation completeness and create comprehensive improvement strategy\"\n\n# Intelligent documentation pipeline with auto-generation\ngit log --oneline --since=\"1 week ago\" | amp -x \"Analyze recent changes and spawn subagents to: 1) identify undocumented features, 2) generate changelog entries, 3) update API documentation, 4) validate documentation accuracy\" | amp -x \"Orchestrate documentation updates and create PR\"\n\n# Cross-repository documentation analysis\nfor repo in frontend backend mobile; do echo \"=== $repo ===\" && find $repo -name \"README.md\" -exec cat {} \\;; done | amp -x \"Analyze documentation across repositories, spawn subagents to: 1) ensure consistency in setup instructions, 2) identify gaps in cross-service documentation, 3) recommend unified documentation strategy\"\n```\n\n### 6. Security and Code Quality\n\n```bash\n# Security audit with intelligent vulnerability assessment\namp -x \"Scan for potential security vulnerabilities in our authentication code\"\n\n# Strategic security planning with Oracle\nnpm audit --json | amp -x \"Use Amp Oracle to create comprehensive security improvement strategy with prioritized action plan\"\n\n# Continuous security monitoring with intelligent alerts\ngit diff HEAD~1 --name-only | amp -x \"Analyze changed files for security implications, spawn subagents to: 1) validate secure coding practices, 2) check for credential leaks, 3) assess potential attack vectors\" | amp -x \"Generate security review summary and action items\"\n```\n\n### 7. Batch File Operations\n\n```bash\n# Content processing with intelligent pattern recognition\ncat *.log | amp -x \"Analyze these logs for error patterns and create a summary report\"\n\n# Strategic log analysis planning with Oracle\nfind . -name \"*.log\" -mtime -7 | amp -x \"Use Amp Oracle to create comprehensive log analysis strategy including pattern recognition, alerting, and monitoring improvements\"\n\n# Intelligent file organization with automated cleanup\nfind . -type f -size +100M | amp -x \"Analyze large files and spawn subagents to: 1) identify archival candidates, 2) suggest compression opportunities, 3) validate file dependencies before cleanup\" | amp -x \"Create automated cleanup script with safety checks\"\n```\n\n### 8. Development Environment Debugging\n\n```bash\n# Dependency analysis with conflict resolution\namp -x \"Analyze package.json and package-lock.json to identify version conflicts\"\n\n# Strategic environment planning with Oracle\namp -x \"Use Amp Oracle to diagnose development environment issues and create comprehensive optimization strategy\"\n```\n\n---\n\n## Troubleshooting\n\n### Common Issues\n\n#### Authentication Issues\n\n```bash\namp logout\namp login\n```\n\n#### Thread context is full\n\n```bash\namp threads compact [threadId]\n```\n\n#### Command Permission Denied\n\n> [!WARNING]\n> Add commands to your allowlist or use `--dangerously-allow-all` (use with caution)\n\n#### MCP Troubleshooting\n\n- **Server not starting:** Test directly with `npx @modelcontextprotocol/server-filesystem /path/to/dir`\n- **Tools not available:** Check that Amp can access config files and they are in the correct place (`~/.config/amp/settings.json`). If using alternative config location, check that the correct path is set in `AMP_SETTINGS_FILE` environment variable\n- **Permission errors:** Check file paths, API tokens, and command allowlisting\n\n### Get Support\n\n```bash\namp doctor  # Generate support bundle\n```","src/content/guides/cli/README.md","ab5ebb4fa4c5364e",{"html":415,"metadata":416},"\u003Ch1 id=\"amp-cli-guide\">Amp CLI Guide\u003C/h1>\n\u003Cp>Complete guide to using Amp from the command line for all phases of software development.\u003C/p>\n\u003Ch2 id=\"table-of-contents\">Table of Contents\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#introduction\">Introduction\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#quick-start\">Quick Start\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#core-concepts\">Core Concepts\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#basic-usage\">Basic Usage\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#thread-management\">Thread Management\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#intermediate-features\">Intermediate Features\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#configuration\">Configuration\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#tools--extensions\">Tools &#x26; Extensions\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#real-world-use-cases--examples\">Real-World Use Cases &#x26; Examples\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#troubleshooting\">Troubleshooting\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Ch2 id=\"introduction\">Introduction\u003C/h2>\n\u003Cp>Amp is designed for developers who want to stay in their command-line workflow. Amp can be run anywhere - from your terminal, IDE, CI/CD pipelines, Docker container or anywhere with a terminal.\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"quick-start\">Quick Start\u003C/h2>\n\u003Ch3 id=\"installation\">Installation\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Using pnpm (recommended)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">pnpm\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> add\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -g\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> @sourcegraph/amp\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Using npm\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">npm\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> install\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -g\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> @sourcegraph/amp\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Using yarn\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">yarn\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> global\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> add\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> @sourcegraph/amp\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"first-run\">First Run\u003C/h3>\n\u003Cp>You can get started in two ways:\u003C/p>\n\u003Ch3 id=\"option-1-interactive-authentication\">Option 1: Interactive Authentication\u003C/h3>\n\u003Col>\n\u003Cli>\u003Cstrong>Start Amp:\u003C/strong> \u003Ccode>amp\u003C/code>\u003C/li>\n\u003Cli>\u003Cstrong>Authenticate:\u003C/strong> Follow the automatic authentication prompt or run \u003Ccode>amp login\u003C/code>\u003C/li>\n\u003Cli>\u003Cstrong>Try a simple request:\u003C/strong> “Show me the structure of this project”\u003C/li>\n\u003Cli>\u003Cstrong>Get help:\u003C/strong> \u003Ccode>amp --help\u003C/code>\u003C/li>\n\u003C/ol>\n\u003Ch3 id=\"option-2-environment-variables-cicd--automation\">Option 2: Environment Variables (CI/CD &#x26; Automation)\u003C/h3>\n\u003Cp>Set up environment variables for automated workflows, GitHub pipelines, or any environment where an executable can run:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> AMP_API_KEY\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"your-api-key\"\u003C/span>\u003Cspan style=\"color:#6A737D\">              # API key from ampcode.com/settings\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> AMP_LOG_LEVEL\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"info\"\u003C/span>\u003Cspan style=\"color:#6A737D\">                    # Set log level (error, warn, info, debug)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> AMP_SETTINGS_FILE\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"/custom/path/settings.json\"\u003C/span>\u003Cspan style=\"color:#6A737D\">  # Custom settings location\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Chr>\n\u003Ch2 id=\"core-concepts\">Core Concepts\u003C/h2>\n\u003Ch3 id=\"threads\">Threads\u003C/h3>\n\u003Cp>Threads are persistent conversations that maintain context across interactions. Your threads sync to \u003Ca href=\"https://ampcode.com\">ampcode.com\u003C/a>, allowing you to continue conversations across devices.\u003C/p>\n\u003Ch3 id=\"agentmd-files\">AGENT.md Files\u003C/h3>\n\u003Cp>Add an \u003Ccode>AGENT.md\u003C/code> file in your project root to provide context about your codebase structure, build commands, and coding standards. This helps Amp understand your project better.\u003C/p>\n\u003Ch3 id=\"tools\">Tools\u003C/h3>\n\u003Cp>Amp comes with built-in tools for coding tasks and can be extended with custom MCP (Model Context Protocol) servers.\u003C/p>\n\u003Ch3 id=\"execution-modes\">Execution Modes\u003C/h3>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>Mode\u003C/th>\u003Cth>Description\u003C/th>\u003Cth>Usage\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>\u003Cstrong>Interactive Mode\u003C/strong>\u003C/td>\u003Ctd>Ongoing conversations with the AI\u003C/td>\u003Ctd>\u003Ccode>amp\u003C/code> (default)\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Cstrong>Execute Mode\u003C/strong>\u003C/td>\u003Ctd>Non-interactive, single-shot responses\u003C/td>\u003Ctd>\u003Ccode>amp -x \"command\"\u003C/code>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Cstrong>Piping/Streaming Mode\u003C/strong>\u003C/td>\u003Ctd>Pipe commands and data from streams\u003C/td>\u003Ctd>\u003Ccode>command | amp\u003C/code>\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Chr>\n\u003Ch2 id=\"basic-usage\">Basic Usage\u003C/h2>\n\u003Ch3 id=\"interactive-mode\">Interactive Mode\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">amp\u003C/span>\u003Cspan style=\"color:#6A737D\">  # Start interactive session\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>Interactive Features:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>File Mentions:\u003C/strong> Type \u003Ccode>@\u003C/code> followed by a pattern for fuzzy file search\u003C/li>\n\u003Cli>\u003Cstrong>Full Screen Navigation:\u003C/strong> Hit \u003Ccode>Ctrl+R\u003C/code> to enter full screen mode\n\u003Cul>\n\u003Cli>\u003Ccode>Space\u003C/code>: Navigate between pages\u003C/li>\n\u003Cli>\u003Ccode>J/K\u003C/code>: Move line by line\u003C/li>\n\u003Cli>\u003Ccode>G/Shift+G\u003C/code>: Jump to top/bottom\u003C/li>\n\u003Cli>\u003Ccode>Q\u003C/code>: Quit full screen mode\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Cstrong>Slash Commands:\u003C/strong> Use \u003Ccode>/compact\u003C/code> to compress conversation history\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"execute-mode\">Execute Mode\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Single command\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"commit all my unstaged changes\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># From file\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">amp\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x3C;\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> prompt.txt\u003C/span>\u003Cspan style=\"color:#F97583\"> >\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> output.txt\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Piping\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"analyze this code for bugs\"\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> amp\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"file-references\">File References\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Mention Files:\u003C/strong> Type \u003Ccode>@\u003C/code> followed by a pattern to fuzzy-search files\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Ch2 id=\"thread-management\">Thread Management\u003C/h2>\n\u003Ch3 id=\"basic-thread-operations\">Basic Thread Operations\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Create new thread\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">amp\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> threads\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> new\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Continue existing thread (if threadId provided, previous thread is continued)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">amp\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> threads\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> continue\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [threadId]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># List all threads\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">amp\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> threads\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> list\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Fork existing thread (if threadId provided, previous thread is forked)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">amp\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> threads\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> fork\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [threadId]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Share thread\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">amp\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> threads\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> share\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [threadId]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Compact thread (reduce token usage)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">amp\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> threads\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> compact\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [threadId]\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"thread-workflows\">Thread Workflows\u003C/h3>\n\u003Cp>\u003Cstrong>Feature Development (Linear Workflow):\u003C/strong>\u003Cbr>\nThis example shows a continuous thread where each command builds on the previous context:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Start a feature development thread\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">amp\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> threads\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> new\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Plan implementation of user authentication feature\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Continue working on the same feature\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">amp\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> threads\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> continue\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Implement the login endpoint\"\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>Bug Investigation (Thread Resumption):\u003C/strong>\u003Cbr>\nThis example shows how to resume a specific thread from days or weeks ago by specifying its threadID:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Start debugging thread\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">amp\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> threads\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> new\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Investigate why users can't log in on mobile devices\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Deep dive into the issue\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">amp\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> threads\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> continue\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [threadId] -x \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Check mobile-specific CSS and JavaScript errors\"\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Chr>\n\u003Ch2 id=\"intermediate-features\">Intermediate Features\u003C/h2>\n\u003Ch3 id=\"slash-commands-in-interactive-mode\">Slash Commands in Interactive Mode\u003C/h3>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>Command\u003C/th>\u003Cth>Description\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>\u003Ccode>/editor\u003C/code>\u003C/td>\u003Ctd>Open your \u003Ccode>$EDITOR\u003C/code> to write longer prompts\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ccode>/agent\u003C/code>\u003C/td>\u003Ctd>Generate an AGENT.md file in the current workspace\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ccode>/compact\u003C/code>\u003C/td>\u003Ctd>Compress conversation history to save tokens\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ccode>/help\u003C/code>\u003C/td>\u003Ctd>Show help and hotkeys\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ccode>/quit\u003C/code>\u003C/td>\u003Ctd>Quit Amp\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Ch3 id=\"piping-and-redirection\">Piping and Redirection\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Process command output\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">ls\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -la\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"organize these files by type and suggest cleanup\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Save results to file\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"generate a project readme\"\u003C/span>\u003Cspan style=\"color:#F97583\"> >\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> README.md\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Chain commands\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">git\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> log\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --oneline\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -10\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"summarize recent changes\"\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> tee\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> summary.txt\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"environment-variables\">Environment Variables\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> AMP_API_KEY\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"your-api-key\"\u003C/span>\u003Cspan style=\"color:#6A737D\">              # API key from ampcode.com/settings\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> AMP_LOG_LEVEL\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"info\"\u003C/span>\u003Cspan style=\"color:#6A737D\">                    # Set log level (error, warn, info, debug)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> AMP_SETTINGS_FILE\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"/custom/path/settings.json\"\u003C/span>\u003Cspan style=\"color:#6A737D\">  # Custom settings location\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Chr>\n\u003Ch2 id=\"configuration\">Configuration\u003C/h2>\n\u003Ch3 id=\"settings-file-location\">Settings File Location\u003C/h3>\n\u003Cp>Configure Amp using a JSON settings file at \u003Ccode>~/.config/amp/settings.json\u003C/code>:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"json\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"amp.notifications.enabled\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"amp.mcpServers\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"filesystem\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      \"command\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"npx\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      \"args\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"@modelcontextprotocol/server-filesystem\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"/path/to/allowed/dir\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"amp.tools.disable\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"browser_navigate\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">],\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"amp.commands.allowlist\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"git status\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"npm run build\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">],\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"amp.commands.strict\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">false\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"amp.dangerouslyAllowAll\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">false\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"command-allowlisting\">Command Allowlisting\u003C/h3>\n\u003Cblockquote>\n\u003Cp>[!IMPORTANT]\nFor security, Amp uses command allowlisting. Add safe commands to your allowlist:\u003C/p>\n\u003C/blockquote>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"json\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">\"amp.commands.allowlist\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">  \"pnpm exec tsc --build\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">  \"pnpm -C web check\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">  \"make build\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">  \"npm run * --test\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">]\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"environment-configuration\">Environment Configuration\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"json\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"amp.commands.loadUserEnvironment\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This loads variables from \u003Ccode>.bashrc\u003C/code>, \u003Ccode>.zshrc\u003C/code>, \u003Ccode>.envrc\u003C/code> before running MCP servers.\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"tools--extensions\">Tools &#x26; Extensions\u003C/h2>\n\u003Ch3 id=\"built-in-tools-16-available\">Built-in Tools (16 available)\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Bash\u003C/strong> - Execute shell commands with safety controls\u003C/li>\n\u003Cli>\u003Cstrong>codebase_search_agent\u003C/strong> - Intelligent codebase search with AI assistant\u003C/li>\n\u003Cli>\u003Cstrong>create_file\u003C/strong> - Create or overwrite files in workspace\u003C/li>\n\u003Cli>\u003Cstrong>edit_file\u003C/strong> - Make precise edits to existing files\u003C/li>\n\u003Cli>\u003Cstrong>glob\u003C/strong> - Fast file pattern matching and discovery\u003C/li>\n\u003Cli>\u003Cstrong>Grep\u003C/strong> - Search for exact text patterns using ripgrep\u003C/li>\n\u003Cli>\u003Cstrong>list_directory\u003C/strong> - List files and directories\u003C/li>\n\u003Cli>\u003Cstrong>mermaid\u003C/strong> - Generate flowcharts and architecture diagrams\u003C/li>\n\u003Cli>\u003Cstrong>oracle\u003C/strong> - Consult AI advisor for planning and code reviews\u003C/li>\n\u003Cli>\u003Cstrong>Read\u003C/strong> - Read files from filesystem (supports images)\u003C/li>\n\u003Cli>\u003Cstrong>read_web_page\u003C/strong> - Read and analyze web page contents\u003C/li>\n\u003Cli>\u003Cstrong>Task\u003C/strong> - Spawn independent sub-agents for complex tasks\u003C/li>\n\u003Cli>\u003Cstrong>todo_read\u003C/strong> - Read current session todo list\u003C/li>\n\u003Cli>\u003Cstrong>todo_write\u003C/strong> - Update and track session todos\u003C/li>\n\u003Cli>\u003Cstrong>undo_edit\u003C/strong> - Revert last file edit\u003C/li>\n\u003Cli>\u003Cstrong>web_search\u003C/strong> - Search the web for current information\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"managing-tools\">Managing Tools\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># View available tools\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">amp\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> tools\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> show\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>Disable specific tools\u003C/strong> (in settings.json):\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"json\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"amp.tools.disable\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    \"browser_navigate\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    \"builtin:edit_file\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  ]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"mcp-model-context-protocol-servers\">MCP (Model Context Protocol) Servers\u003C/h3>\n\u003Ch4 id=\"adding-local-mcp-servers\">Adding Local MCP Servers\u003C/h4>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"json\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"amp.mcpServers\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"filesystem\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      \"command\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"npx\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      \"args\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        \"@modelcontextprotocol/server-filesystem\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        \"/path/to/allowed/directory\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      ]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"playwright\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      \"command\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"npx\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      \"args\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"-y\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"@playwright/mcp@latest\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"--headless\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"--isolated\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"supabase\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      \"command\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"npx\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      \"args\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        \"-y\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        \"@supabase/mcp-server-supabase@latest\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        \"--read-only\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        \"--project-ref=your-project-ref\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      ],\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      \"env\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        \"SUPABASE_ACCESS_TOKEN\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"your-token\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch4 id=\"remote-mcp-servers\">Remote MCP Servers\u003C/h4>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"json\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"amp.mcpServers\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"semgrep\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      \"url\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"https://mcp.semgrep.ai/mcp\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"linear\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      \"command\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"npx\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      \"args\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"mcp-remote\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"https://mcp.linear.app/sse\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch4 id=\"mcp-best-practices\">MCP Best Practices\u003C/h4>\n\u003Cul class=\"contains-task-list\">\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" checked disabled> \u003Cstrong>Selective Tool Use:\u003C/strong> Be selective with tools to maintain model performance\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" checked disabled> \u003Cstrong>Security Configuration:\u003C/strong> Use read-only modes when possible\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" checked disabled> \u003Cstrong>Project-Specific Setup:\u003C/strong> Document required MCP servers in your \u003Ccode>AGENT.md\u003C/code> file\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" checked disabled> \u003Cstrong>Tool Discovery:\u003C/strong> Use \u003Ccode>amp tools show\u003C/code> to see all available tools\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Ch2 id=\"real-world-use-cases--examples\">Real-World Use Cases &#x26; Examples\u003C/h2>\n\u003Ch3 id=\"1-code-analysis-and-refactoring\">1. Code Analysis and Refactoring\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Complex analysis using multiple tools and piping\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">git\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> log\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --oneline\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --since=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"3 months ago\"\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> src/\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Analyze commit patterns and identify files with high churn rate\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Deep security analysis with tool chaining\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Run git blame on all files in src/auth/ and src/security/, then analyze the code for potential vulnerabilities, cross-reference with recent CVE databases, and generate a security risk assessment report\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Comprehensive refactoring analysis\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">find\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> .\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -name\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"*.js\"\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -o\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -name\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"*.ts\"\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> head\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -20\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Analyze these files for code duplication, suggest refactoring opportunities, and estimate the impact of proposed changes\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Strategic refactoring planning with Amp Oracle\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Use Amp Oracle to create a comprehensive refactoring plan for this codebase, including architectural debt assessment, effort estimation, and risk analysis\"\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> tee\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> refactoring-plan.md\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"2-git-workflow-enhancement\">2. Git Workflow Enhancement\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Smart commit messages with context analysis\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">git\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> diff\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --staged\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Generate a conventional commit message based on these changes\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Strategic git workflow planning with Oracle\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">git\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> log\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --graph\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --oneline\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -20\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Use Amp Oracle to analyze this git history and create a comprehensive branching strategy optimization plan\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Parallel git analysis with subagents\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Spawn subagents to: 1) identify merge conflict patterns, 2) suggest branch naming conventions, 3) recommend automated workflow improvements\"\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Create integrated git workflow improvement strategy\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Complex release preparation with multi-stage pipeline\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">git\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> diff\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> HEAD~10..HEAD\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --name-only\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Analyze changed files for this release\"\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Spawn subagents to: validate changelog completeness, check for breaking changes, and generate release notes\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Intelligent commit analysis and team insights\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">git\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> log\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --since=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"1 month ago\"\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --pretty=format:\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"%h %an %s\"\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Analyze commit patterns by author, spawn subagents to: 1) identify code review bottlenecks, 2) suggest mentoring opportunities, 3) recommend process improvements\"\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> tee\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> team-insights.md\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"3-build-and-test-automation\">3. Build and Test Automation\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Fix build errors with intelligent debugging\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">npm\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> run\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> build\u003C/span>\u003Cspan style=\"color:#F97583\"> 2>&#x26;1\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Parse these build errors and fix all TypeScript issues\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Strategic CI/CD planning with Oracle\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">npm\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> run\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> test\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --reporter=json\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Use Amp Oracle to analyze test results and create a comprehensive test improvement strategy\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Parallel CI/CD analysis with subagents\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Spawn subagents to: 1) identify flaky tests, 2) suggest performance optimizations, 3) recommend test coverage improvements\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Multi-environment validation pipeline\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> env \u003C/span>\u003Cspan style=\"color:#F97583\">in\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> dev\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> staging\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> prod\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#F97583\">do\u003C/span>\u003Cspan style=\"color:#79B8FF\"> echo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Environment: \u003C/span>\u003Cspan style=\"color:#E1E4E8\">$env\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#B392F0\">cat\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"config/\u003C/span>\u003Cspan style=\"color:#E1E4E8\">$env\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.json\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#F97583\">done\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Analyze environment configurations, spawn subagents to validate: 1) security settings consistency, 2) performance parameter optimization, 3) feature flag alignment\"\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Generate environment-specific deployment recommendations\"\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"4-database-operations\">4. Database Operations\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Schema analysis with intelligent recommendations\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Using MCP database tools and staging environment settings from AGENT.md, connect to the database and analyze the user table schema for potential optimizations\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Complex data migration planning with risk assessment\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">pg_dump\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --schema-only\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> database_name\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Analyze this schema and spawn subagents to: 1) plan data migration strategy, 2) identify potential data integrity issues, 3) estimate downtime requirements\"\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Create detailed migration runbook with rollback procedures\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Multi-database performance analysis\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> db \u003C/span>\u003Cspan style=\"color:#F97583\">in\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> users\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> products\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> orders\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#F97583\">do\u003C/span>\u003Cspan style=\"color:#79B8FF\"> echo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"=== \u003C/span>\u003Cspan style=\"color:#E1E4E8\">$db\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> Database ===\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> &#x26;&#x26; \u003C/span>\u003Cspan style=\"color:#B392F0\">psql\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -d\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $db \u003C/span>\u003Cspan style=\"color:#79B8FF\">-c\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"\\dt+\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#F97583\">done\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Use Amp Oracle to analyze database schemas across services and create optimization strategy covering: 1) data duplication patterns, 2) microservice boundary optimizations, 3) caching strategies\"\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"5-documentation-generation\">5. Documentation Generation\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># API documentation with comprehensive analysis\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Analyze all Express routes in src/routes/ and generate OpenAPI documentation\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Strategic documentation planning with Oracle\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">find\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> .\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -name\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"*.md\"\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -o\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -name\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"*.js\"\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -o\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -name\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"*.ts\"\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> grep\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -E\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"(README|docs|comments)\"\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Use Amp Oracle to assess documentation completeness and create comprehensive improvement strategy\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Intelligent documentation pipeline with auto-generation\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">git\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> log\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --oneline\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --since=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"1 week ago\"\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Analyze recent changes and spawn subagents to: 1) identify undocumented features, 2) generate changelog entries, 3) update API documentation, 4) validate documentation accuracy\"\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Orchestrate documentation updates and create PR\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Cross-repository documentation analysis\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> repo \u003C/span>\u003Cspan style=\"color:#F97583\">in\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> frontend\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> backend\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> mobile\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#F97583\">do\u003C/span>\u003Cspan style=\"color:#79B8FF\"> echo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"=== \u003C/span>\u003Cspan style=\"color:#E1E4E8\">$repo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> ===\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> &#x26;&#x26; \u003C/span>\u003Cspan style=\"color:#B392F0\">find\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $repo \u003C/span>\u003Cspan style=\"color:#79B8FF\">-name\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"README.md\"\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -exec\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> cat\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> {}\u003C/span>\u003Cspan style=\"color:#79B8FF\"> \\;\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#F97583\">done\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Analyze documentation across repositories, spawn subagents to: 1) ensure consistency in setup instructions, 2) identify gaps in cross-service documentation, 3) recommend unified documentation strategy\"\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"6-security-and-code-quality\">6. Security and Code Quality\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Security audit with intelligent vulnerability assessment\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Scan for potential security vulnerabilities in our authentication code\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Strategic security planning with Oracle\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">npm\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> audit\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --json\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Use Amp Oracle to create comprehensive security improvement strategy with prioritized action plan\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Continuous security monitoring with intelligent alerts\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">git\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> diff\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> HEAD~1\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --name-only\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Analyze changed files for security implications, spawn subagents to: 1) validate secure coding practices, 2) check for credential leaks, 3) assess potential attack vectors\"\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Generate security review summary and action items\"\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"7-batch-file-operations\">7. Batch File Operations\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Content processing with intelligent pattern recognition\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">cat\u003C/span>\u003Cspan style=\"color:#79B8FF\"> *\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.log\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Analyze these logs for error patterns and create a summary report\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Strategic log analysis planning with Oracle\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">find\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> .\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -name\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"*.log\"\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -mtime\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -7\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Use Amp Oracle to create comprehensive log analysis strategy including pattern recognition, alerting, and monitoring improvements\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Intelligent file organization with automated cleanup\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">find\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> .\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -type\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> f\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -size\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> +100M\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Analyze large files and spawn subagents to: 1) identify archival candidates, 2) suggest compression opportunities, 3) validate file dependencies before cleanup\"\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Create automated cleanup script with safety checks\"\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"8-development-environment-debugging\">8. Development Environment Debugging\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Dependency analysis with conflict resolution\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Analyze package.json and package-lock.json to identify version conflicts\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Strategic environment planning with Oracle\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Use Amp Oracle to diagnose development environment issues and create comprehensive optimization strategy\"\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Chr>\n\u003Ch2 id=\"troubleshooting\">Troubleshooting\u003C/h2>\n\u003Ch3 id=\"common-issues\">Common Issues\u003C/h3>\n\u003Ch4 id=\"authentication-issues\">Authentication Issues\u003C/h4>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">amp\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> logout\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">amp\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> login\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch4 id=\"thread-context-is-full\">Thread context is full\u003C/h4>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">amp\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> threads\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> compact\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [threadId]\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch4 id=\"command-permission-denied\">Command Permission Denied\u003C/h4>\n\u003Cblockquote>\n\u003Cp>[!WARNING]\nAdd commands to your allowlist or use \u003Ccode>--dangerously-allow-all\u003C/code> (use with caution)\u003C/p>\n\u003C/blockquote>\n\u003Ch4 id=\"mcp-troubleshooting\">MCP Troubleshooting\u003C/h4>\n\u003Cul>\n\u003Cli>\u003Cstrong>Server not starting:\u003C/strong> Test directly with \u003Ccode>npx @modelcontextprotocol/server-filesystem /path/to/dir\u003C/code>\u003C/li>\n\u003Cli>\u003Cstrong>Tools not available:\u003C/strong> Check that Amp can access config files and they are in the correct place (\u003Ccode>~/.config/amp/settings.json\u003C/code>). If using alternative config location, check that the correct path is set in \u003Ccode>AMP_SETTINGS_FILE\u003C/code> environment variable\u003C/li>\n\u003Cli>\u003Cstrong>Permission errors:\u003C/strong> Check file paths, API tokens, and command allowlisting\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"get-support\">Get Support\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">amp\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> doctor\u003C/span>\u003Cspan style=\"color:#6A737D\">  # Generate support bundle\u003C/span>\u003C/span>\u003C/code>\u003C/pre>",{"headings":417,"localImagePaths":569,"remoteImagePaths":570,"frontmatter":571,"imagePaths":572},[418,421,424,427,430,433,436,439,442,445,448,451,454,457,460,463,466,467,470,473,476,479,482,485,488,491,494,497,500,503,506,509,512,515,518,521,524,527,530,533,536,539,542,545,548,551,554,557,560,563,566],{"depth":22,"slug":419,"text":420},"amp-cli-guide","Amp CLI Guide",{"depth":25,"slug":422,"text":423},"table-of-contents","Table of Contents",{"depth":25,"slug":425,"text":426},"introduction","Introduction",{"depth":25,"slug":428,"text":429},"quick-start","Quick Start",{"depth":32,"slug":431,"text":432},"installation","Installation",{"depth":32,"slug":434,"text":435},"first-run","First Run",{"depth":32,"slug":437,"text":438},"option-1-interactive-authentication","Option 1: Interactive Authentication",{"depth":32,"slug":440,"text":441},"option-2-environment-variables-cicd--automation","Option 2: Environment Variables (CI/CD & Automation)",{"depth":25,"slug":443,"text":444},"core-concepts","Core Concepts",{"depth":32,"slug":446,"text":447},"threads","Threads",{"depth":32,"slug":449,"text":450},"agentmd-files","AGENT.md Files",{"depth":32,"slug":452,"text":453},"tools","Tools",{"depth":32,"slug":455,"text":456},"execution-modes","Execution Modes",{"depth":25,"slug":458,"text":459},"basic-usage","Basic Usage",{"depth":32,"slug":461,"text":462},"interactive-mode","Interactive Mode",{"depth":32,"slug":464,"text":465},"execute-mode","Execute Mode",{"depth":32,"slug":312,"text":313},{"depth":25,"slug":468,"text":469},"thread-management","Thread Management",{"depth":32,"slug":471,"text":472},"basic-thread-operations","Basic Thread Operations",{"depth":32,"slug":474,"text":475},"thread-workflows","Thread Workflows",{"depth":25,"slug":477,"text":478},"intermediate-features","Intermediate Features",{"depth":32,"slug":480,"text":481},"slash-commands-in-interactive-mode","Slash Commands in Interactive Mode",{"depth":32,"slug":483,"text":484},"piping-and-redirection","Piping and Redirection",{"depth":32,"slug":486,"text":487},"environment-variables","Environment Variables",{"depth":25,"slug":489,"text":490},"configuration","Configuration",{"depth":32,"slug":492,"text":493},"settings-file-location","Settings File Location",{"depth":32,"slug":495,"text":496},"command-allowlisting","Command Allowlisting",{"depth":32,"slug":498,"text":499},"environment-configuration","Environment Configuration",{"depth":25,"slug":501,"text":502},"tools--extensions","Tools & Extensions",{"depth":32,"slug":504,"text":505},"built-in-tools-16-available","Built-in Tools (16 available)",{"depth":32,"slug":507,"text":508},"managing-tools","Managing Tools",{"depth":32,"slug":510,"text":511},"mcp-model-context-protocol-servers","MCP (Model Context Protocol) Servers",{"depth":324,"slug":513,"text":514},"adding-local-mcp-servers","Adding Local MCP Servers",{"depth":324,"slug":516,"text":517},"remote-mcp-servers","Remote MCP Servers",{"depth":324,"slug":519,"text":520},"mcp-best-practices","MCP Best Practices",{"depth":25,"slug":522,"text":523},"real-world-use-cases--examples","Real-World Use Cases & Examples",{"depth":32,"slug":525,"text":526},"1-code-analysis-and-refactoring","1. Code Analysis and Refactoring",{"depth":32,"slug":528,"text":529},"2-git-workflow-enhancement","2. Git Workflow Enhancement",{"depth":32,"slug":531,"text":532},"3-build-and-test-automation","3. Build and Test Automation",{"depth":32,"slug":534,"text":535},"4-database-operations","4. Database Operations",{"depth":32,"slug":537,"text":538},"5-documentation-generation","5. Documentation Generation",{"depth":32,"slug":540,"text":541},"6-security-and-code-quality","6. Security and Code Quality",{"depth":32,"slug":543,"text":544},"7-batch-file-operations","7. Batch File Operations",{"depth":32,"slug":546,"text":547},"8-development-environment-debugging","8. Development Environment Debugging",{"depth":25,"slug":549,"text":550},"troubleshooting","Troubleshooting",{"depth":32,"slug":552,"text":553},"common-issues","Common Issues",{"depth":324,"slug":555,"text":556},"authentication-issues","Authentication Issues",{"depth":324,"slug":558,"text":559},"thread-context-is-full","Thread context is full",{"depth":324,"slug":561,"text":562},"command-permission-denied","Command Permission Denied",{"depth":324,"slug":564,"text":565},"mcp-troubleshooting","MCP Troubleshooting",{"depth":32,"slug":567,"text":568},"get-support","Get Support",[],[],{},[],"cli/README.md","command-piping/readme",{"id":574,"data":576,"body":577,"filePath":578,"digest":579,"rendered":580,"legacyId":606},{},"# Command Piping\n\nCommand piping is a powerful feature in the terminal that allows you to connect the output of one command to the input of another command. This can be used to create complex workflows and automate tasks.\n\nUsing [`amp --execute`](https://ampcode.com/news/amp-x), you can send the output of any shell command to Amp to quickly create agentic workflows.\n\n\n## Code Linting\n\nAmp can quickly cleanup linting issues identified by a projects existing code linting configuration.\n\n`bun run lint | amp -x 'apply fixes for the identified linting issues`\n\n[Example Thread](https://ampcode.com/threads/T-28cb7911-14bf-41c3-9605-8aff8cc7b85a)\n\n\n## Log Analysis\n\n## Build Troubleshooting\n\nAmp can quickly fix build issues identified by a projects existing build configuration.\n\n### Build system issues\n\n```console\n❯ ./gradlew build\n\n[Incubating] Problems report is available at: file:///Users/trly/sourcegraph/field-engineering/training-java-monolith-refactor/build/reports/problems/problems-report.html\n\nDeprecated Gradle features were used in this build, making it incompatible with Gradle 9.0.\n\nYou can use '--warning-mode all' to show the individual deprecation warnings and determine if they come from your own scripts or plugins.\n\nFor more on this, please refer to https://docs.gradle.org/8.14.2/userguide/command_line_interface.html#sec:command_line_warnings in the Gradle documentation.\n```\n\n[Example Thread](https://ampcode.com/threads/T-194bc44d-9b7b-4f87-bb42-d43f0d4d04aa)\n\n\n### Fixing build issues with Amp\n\n```console\n❯ ./gradlew wrapper --warning-mode all | amp -x 'remediate any issues that will cause problems when upgrading to gradle 9'\nFixed the Gradle 9.0 compatibility issues:\n- Updated property assignments to use `=` syntax\n- Replaced deprecated `sourceCompatibility`/`targetCompatibility` with modern `java {}` block\n\nThe remaining warnings are from the Liberty plugin itself and can't be fixed without plugin updates.","src/content/guides/command-piping/README.md","8826a4f175e639ea",{"html":581,"metadata":582},"\u003Ch1 id=\"command-piping\">Command Piping\u003C/h1>\n\u003Cp>Command piping is a powerful feature in the terminal that allows you to connect the output of one command to the input of another command. This can be used to create complex workflows and automate tasks.\u003C/p>\n\u003Cp>Using \u003Ca href=\"https://ampcode.com/news/amp-x\">\u003Ccode>amp --execute\u003C/code>\u003C/a>, you can send the output of any shell command to Amp to quickly create agentic workflows.\u003C/p>\n\u003Ch2 id=\"code-linting\">Code Linting\u003C/h2>\n\u003Cp>Amp can quickly cleanup linting issues identified by a projects existing code linting configuration.\u003C/p>\n\u003Cp>\u003Ccode>bun run lint | amp -x 'apply fixes for the identified linting issues\u003C/code>\u003C/p>\n\u003Cp>\u003Ca href=\"https://ampcode.com/threads/T-28cb7911-14bf-41c3-9605-8aff8cc7b85a\">Example Thread\u003C/a>\u003C/p>\n\u003Ch2 id=\"log-analysis\">Log Analysis\u003C/h2>\n\u003Ch2 id=\"build-troubleshooting\">Build Troubleshooting\u003C/h2>\n\u003Cp>Amp can quickly fix build issues identified by a projects existing build configuration.\u003C/p>\n\u003Ch3 id=\"build-system-issues\">Build system issues\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"console\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">❯ ./gradlew build\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">[Incubating] Problems report is available at: file:///Users/trly/sourcegraph/field-engineering/training-java-monolith-refactor/build/reports/problems/problems-report.html\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">Deprecated Gradle features were used in this build, making it incompatible with Gradle 9.0.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">You can use '--warning-mode all' to show the individual deprecation warnings and determine if they come from your own scripts or plugins.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">For more on this, please refer to https://docs.gradle.org/8.14.2/userguide/command_line_interface.html#sec:command_line_warnings in the Gradle documentation.\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Ca href=\"https://ampcode.com/threads/T-194bc44d-9b7b-4f87-bb42-d43f0d4d04aa\">Example Thread\u003C/a>\u003C/p>\n\u003Ch3 id=\"fixing-build-issues-with-amp\">Fixing build issues with Amp\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"console\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">❯ ./gradlew wrapper --warning-mode all \u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#B392F0\"> amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'remediate any issues that will cause problems when upgrading to gradle 9'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">Fixed the Gradle 9.0 compatibility issues:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">- Updated property assignments to use `=` syntax\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">- Replaced deprecated `sourceCompatibility`/`targetCompatibility` with modern `java {}` block\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">The remaining warnings are from the Liberty plugin itself and can't be fixed without plugin updates.\u003C/span>\u003C/span>\u003C/code>\u003C/pre>",{"headings":583,"localImagePaths":602,"remoteImagePaths":603,"frontmatter":604,"imagePaths":605},[584,587,590,593,596,599],{"depth":22,"slug":585,"text":586},"command-piping","Command Piping",{"depth":25,"slug":588,"text":589},"code-linting","Code Linting",{"depth":25,"slug":591,"text":592},"log-analysis","Log Analysis",{"depth":25,"slug":594,"text":595},"build-troubleshooting","Build Troubleshooting",{"depth":32,"slug":597,"text":598},"build-system-issues","Build system issues",{"depth":32,"slug":600,"text":601},"fixing-build-issues-with-amp","Fixing build issues with Amp",[],[],{},[],"command-piping/README.md","day-0/example-readme",{"id":607,"data":609,"body":610,"filePath":611,"digest":612,"rendered":613,"legacyId":684},{},"# Pet Store API\n\nA Spring Boot application implementing the OpenAPI Pet Store specification. This\nproject demonstrates a RESTful API for managing pets, categories, and tags with\nautomatic OpenAPI client generation.\n\n## Prerequisites\n\n- **Java 21** (required)\n- **Git** (for version control)\n\n## Getting Started\n\n### 1. Clone the Repository\n\n```bash\ngit clone https://github.com/sourcegraph/training-cody-spring-boot.git\ncd pet-store-api\n```\n\n### 2. Build the Application\n\nThe project uses Gradle with wrapper, so no separate Gradle installation is needed:\n\n```bash\n./gradlew build\n```\n\nThis command will:\n\n- Download dependencies\n- Generate OpenAPI client code from the Pet Store specification\n- Compile the application\n- Run tests\n- Apply code formatting checks\n\n### 3. Run the Application\n\n```bash\n./gradlew bootRun\n```\n\nThe application will start on `http://localhost:8080`.\n\n### 4. Explore the API\n\nOnce running, you can access:\n\n- **Swagger UI**: \u003Chttp://localhost:8080/swagger-ui.html>\n- **OpenAPI Docs**: \u003Chttp://localhost:8080/api-docs>\n- **H2 Database Console**: \u003Chttp://localhost:8080/h2-console>\n  - URL: `jdbc:h2:mem:testdb`\n  - Username: `sa`\n  - Password: `password`\n\n## Development Workflow\n\n### Code Formatting\n\nThis project uses [Spotless](https://github.com/diffplug/spotless) for automatic\ncode formatting:\n\n```bash\n# Check formatting\n./gradlew spotlessCheck\n\n# Apply formatting\n./gradlew spotlessApply\n```\n\n### Pre-commit Hook\n\nInstall the pre-commit hook to automatically format code before commits:\n\n```bash\n./gradlew installPreCommitHook\n```\n\n### Running Tests\n\n```bash\n# Run all tests\n./gradlew test\n\n# Run tests with detailed output\n./gradlew test --info\n```\n\n### Clean Build\n\n```bash\n# Clean and rebuild everything\n./gradlew clean build\n```\n\n## Project Structure\n\n```text\nsrc/\n├── main/\n│   ├── java/com/sourcegraph/petstore/\n│   │   ├── App.java                    # Main Spring Boot application\n│   │   ├── controller/                 # REST controllers\n│   │   ├── service/                    # Business logic services\n│   │   ├── model/                      # Data models\n│   │   └── repository/                 # Data access layer\n│   └── resources/\n│       ├── application.properties      # Application configuration\n│       └── pet-store.json             # OpenAPI specification\n├── test/                              # Test classes\n└── build/                             # Generated files (excluded from git)\n\npetstore-openapi-client/               # Generated OpenAPI client (auto-generated)\n```\n\n## Key Technologies\n\n- **Spring Boot 3.4.3** - Application framework\n- **Spring Security** - Authentication and authorization\n- **Spring Data JPA** - Data persistence\n- **H2 Database** - In-memory database for development\n- **SpringDoc OpenAPI** - API documentation\n- **OpenAPI Generator** - Client code generation\n- **Spotless** - Code formatting\n- **JUnit 5** - Testing framework\n\n## Making Changes\n\n### Adding New Features\n\n1. **Update the OpenAPI specification** in `src/main/resources/pet-store.json`\n2. **Regenerate client code** by running `./gradlew build`\n3. **Implement controllers** in `src/main/java/com/sourcegraph/petstore/controller/`\n4. **Add business logic** in `src/main/java/com/sourcegraph/petstore/service/`\n5. **Write tests** in `src/test/java/`\n\n### Database Changes\n\nThe application uses H2 in-memory database with `create-drop` strategy, so schema\nchanges are automatically applied on restart. For production, you would\nconfigure a persistent database.\n\n### Configuration\n\nModify `src/main/resources/application.properties` to change:\n\n- Database settings\n- Server port\n- Logging levels\n- OpenAPI documentation paths\n\n## Useful Commands\n\n```bash\n# Start application in development mode\n./gradlew bootRun\n\n# Run with specific profile\n./gradlew bootRun --args='--spring.profiles.active=dev'\n\n# Generate OpenAPI client only\n./gradlew openApiGenerate\n\n# Check dependencies for updates\n./gradlew dependencyUpdates\n\n# View project dependencies\n./gradlew dependencies\n```\n\n## Troubleshooting\n\n### Build Issues\n\n- **Java version**: Ensure you're using Java 21\n- **Clean build**: Run `./gradlew clean build` to resolve dependency issues\n- **Generated code**: The `petstore-openapi-client/` directory is auto-generated\nand should not be manually edited\n\n### Runtime Issues\n\n- **Port conflicts**: Change `server.port` in `application.properties`\n- **Database issues**: Access H2 console to inspect data\n- **API errors**: Check Swagger UI for proper request format\n\n## Contributing\n\n1. Install the pre-commit hook: `./gradlew installPreCommitHook`\n2. Make your changes\n3. Run tests: `./gradlew test`\n4. Format code: `./gradlew spotlessApply`\n5. Commit and push your changes\n\nThe pre-commit hook will automatically format your code before each commit.","src/content/guides/day-0/example-README.md","18e922a806545987",{"html":614,"metadata":615},"\u003Ch1 id=\"pet-store-api\">Pet Store API\u003C/h1>\n\u003Cp>A Spring Boot application implementing the OpenAPI Pet Store specification. This\nproject demonstrates a RESTful API for managing pets, categories, and tags with\nautomatic OpenAPI client generation.\u003C/p>\n\u003Ch2 id=\"prerequisites\">Prerequisites\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>Java 21\u003C/strong> (required)\u003C/li>\n\u003Cli>\u003Cstrong>Git\u003C/strong> (for version control)\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"getting-started\">Getting Started\u003C/h2>\n\u003Ch3 id=\"1-clone-the-repository\">1. Clone the Repository\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">git\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> clone\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> https://github.com/sourcegraph/training-cody-spring-boot.git\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">cd\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> pet-store-api\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"2-build-the-application\">2. Build the Application\u003C/h3>\n\u003Cp>The project uses Gradle with wrapper, so no separate Gradle installation is needed:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">./gradlew\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> build\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This command will:\u003C/p>\n\u003Cul>\n\u003Cli>Download dependencies\u003C/li>\n\u003Cli>Generate OpenAPI client code from the Pet Store specification\u003C/li>\n\u003Cli>Compile the application\u003C/li>\n\u003Cli>Run tests\u003C/li>\n\u003Cli>Apply code formatting checks\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"3-run-the-application\">3. Run the Application\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">./gradlew\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> bootRun\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The application will start on \u003Ccode>http://localhost:8080\u003C/code>.\u003C/p>\n\u003Ch3 id=\"4-explore-the-api\">4. Explore the API\u003C/h3>\n\u003Cp>Once running, you can access:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Swagger UI\u003C/strong>: \u003Ca href=\"http://localhost:8080/swagger-ui.html\">http://localhost:8080/swagger-ui.html\u003C/a>\u003C/li>\n\u003Cli>\u003Cstrong>OpenAPI Docs\u003C/strong>: \u003Ca href=\"http://localhost:8080/api-docs\">http://localhost:8080/api-docs\u003C/a>\u003C/li>\n\u003Cli>\u003Cstrong>H2 Database Console\u003C/strong>: \u003Ca href=\"http://localhost:8080/h2-console\">http://localhost:8080/h2-console\u003C/a>\n\u003Cul>\n\u003Cli>URL: \u003Ccode>jdbc:h2:mem:testdb\u003C/code>\u003C/li>\n\u003Cli>Username: \u003Ccode>sa\u003C/code>\u003C/li>\n\u003Cli>Password: \u003Ccode>password\u003C/code>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"development-workflow\">Development Workflow\u003C/h2>\n\u003Ch3 id=\"code-formatting\">Code Formatting\u003C/h3>\n\u003Cp>This project uses \u003Ca href=\"https://github.com/diffplug/spotless\">Spotless\u003C/a> for automatic\ncode formatting:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Check formatting\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">./gradlew\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> spotlessCheck\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Apply formatting\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">./gradlew\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> spotlessApply\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"pre-commit-hook\">Pre-commit Hook\u003C/h3>\n\u003Cp>Install the pre-commit hook to automatically format code before commits:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">./gradlew\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> installPreCommitHook\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"running-tests\">Running Tests\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Run all tests\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">./gradlew\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> test\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Run tests with detailed output\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">./gradlew\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> test\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --info\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"clean-build\">Clean Build\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Clean and rebuild everything\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">./gradlew\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> clean\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> build\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"project-structure\">Project Structure\u003C/h2>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"text\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>src/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>├── main/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│   ├── java/com/sourcegraph/petstore/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│   │   ├── App.java                    # Main Spring Boot application\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│   │   ├── controller/                 # REST controllers\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│   │   ├── service/                    # Business logic services\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│   │   ├── model/                      # Data models\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│   │   └── repository/                 # Data access layer\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│   └── resources/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│       ├── application.properties      # Application configuration\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│       └── pet-store.json             # OpenAPI specification\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>├── test/                              # Test classes\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>└── build/                             # Generated files (excluded from git)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>petstore-openapi-client/               # Generated OpenAPI client (auto-generated)\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"key-technologies\">Key Technologies\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>Spring Boot 3.4.3\u003C/strong> - Application framework\u003C/li>\n\u003Cli>\u003Cstrong>Spring Security\u003C/strong> - Authentication and authorization\u003C/li>\n\u003Cli>\u003Cstrong>Spring Data JPA\u003C/strong> - Data persistence\u003C/li>\n\u003Cli>\u003Cstrong>H2 Database\u003C/strong> - In-memory database for development\u003C/li>\n\u003Cli>\u003Cstrong>SpringDoc OpenAPI\u003C/strong> - API documentation\u003C/li>\n\u003Cli>\u003Cstrong>OpenAPI Generator\u003C/strong> - Client code generation\u003C/li>\n\u003Cli>\u003Cstrong>Spotless\u003C/strong> - Code formatting\u003C/li>\n\u003Cli>\u003Cstrong>JUnit 5\u003C/strong> - Testing framework\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"making-changes\">Making Changes\u003C/h2>\n\u003Ch3 id=\"adding-new-features\">Adding New Features\u003C/h3>\n\u003Col>\n\u003Cli>\u003Cstrong>Update the OpenAPI specification\u003C/strong> in \u003Ccode>src/main/resources/pet-store.json\u003C/code>\u003C/li>\n\u003Cli>\u003Cstrong>Regenerate client code\u003C/strong> by running \u003Ccode>./gradlew build\u003C/code>\u003C/li>\n\u003Cli>\u003Cstrong>Implement controllers\u003C/strong> in \u003Ccode>src/main/java/com/sourcegraph/petstore/controller/\u003C/code>\u003C/li>\n\u003Cli>\u003Cstrong>Add business logic\u003C/strong> in \u003Ccode>src/main/java/com/sourcegraph/petstore/service/\u003C/code>\u003C/li>\n\u003Cli>\u003Cstrong>Write tests\u003C/strong> in \u003Ccode>src/test/java/\u003C/code>\u003C/li>\n\u003C/ol>\n\u003Ch3 id=\"database-changes\">Database Changes\u003C/h3>\n\u003Cp>The application uses H2 in-memory database with \u003Ccode>create-drop\u003C/code> strategy, so schema\nchanges are automatically applied on restart. For production, you would\nconfigure a persistent database.\u003C/p>\n\u003Ch3 id=\"configuration\">Configuration\u003C/h3>\n\u003Cp>Modify \u003Ccode>src/main/resources/application.properties\u003C/code> to change:\u003C/p>\n\u003Cul>\n\u003Cli>Database settings\u003C/li>\n\u003Cli>Server port\u003C/li>\n\u003Cli>Logging levels\u003C/li>\n\u003Cli>OpenAPI documentation paths\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"useful-commands\">Useful Commands\u003C/h2>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Start application in development mode\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">./gradlew\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> bootRun\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Run with specific profile\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">./gradlew\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> bootRun\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --args=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'--spring.profiles.active=dev'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Generate OpenAPI client only\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">./gradlew\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> openApiGenerate\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Check dependencies for updates\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">./gradlew\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> dependencyUpdates\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># View project dependencies\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">./gradlew\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> dependencies\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"troubleshooting\">Troubleshooting\u003C/h2>\n\u003Ch3 id=\"build-issues\">Build Issues\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Java version\u003C/strong>: Ensure you’re using Java 21\u003C/li>\n\u003Cli>\u003Cstrong>Clean build\u003C/strong>: Run \u003Ccode>./gradlew clean build\u003C/code> to resolve dependency issues\u003C/li>\n\u003Cli>\u003Cstrong>Generated code\u003C/strong>: The \u003Ccode>petstore-openapi-client/\u003C/code> directory is auto-generated\nand should not be manually edited\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"runtime-issues\">Runtime Issues\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Port conflicts\u003C/strong>: Change \u003Ccode>server.port\u003C/code> in \u003Ccode>application.properties\u003C/code>\u003C/li>\n\u003Cli>\u003Cstrong>Database issues\u003C/strong>: Access H2 console to inspect data\u003C/li>\n\u003Cli>\u003Cstrong>API errors\u003C/strong>: Check Swagger UI for proper request format\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"contributing\">Contributing\u003C/h2>\n\u003Col>\n\u003Cli>Install the pre-commit hook: \u003Ccode>./gradlew installPreCommitHook\u003C/code>\u003C/li>\n\u003Cli>Make your changes\u003C/li>\n\u003Cli>Run tests: \u003Ccode>./gradlew test\u003C/code>\u003C/li>\n\u003Cli>Format code: \u003Ccode>./gradlew spotlessApply\u003C/code>\u003C/li>\n\u003Cli>Commit and push your changes\u003C/li>\n\u003C/ol>\n\u003Cp>The pre-commit hook will automatically format your code before each commit.\u003C/p>",{"headings":616,"localImagePaths":680,"remoteImagePaths":681,"frontmatter":682,"imagePaths":683},[617,620,623,626,629,632,635,638,639,642,645,648,651,654,657,660,663,666,667,670,671,674,677],{"depth":22,"slug":618,"text":619},"pet-store-api","Pet Store API",{"depth":25,"slug":621,"text":622},"prerequisites","Prerequisites",{"depth":25,"slug":624,"text":625},"getting-started","Getting Started",{"depth":32,"slug":627,"text":628},"1-clone-the-repository","1. Clone the Repository",{"depth":32,"slug":630,"text":631},"2-build-the-application","2. Build the Application",{"depth":32,"slug":633,"text":634},"3-run-the-application","3. Run the Application",{"depth":32,"slug":636,"text":637},"4-explore-the-api","4. Explore the API",{"depth":25,"slug":242,"text":243},{"depth":32,"slug":640,"text":641},"code-formatting","Code Formatting",{"depth":32,"slug":643,"text":644},"pre-commit-hook","Pre-commit Hook",{"depth":32,"slug":646,"text":647},"running-tests","Running Tests",{"depth":32,"slug":649,"text":650},"clean-build","Clean Build",{"depth":25,"slug":652,"text":653},"project-structure","Project Structure",{"depth":25,"slug":655,"text":656},"key-technologies","Key Technologies",{"depth":25,"slug":658,"text":659},"making-changes","Making Changes",{"depth":32,"slug":661,"text":662},"adding-new-features","Adding New Features",{"depth":32,"slug":664,"text":665},"database-changes","Database Changes",{"depth":32,"slug":489,"text":490},{"depth":25,"slug":668,"text":669},"useful-commands","Useful Commands",{"depth":25,"slug":549,"text":550},{"depth":32,"slug":672,"text":673},"build-issues","Build Issues",{"depth":32,"slug":675,"text":676},"runtime-issues","Runtime Issues",{"depth":25,"slug":678,"text":679},"contributing","Contributing",[],[],{},[],"day-0/example-README.md","deploy/readme",{"id":685,"data":687,"body":688,"filePath":689,"digest":690,"rendered":691,"legacyId":747},{},"# DEPLOY Phase - Streamlined Deployment & Automation\n\nStreamline your deployment pipeline with automated workflows and quality gates.\n\n## Overview\n\nThe DEPLOY phase focuses on getting your code from development to production safely and efficiently. This includes git workflows, automated testing, pull request generation, and deployment automation.\n\n## Workflows\n\n### Git Workflow Enhancement\n\nOptimize your version control processes with intelligent commit messages and branch management.\n\n**Example Workflow:**\n> User: \"Analyze our current git workflow and suggest improvements for better collaboration and release management\"\n\n**Generic Prompts:**\n- \"Generate a conventional commit message based on these changes\"\n- \"Create a branching strategy that supports both hotfixes and feature development\"\n- \"Analyze merge conflicts and suggest workflow improvements\"\n\n### Build and Test Automation\n\nAutomate your CI/CD pipeline with intelligent error handling and optimization.\n\n**Example Workflow:**\n> User: \"Set up a CI/CD pipeline that runs tests, builds the application, and deploys to staging automatically on merge to develop branch\"\n\n**Generic Prompts:**\n- \"Fix build errors and optimize build performance\"\n- \"Create a test automation strategy that catches regressions early\"\n- \"Set up deployment health checks and rollback procedures\"\n\n### Automated Pull Request Generation\n\nConvert requirements directly into review-ready pull requests.\n\n**Example Workflow:**\n> User: \"Create a GitLab pull request that adds a 200ms debounce to the search input field. The debounce should reduce excessive calls while typing, improving performance and UX. Include a clear title and a concise description explaining why this change is needed and how it works.\"\n\n**Generic Prompts:**\n- \"Implement lazy loading for images and create a PR with performance benchmarks\"\n- \"Add dark mode support and generate PR with design system documentation\"\n- \"Create pagination for the user table and prepare PR with API changes\"\n\n### End-to-End Development Workflows\n\nTransform high-level requirements into production-ready code with iterative refinement.\n\n**Example Workflow:**\n> User: \"Build a responsive User Profile component using [React/Tailwind CSS/etc.], which displays the user's avatar, full name, and email address. Include an 'Edit' button that allows the user to update their information. The layout should be clean and accessible, with clear separation of elements. Add placeholder data for demonstration and ensure the component is reusable.\"\n\n**Generic Prompts:**\n- \"Create a checkout flow component with payment integration, then test it with mock data\"\n- \"Build a dashboard widget for analytics data, include responsive design and run tests\"\n- \"Implement OAuth login flow, handle edge cases, and prepare for deployment\"\n\n### Database Operations\n\nManage database schemas, migrations, and data operations safely.\n\n**Example Workflow:**\n> User: \"Create a database migration that adds a new 'subscription_status' column to the users table, with appropriate indexes and data backfill strategy\"\n\n**Generic Prompts:**\n- \"Generate migration scripts for schema changes with rollback procedures\"\n- \"Optimize database queries and add proper indexing\"\n- \"Create data seeding scripts for different environments\"\n\n## CLI Examples for DEPLOY Phase\n\n```bash\n# Smart commit messages with context analysis\ngit diff --staged | amp -x \"Generate a conventional commit message based on these changes\"\n\n# Strategic git workflow planning with Oracle\ngit log --graph --oneline -20 | amp -x \"Use Amp Oracle to analyze this git history and create a comprehensive branching strategy optimization plan\"\n\n# Complex release preparation with multi-stage pipeline\ngit diff HEAD~10..HEAD --name-only | amp -x \"Analyze changed files for this release\" | amp -x \"Spawn subagents to: validate changelog completeness, check for breaking changes, and generate release notes\"\n\n# Multi-environment validation pipeline\nfor env in dev staging prod; do echo \"Environment: $env\"; cat \"config/$env.json\"; done | amp -x \"Analyze environment configurations, spawn subagents to validate: 1) security settings consistency, 2) performance parameter optimization, 3) feature flag alignment\" | amp -x \"Generate environment-specific deployment recommendations\"\n\n# Schema analysis with intelligent recommendations\namp -x \"Using MCP database tools and staging environment settings from AGENT.md, connect to the database and analyze the user table schema for potential optimizations\"\n\n# Complex data migration planning with risk assessment\npg_dump --schema-only database_name | amp -x \"Analyze this schema and spawn subagents to: 1) plan data migration strategy, 2) identify potential data integrity issues, 3) estimate downtime requirements\" | amp -x \"Create detailed migration runbook with rollback procedures\"\n```\n\n## Deployment Best Practices\n\n### Pre-Deployment Checklist\n- **Code Quality**: All tests passing, linting rules satisfied\n- **Security**: No secrets in code, security scans completed\n- **Performance**: Load testing completed, monitoring in place\n- **Documentation**: Deployment instructions, rollback procedures documented\n- **Database**: Migration scripts tested, backup procedures verified\n\n### Deployment Strategies\n- **Blue-Green Deployments**: Zero-downtime deployments with instant rollback\n- **Canary Deployments**: Gradual rollout to subset of users\n- **Feature Flags**: Safe feature toggles for controlled releases\n- **Rolling Updates**: Gradual replacement of instances\n\n### Post-Deployment Monitoring\n- **Health Checks**: Automated monitoring of application health\n- **Performance Metrics**: Response times, error rates, resource usage\n- **Business Metrics**: User engagement, conversion rates\n- **Alert Systems**: Automated notifications for issues\n\n## Environment Management\n\n### Configuration Management\n- **Environment Variables**: Secure handling of environment-specific settings\n- **Secrets Management**: Proper storage and rotation of sensitive data\n- **Feature Flags**: Dynamic configuration without deployments\n\n### Infrastructure as Code\n- **Declarative Infrastructure**: Version-controlled infrastructure definitions\n- **Automated Provisioning**: Consistent environment setup\n- **Resource Optimization**: Cost-effective resource allocation\n\n## Tips for Effective Deployment\n\n- **Automate Everything**: Reduce human error through automation\n- **Test Early and Often**: Catch issues before production\n- **Monitor Continuously**: Know when something goes wrong immediately\n- **Plan for Failure**: Always have a rollback strategy\n- **Document Processes**: Ensure team members can handle deployments\n\n## Related Phases\n\n- **PLAN**: Use deployment constraints to influence architectural decisions\n- **BUILD**: Ensure code is built with deployment best practices\n- **SUPPORT**: Set up monitoring and alerting for post-deployment support","src/content/guides/deploy/README.md","19207f160993f793",{"html":692,"metadata":693},"\u003Ch1 id=\"deploy-phase---streamlined-deployment--automation\">DEPLOY Phase - Streamlined Deployment &#x26; Automation\u003C/h1>\n\u003Cp>Streamline your deployment pipeline with automated workflows and quality gates.\u003C/p>\n\u003Ch2 id=\"overview\">Overview\u003C/h2>\n\u003Cp>The DEPLOY phase focuses on getting your code from development to production safely and efficiently. This includes git workflows, automated testing, pull request generation, and deployment automation.\u003C/p>\n\u003Ch2 id=\"workflows\">Workflows\u003C/h2>\n\u003Ch3 id=\"git-workflow-enhancement\">Git Workflow Enhancement\u003C/h3>\n\u003Cp>Optimize your version control processes with intelligent commit messages and branch management.\u003C/p>\n\u003Cp>\u003Cstrong>Example Workflow:\u003C/strong>\u003C/p>\n\u003Cblockquote>\n\u003Cp>User: “Analyze our current git workflow and suggest improvements for better collaboration and release management”\u003C/p>\n\u003C/blockquote>\n\u003Cp>\u003Cstrong>Generic Prompts:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>“Generate a conventional commit message based on these changes”\u003C/li>\n\u003Cli>“Create a branching strategy that supports both hotfixes and feature development”\u003C/li>\n\u003Cli>“Analyze merge conflicts and suggest workflow improvements”\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"build-and-test-automation\">Build and Test Automation\u003C/h3>\n\u003Cp>Automate your CI/CD pipeline with intelligent error handling and optimization.\u003C/p>\n\u003Cp>\u003Cstrong>Example Workflow:\u003C/strong>\u003C/p>\n\u003Cblockquote>\n\u003Cp>User: “Set up a CI/CD pipeline that runs tests, builds the application, and deploys to staging automatically on merge to develop branch”\u003C/p>\n\u003C/blockquote>\n\u003Cp>\u003Cstrong>Generic Prompts:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>“Fix build errors and optimize build performance”\u003C/li>\n\u003Cli>“Create a test automation strategy that catches regressions early”\u003C/li>\n\u003Cli>“Set up deployment health checks and rollback procedures”\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"automated-pull-request-generation\">Automated Pull Request Generation\u003C/h3>\n\u003Cp>Convert requirements directly into review-ready pull requests.\u003C/p>\n\u003Cp>\u003Cstrong>Example Workflow:\u003C/strong>\u003C/p>\n\u003Cblockquote>\n\u003Cp>User: “Create a GitLab pull request that adds a 200ms debounce to the search input field. The debounce should reduce excessive calls while typing, improving performance and UX. Include a clear title and a concise description explaining why this change is needed and how it works.”\u003C/p>\n\u003C/blockquote>\n\u003Cp>\u003Cstrong>Generic Prompts:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>“Implement lazy loading for images and create a PR with performance benchmarks”\u003C/li>\n\u003Cli>“Add dark mode support and generate PR with design system documentation”\u003C/li>\n\u003Cli>“Create pagination for the user table and prepare PR with API changes”\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"end-to-end-development-workflows\">End-to-End Development Workflows\u003C/h3>\n\u003Cp>Transform high-level requirements into production-ready code with iterative refinement.\u003C/p>\n\u003Cp>\u003Cstrong>Example Workflow:\u003C/strong>\u003C/p>\n\u003Cblockquote>\n\u003Cp>User: “Build a responsive User Profile component using [React/Tailwind CSS/etc.], which displays the user’s avatar, full name, and email address. Include an ‘Edit’ button that allows the user to update their information. The layout should be clean and accessible, with clear separation of elements. Add placeholder data for demonstration and ensure the component is reusable.”\u003C/p>\n\u003C/blockquote>\n\u003Cp>\u003Cstrong>Generic Prompts:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>“Create a checkout flow component with payment integration, then test it with mock data”\u003C/li>\n\u003Cli>“Build a dashboard widget for analytics data, include responsive design and run tests”\u003C/li>\n\u003Cli>“Implement OAuth login flow, handle edge cases, and prepare for deployment”\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"database-operations\">Database Operations\u003C/h3>\n\u003Cp>Manage database schemas, migrations, and data operations safely.\u003C/p>\n\u003Cp>\u003Cstrong>Example Workflow:\u003C/strong>\u003C/p>\n\u003Cblockquote>\n\u003Cp>User: “Create a database migration that adds a new ‘subscription_status’ column to the users table, with appropriate indexes and data backfill strategy”\u003C/p>\n\u003C/blockquote>\n\u003Cp>\u003Cstrong>Generic Prompts:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>“Generate migration scripts for schema changes with rollback procedures”\u003C/li>\n\u003Cli>“Optimize database queries and add proper indexing”\u003C/li>\n\u003Cli>“Create data seeding scripts for different environments”\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"cli-examples-for-deploy-phase\">CLI Examples for DEPLOY Phase\u003C/h2>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Smart commit messages with context analysis\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">git\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> diff\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --staged\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Generate a conventional commit message based on these changes\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Strategic git workflow planning with Oracle\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">git\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> log\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --graph\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --oneline\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -20\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Use Amp Oracle to analyze this git history and create a comprehensive branching strategy optimization plan\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Complex release preparation with multi-stage pipeline\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">git\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> diff\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> HEAD~10..HEAD\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --name-only\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Analyze changed files for this release\"\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Spawn subagents to: validate changelog completeness, check for breaking changes, and generate release notes\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Multi-environment validation pipeline\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> env \u003C/span>\u003Cspan style=\"color:#F97583\">in\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> dev\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> staging\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> prod\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#F97583\">do\u003C/span>\u003Cspan style=\"color:#79B8FF\"> echo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Environment: \u003C/span>\u003Cspan style=\"color:#E1E4E8\">$env\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#B392F0\">cat\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"config/\u003C/span>\u003Cspan style=\"color:#E1E4E8\">$env\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.json\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#F97583\">done\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Analyze environment configurations, spawn subagents to validate: 1) security settings consistency, 2) performance parameter optimization, 3) feature flag alignment\"\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Generate environment-specific deployment recommendations\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Schema analysis with intelligent recommendations\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Using MCP database tools and staging environment settings from AGENT.md, connect to the database and analyze the user table schema for potential optimizations\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Complex data migration planning with risk assessment\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">pg_dump\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --schema-only\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> database_name\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Analyze this schema and spawn subagents to: 1) plan data migration strategy, 2) identify potential data integrity issues, 3) estimate downtime requirements\"\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Create detailed migration runbook with rollback procedures\"\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"deployment-best-practices\">Deployment Best Practices\u003C/h2>\n\u003Ch3 id=\"pre-deployment-checklist\">Pre-Deployment Checklist\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Code Quality\u003C/strong>: All tests passing, linting rules satisfied\u003C/li>\n\u003Cli>\u003Cstrong>Security\u003C/strong>: No secrets in code, security scans completed\u003C/li>\n\u003Cli>\u003Cstrong>Performance\u003C/strong>: Load testing completed, monitoring in place\u003C/li>\n\u003Cli>\u003Cstrong>Documentation\u003C/strong>: Deployment instructions, rollback procedures documented\u003C/li>\n\u003Cli>\u003Cstrong>Database\u003C/strong>: Migration scripts tested, backup procedures verified\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"deployment-strategies\">Deployment Strategies\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Blue-Green Deployments\u003C/strong>: Zero-downtime deployments with instant rollback\u003C/li>\n\u003Cli>\u003Cstrong>Canary Deployments\u003C/strong>: Gradual rollout to subset of users\u003C/li>\n\u003Cli>\u003Cstrong>Feature Flags\u003C/strong>: Safe feature toggles for controlled releases\u003C/li>\n\u003Cli>\u003Cstrong>Rolling Updates\u003C/strong>: Gradual replacement of instances\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"post-deployment-monitoring\">Post-Deployment Monitoring\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Health Checks\u003C/strong>: Automated monitoring of application health\u003C/li>\n\u003Cli>\u003Cstrong>Performance Metrics\u003C/strong>: Response times, error rates, resource usage\u003C/li>\n\u003Cli>\u003Cstrong>Business Metrics\u003C/strong>: User engagement, conversion rates\u003C/li>\n\u003Cli>\u003Cstrong>Alert Systems\u003C/strong>: Automated notifications for issues\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"environment-management\">Environment Management\u003C/h2>\n\u003Ch3 id=\"configuration-management\">Configuration Management\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Environment Variables\u003C/strong>: Secure handling of environment-specific settings\u003C/li>\n\u003Cli>\u003Cstrong>Secrets Management\u003C/strong>: Proper storage and rotation of sensitive data\u003C/li>\n\u003Cli>\u003Cstrong>Feature Flags\u003C/strong>: Dynamic configuration without deployments\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"infrastructure-as-code\">Infrastructure as Code\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Declarative Infrastructure\u003C/strong>: Version-controlled infrastructure definitions\u003C/li>\n\u003Cli>\u003Cstrong>Automated Provisioning\u003C/strong>: Consistent environment setup\u003C/li>\n\u003Cli>\u003Cstrong>Resource Optimization\u003C/strong>: Cost-effective resource allocation\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"tips-for-effective-deployment\">Tips for Effective Deployment\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>Automate Everything\u003C/strong>: Reduce human error through automation\u003C/li>\n\u003Cli>\u003Cstrong>Test Early and Often\u003C/strong>: Catch issues before production\u003C/li>\n\u003Cli>\u003Cstrong>Monitor Continuously\u003C/strong>: Know when something goes wrong immediately\u003C/li>\n\u003Cli>\u003Cstrong>Plan for Failure\u003C/strong>: Always have a rollback strategy\u003C/li>\n\u003Cli>\u003Cstrong>Document Processes\u003C/strong>: Ensure team members can handle deployments\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"related-phases\">Related Phases\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>PLAN\u003C/strong>: Use deployment constraints to influence architectural decisions\u003C/li>\n\u003Cli>\u003Cstrong>BUILD\u003C/strong>: Ensure code is built with deployment best practices\u003C/li>\n\u003Cli>\u003Cstrong>SUPPORT\u003C/strong>: Set up monitoring and alerting for post-deployment support\u003C/li>\n\u003C/ul>",{"headings":694,"localImagePaths":743,"remoteImagePaths":744,"frontmatter":745,"imagePaths":746},[695,698,699,700,703,706,709,712,715,718,721,724,727,730,733,736,739,742],{"depth":22,"slug":696,"text":697},"deploy-phase---streamlined-deployment--automation","DEPLOY Phase - Streamlined Deployment & Automation",{"depth":25,"slug":122,"text":123},{"depth":25,"slug":368,"text":369},{"depth":32,"slug":701,"text":702},"git-workflow-enhancement","Git Workflow Enhancement",{"depth":32,"slug":704,"text":705},"build-and-test-automation","Build and Test Automation",{"depth":32,"slug":707,"text":708},"automated-pull-request-generation","Automated Pull Request Generation",{"depth":32,"slug":710,"text":711},"end-to-end-development-workflows","End-to-End Development Workflows",{"depth":32,"slug":713,"text":714},"database-operations","Database Operations",{"depth":25,"slug":716,"text":717},"cli-examples-for-deploy-phase","CLI Examples for DEPLOY Phase",{"depth":25,"slug":719,"text":720},"deployment-best-practices","Deployment Best Practices",{"depth":32,"slug":722,"text":723},"pre-deployment-checklist","Pre-Deployment Checklist",{"depth":32,"slug":725,"text":726},"deployment-strategies","Deployment Strategies",{"depth":32,"slug":728,"text":729},"post-deployment-monitoring","Post-Deployment Monitoring",{"depth":25,"slug":731,"text":732},"environment-management","Environment Management",{"depth":32,"slug":734,"text":735},"configuration-management","Configuration Management",{"depth":32,"slug":737,"text":738},"infrastructure-as-code","Infrastructure as Code",{"depth":25,"slug":740,"text":741},"tips-for-effective-deployment","Tips for Effective Deployment",{"depth":25,"slug":401,"text":402},[],[],{},[],"deploy/README.md","day-0/readme",{"id":748,"data":750,"body":751,"filePath":752,"digest":753,"rendered":754,"legacyId":810},{},"# Amp: Day 0\n\nThis guide will show you how to install Amp and immediately accellerate your\ndevelopment workflow.\n\n## Install Amp\n\nTo install Amp, [review our installation instructions](https://ampcode.com/manual#getting-started) in the [Amp Owners Manual](https://ampcode.com/manual)\n## Review the Amp manual\n\nThe [Amp Owners Manual](https://ampcode.com/manual) provides a succinct overview of [using Amp](https://ampcode.com/manual#using-amp) and offers\nexamples of how to prompt, using [AGENT.md](https://ampcode.com/manual#AGENT.md) files\nto provide persistent guidance to the agent, and using images, extended thinking, and file mentions\nto improve the agent's understanding.\n\n## Start using Amp\n\n### Example 1: Application Architecture Overview\n\n#### Architecture Analysis Prompt\n\n```text\nProvide me with an overview of this application, focus on frameworks, tools and patterns.\nI need to understand how other applications can integrate with the API and if there are any\nknown, documented bugs in code comments\n```\n\n#### Architecture Analysis Result\n\n```markdown\n## Pet Store API Overview\n\nFrameworks & Tools:\n\n   * Spring Boot 3.4.3 with Spring Security, Spring Web, Spring WebFlux, and Spring Data JPA\n   * OpenAPI 3.0 specification with code generation via OpenAPI Generator\n   * H2 Database for data persistence with JPA entities\n   * SpringDoc OpenAPI for interactive API documentation\n   * Java 21 runtime with Jackson for JSON serialization\n   * Gradle build system with Kotlin DSL\n\nAPI Integration Patterns:\n\n   * RESTful API design following OpenAPI 3.0 specification\n   * Base URL: /api/v3 with endpoints for pets, store, and user operations\n   * OAuth2 and API key authentication schemes defined\n   * Auto-generated client libraries via OpenAPI Generator\n   * JSON/XML content negotiation support\n\nApplication Architecture:\n\n   * Standard Spring Boot MVC pattern with controllers, services, and JPA repositories\n   * Main application class uses @SpringBootApplication\n   * Automatic OpenAPI model generation from specification\n\nDocumented Bugs:\nNo TODO, FIXME, BUG, or HACK comments found in the source code.\n\nRecent Changes (Last 10 Commits):\n\n   * Added OpenAPI client generation capabilities\n   * Upgraded to Java 21\n   * Migrated from in-memory storage to Spring Data JPA with H2 database\n   * Initial migration from professional-services-public repository\n   * Added Renovate dependency management\n```\n\n**Thread**:\n[Application architecture and recent development overview](https://ampcode.com/threads/T-c145b079-d8fd-4450-a9f1-991f8217e009)\n\n---\n\n### Example 2: Add Tests\n\n#### Test Implementation Prompt \n\n```text\nUsing spring-test and JUnit5, add tests for my RestControllers\n\nTests should validate user facing behavior expected of the REST endpoints\nAssertJ should be used for making assertions\nDo not focus on testing implementation details, just expected user behavior\n```\n\n#### Test Implementation Result\n\n```text\nPerfect! I've successfully added comprehensive REST controller tests for your\nSpring Boot application. Here's what was accomplished:\n\n## REST Controller Tests Added\n\nTest Coverage:\n\n   * PetController - 4 test methods\n   * CategoryController - 9 test methods\n   * TagController - 10 test methods\n\n## Key Features\n\nTesting Framework:\n\n   * JUnit 5 for test execution\n   * Spring Boot Test (@WebMvcTest) for web layer testing\n   * AssertJ for fluent assertions via Spring Test's JSON path matchers\n   * Mockito (@MockBean) for service layer mocking\n\nUser-Facing Behavior Focus:\n\n   * Tests validate HTTP status codes, response content types, and JSON structure\n   * Covers happy path, edge cases (empty lists, zero counts), and error scenarios\n   * Tests actual REST endpoint behavior rather than implementation details\n\nSecurity Configuration:\n\n   * Added @WithMockUser to authenticate test requests\n   * Configured CSRF protection for state-changing operations (POST, PUT, DELETE)\n   * Added Spring Security Test dependency to build.gradle.kts\n\nBuild Configuration:\n\n   * Fixed OpenAPI model class access in test classpath\n   * All 23 tests now pass successfully\n\nThe tests comprehensively validate the REST API endpoints'\nuser-facing behavior including CRUD operations,\nrandom data generation, and proper HTTP semantics.\n```\n\n```java\n@Test\n@WithMockUser\nvoid getAllCategories_shouldReturnAllCategories() throws Exception {\n    Category category1 = new Category();\n    category1.setId(1L);\n    category1.setName(\"Dogs\");\n\n    Category category2 = new Category();\n    category2.setId(2L);\n    category2.setName(\"Cats\");\n\n    List\u003CCategory> categories = Arrays.asList(category1, category2);\n    when(categoryService.getAllCategories()).thenReturn(categories);\n\n    mockMvc.perform(get(\"/api/categories\"))\n            .andExpected(status().isOk())\n            .andExpected(content().contentType(\"application/json\"))\n            .andExpected(jsonPath(\"$.length()\").value(2))\n            .andExpected(jsonPath(\"$[0].id\").value(1))\n            .andExpected(jsonPath(\"$[0].name\").value(\"Dogs\"))\n            .andExpected(jsonPath(\"$[0].id\").value(2))\n            .andExpected(jsonPath(\"$[1].name\").value(\"Cats\"));\n}\n```\n\n**Thread**: [Spring Boot REST Controller Testing with JUnit5](https://ampcode.com/threads/T-74999309-0e5d-4bd8-92f0-c52abef57c3a)\n\n### Example 3: Improve Documentation\n\n#### Documentation Creation Prompt \n```text\ncreate a README for this application, it should provide instructions\non how to get started making changes to the application.\nAssume the developer has never worked on this code before\n```\n\n\n#### Documentation Creation Result\n\n```markdown\nI've created a comprehensive README for the Pet Store API application. The README includes:\n\nKey sections:\n\n   * Prerequisites and setup instructions\n   * Step-by-step getting started guide\n   * Development workflow with formatting and testing\n   * Project structure overview\n   * Technology stack explanation\n   * Instructions for making changes\n   * Troubleshooting guide\n\nNotable features covered:\n\n   * Java 21 requirement\n   * Gradle wrapper usage\n   * OpenAPI client generation\n   * Spotless code formatting\n   * Pre-commit hooks\n   * H2 database console access\n   * Swagger UI integration\n\nThe README assumes a new developer has never worked with this codebase\nand provides clear, actionable instructions for getting the application\nrunning and making their first changes.\n```\n\n**Thread**: [Developer setup and application contribution guide](https://ampcode.com/threads/T-264473e3-7d24-429b-a958-800f163620ea)\n\n**Documentation**: [README.md](./example-README.md)\n\n---\n\n### Example 4: Fix Code Linting Issues\n\n#### Linting Setup Prompt \n```text\nImplement https://github.com/diffplug/spotless for project linting.\nOnce spotless is implemented, provide a list of issues that need to\nbe corrected, but do not make any file changes.\n\n...\n\nadd ./gradlew spotlessApply as a pre-commit hook. Create a gradle\ntask that will install the preCommit hook so that is can be used \nby all developers working on the project\n```\n\n#### Linting Setup Result\n\n```markdown\n## Code Linting Improvements Summary\n\n### Spotless Integration\n\n   * Added Spotless plugin v6.25.0 to build.gradle.kts\n   * Configured Google Java Format for consistent code styling\n   * Set up automatic import organization and trailing whitespace removal\n   * Added Kotlin Gradle script formatting with ktlint\n\n### Pre-commit Hook System\n\n   * Created hook script at scripts/pre-commit that runs ./gradlew spotlessApply\n   * Added installPreCommitHook Gradle task for easy team-wide setup\n   * Hook prevents commits when formatting changes are made, ensuring code review\n\n### Automated Formatting Results\n\n   * Formatted 18 Java files with consistent 2-space indentation\n   * Reorganized imports (Java standard library before framework imports)\n   * Removed trailing whitespace and ensured proper line endings\n   * Applied Google Java Format standards across entire codebase\n\n### Developer Workflow\n\n   * One-command setup: ./gradlew installPreCommitHook\n   * Automatic formatting: Code is formatted before every commit\n   * Enforced consistency: All team members use identical formatting rules\n   * Easy maintenance: ./gradlew spotlessCheck to verify, ./gradlew spotlessApply to fix\n```\n\nThread: [Implement Spotless linting for project](https://ampcode.com/threads/T-13e9d8b8-f5d4-41ee-8fb6-a6f4e02465c1>)","src/content/guides/day-0/README.md","afdcc6a196616519",{"html":755,"metadata":756},"\u003Ch1 id=\"amp-day-0\">Amp: Day 0\u003C/h1>\n\u003Cp>This guide will show you how to install Amp and immediately accellerate your\ndevelopment workflow.\u003C/p>\n\u003Ch2 id=\"install-amp\">Install Amp\u003C/h2>\n\u003Cp>To install Amp, \u003Ca href=\"https://ampcode.com/manual#getting-started\">review our installation instructions\u003C/a> in the \u003Ca href=\"https://ampcode.com/manual\">Amp Owners Manual\u003C/a>\u003C/p>\n\u003Ch2 id=\"review-the-amp-manual\">Review the Amp manual\u003C/h2>\n\u003Cp>The \u003Ca href=\"https://ampcode.com/manual\">Amp Owners Manual\u003C/a> provides a succinct overview of \u003Ca href=\"https://ampcode.com/manual#using-amp\">using Amp\u003C/a> and offers\nexamples of how to prompt, using \u003Ca href=\"https://ampcode.com/manual#AGENT.md\">AGENT.md\u003C/a> files\nto provide persistent guidance to the agent, and using images, extended thinking, and file mentions\nto improve the agent’s understanding.\u003C/p>\n\u003Ch2 id=\"start-using-amp\">Start using Amp\u003C/h2>\n\u003Ch3 id=\"example-1-application-architecture-overview\">Example 1: Application Architecture Overview\u003C/h3>\n\u003Ch4 id=\"architecture-analysis-prompt\">Architecture Analysis Prompt\u003C/h4>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"text\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>Provide me with an overview of this application, focus on frameworks, tools and patterns.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>I need to understand how other applications can integrate with the API and if there are any\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>known, documented bugs in code comments\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch4 id=\"architecture-analysis-result\">Architecture Analysis Result\u003C/h4>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"markdown\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF;font-weight:bold\">## Pet Store API Overview\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">Frameworks &#x26; Tools:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Spring Boot 3.4.3 with Spring Security, Spring Web, Spring WebFlux, and Spring Data JPA\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> OpenAPI 3.0 specification with code generation via OpenAPI Generator\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> H2 Database for data persistence with JPA entities\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> SpringDoc OpenAPI for interactive API documentation\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Java 21 runtime with Jackson for JSON serialization\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Gradle build system with Kotlin DSL\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">API Integration Patterns:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> RESTful API design following OpenAPI 3.0 specification\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Base URL: /api/v3 with endpoints for pets, store, and user operations\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> OAuth2 and API key authentication schemes defined\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Auto-generated client libraries via OpenAPI Generator\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> JSON/XML content negotiation support\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">Application Architecture:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Standard Spring Boot MVC pattern with controllers, services, and JPA repositories\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Main application class uses @SpringBootApplication\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Automatic OpenAPI model generation from specification\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">Documented Bugs:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">No TODO, FIXME, BUG, or HACK comments found in the source code.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">Recent Changes (Last 10 Commits):\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Added OpenAPI client generation capabilities\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Upgraded to Java 21\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Migrated from in-memory storage to Spring Data JPA with H2 database\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Initial migration from professional-services-public repository\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Added Renovate dependency management\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>Thread\u003C/strong>:\n\u003Ca href=\"https://ampcode.com/threads/T-c145b079-d8fd-4450-a9f1-991f8217e009\">Application architecture and recent development overview\u003C/a>\u003C/p>\n\u003Chr>\n\u003Ch3 id=\"example-2-add-tests\">Example 2: Add Tests\u003C/h3>\n\u003Ch4 id=\"test-implementation-prompt\">Test Implementation Prompt\u003C/h4>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"text\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>Using spring-test and JUnit5, add tests for my RestControllers\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Tests should validate user facing behavior expected of the REST endpoints\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>AssertJ should be used for making assertions\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Do not focus on testing implementation details, just expected user behavior\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch4 id=\"test-implementation-result\">Test Implementation Result\u003C/h4>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"text\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>Perfect! I've successfully added comprehensive REST controller tests for your\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Spring Boot application. Here's what was accomplished:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>## REST Controller Tests Added\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Test Coverage:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>   * PetController - 4 test methods\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>   * CategoryController - 9 test methods\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>   * TagController - 10 test methods\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>## Key Features\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Testing Framework:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>   * JUnit 5 for test execution\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>   * Spring Boot Test (@WebMvcTest) for web layer testing\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>   * AssertJ for fluent assertions via Spring Test's JSON path matchers\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>   * Mockito (@MockBean) for service layer mocking\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>User-Facing Behavior Focus:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>   * Tests validate HTTP status codes, response content types, and JSON structure\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>   * Covers happy path, edge cases (empty lists, zero counts), and error scenarios\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>   * Tests actual REST endpoint behavior rather than implementation details\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Security Configuration:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>   * Added @WithMockUser to authenticate test requests\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>   * Configured CSRF protection for state-changing operations (POST, PUT, DELETE)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>   * Added Spring Security Test dependency to build.gradle.kts\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Build Configuration:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>   * Fixed OpenAPI model class access in test classpath\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>   * All 23 tests now pass successfully\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>The tests comprehensively validate the REST API endpoints'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>user-facing behavior including CRUD operations,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>random data generation, and proper HTTP semantics.\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">@\u003C/span>\u003Cspan style=\"color:#F97583\">Test\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">@\u003C/span>\u003Cspan style=\"color:#F97583\">WithMockUser\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">void\u003C/span>\u003Cspan style=\"color:#B392F0\"> getAllCategories_shouldReturnAllCategories\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() throws Exception {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    Category category1 \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Category\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    category1.\u003C/span>\u003Cspan style=\"color:#B392F0\">setId\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">1L\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    category1.\u003C/span>\u003Cspan style=\"color:#B392F0\">setName\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Dogs\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    Category category2 \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Category\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    category2.\u003C/span>\u003Cspan style=\"color:#B392F0\">setId\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">2L\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    category2.\u003C/span>\u003Cspan style=\"color:#B392F0\">setName\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Cats\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    List&#x3C;\u003C/span>\u003Cspan style=\"color:#F97583\">Category\u003C/span>\u003Cspan style=\"color:#E1E4E8\">> categories \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Arrays.\u003C/span>\u003Cspan style=\"color:#B392F0\">asList\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(category1, category2);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    when\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(categoryService.\u003C/span>\u003Cspan style=\"color:#B392F0\">getAllCategories\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()).\u003C/span>\u003Cspan style=\"color:#B392F0\">thenReturn\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(categories);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    mockMvc.\u003C/span>\u003Cspan style=\"color:#B392F0\">perform\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"/api/categories\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            .\u003C/span>\u003Cspan style=\"color:#B392F0\">andExpected\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">status\u003C/span>\u003Cspan style=\"color:#E1E4E8\">().\u003C/span>\u003Cspan style=\"color:#B392F0\">isOk\u003C/span>\u003Cspan style=\"color:#E1E4E8\">())\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            .\u003C/span>\u003Cspan style=\"color:#B392F0\">andExpected\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">content\u003C/span>\u003Cspan style=\"color:#E1E4E8\">().\u003C/span>\u003Cspan style=\"color:#B392F0\">contentType\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"application/json\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            .\u003C/span>\u003Cspan style=\"color:#B392F0\">andExpected\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">jsonPath\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"$.length()\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">).\u003C/span>\u003Cspan style=\"color:#B392F0\">value\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            .\u003C/span>\u003Cspan style=\"color:#B392F0\">andExpected\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">jsonPath\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"$[0].id\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">).\u003C/span>\u003Cspan style=\"color:#B392F0\">value\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            .\u003C/span>\u003Cspan style=\"color:#B392F0\">andExpected\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">jsonPath\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"$[0].name\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">).\u003C/span>\u003Cspan style=\"color:#B392F0\">value\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Dogs\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            .\u003C/span>\u003Cspan style=\"color:#B392F0\">andExpected\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">jsonPath\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"$[0].id\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">).\u003C/span>\u003Cspan style=\"color:#B392F0\">value\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            .\u003C/span>\u003Cspan style=\"color:#B392F0\">andExpected\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">jsonPath\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"$[1].name\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">).\u003C/span>\u003Cspan style=\"color:#B392F0\">value\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Cats\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>Thread\u003C/strong>: \u003Ca href=\"https://ampcode.com/threads/T-74999309-0e5d-4bd8-92f0-c52abef57c3a\">Spring Boot REST Controller Testing with JUnit5\u003C/a>\u003C/p>\n\u003Ch3 id=\"example-3-improve-documentation\">Example 3: Improve Documentation\u003C/h3>\n\u003Ch4 id=\"documentation-creation-prompt\">Documentation Creation Prompt\u003C/h4>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"text\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>create a README for this application, it should provide instructions\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>on how to get started making changes to the application.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Assume the developer has never worked on this code before\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch4 id=\"documentation-creation-result\">Documentation Creation Result\u003C/h4>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"markdown\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">I've created a comprehensive README for the Pet Store API application. The README includes:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">Key sections:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Prerequisites and setup instructions\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Step-by-step getting started guide\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Development workflow with formatting and testing\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Project structure overview\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Technology stack explanation\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Instructions for making changes\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Troubleshooting guide\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">Notable features covered:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Java 21 requirement\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Gradle wrapper usage\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> OpenAPI client generation\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Spotless code formatting\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Pre-commit hooks\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> H2 database console access\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Swagger UI integration\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">The README assumes a new developer has never worked with this codebase\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">and provides clear, actionable instructions for getting the application\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">running and making their first changes.\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>Thread\u003C/strong>: \u003Ca href=\"https://ampcode.com/threads/T-264473e3-7d24-429b-a958-800f163620ea\">Developer setup and application contribution guide\u003C/a>\u003C/p>\n\u003Cp>\u003Cstrong>Documentation\u003C/strong>: \u003Ca href=\"./example-README.md\">README.md\u003C/a>\u003C/p>\n\u003Chr>\n\u003Ch3 id=\"example-4-fix-code-linting-issues\">Example 4: Fix Code Linting Issues\u003C/h3>\n\u003Ch4 id=\"linting-setup-prompt\">Linting Setup Prompt\u003C/h4>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"text\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>Implement https://github.com/diffplug/spotless for project linting.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Once spotless is implemented, provide a list of issues that need to\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>be corrected, but do not make any file changes.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>add ./gradlew spotlessApply as a pre-commit hook. Create a gradle\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>task that will install the preCommit hook so that is can be used \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>by all developers working on the project\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch4 id=\"linting-setup-result\">Linting Setup Result\u003C/h4>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"markdown\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF;font-weight:bold\">## Code Linting Improvements Summary\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF;font-weight:bold\">### Spotless Integration\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Added Spotless plugin v6.25.0 to build.gradle.kts\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Configured Google Java Format for consistent code styling\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Set up automatic import organization and trailing whitespace removal\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Added Kotlin Gradle script formatting with ktlint\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF;font-weight:bold\">### Pre-commit Hook System\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Created hook script at scripts/pre-commit that runs ./gradlew spotlessApply\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Added installPreCommitHook Gradle task for easy team-wide setup\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Hook prevents commits when formatting changes are made, ensuring code review\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF;font-weight:bold\">### Automated Formatting Results\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Formatted 18 Java files with consistent 2-space indentation\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Reorganized imports (Java standard library before framework imports)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Removed trailing whitespace and ensured proper line endings\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Applied Google Java Format standards across entire codebase\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF;font-weight:bold\">### Developer Workflow\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> One-command setup: ./gradlew installPreCommitHook\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Automatic formatting: Code is formatted before every commit\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Enforced consistency: All team members use identical formatting rules\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Easy maintenance: ./gradlew spotlessCheck to verify, ./gradlew spotlessApply to fix\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Thread: \u003Ca href=\"https://ampcode.com/threads/T-13e9d8b8-f5d4-41ee-8fb6-a6f4e02465c1%3E\">Implement Spotless linting for project\u003C/a>\u003C/p>",{"headings":757,"localImagePaths":806,"remoteImagePaths":807,"frontmatter":808,"imagePaths":809},[758,761,764,767,770,773,776,779,782,785,788,791,794,797,800,803],{"depth":22,"slug":759,"text":760},"amp-day-0","Amp: Day 0",{"depth":25,"slug":762,"text":763},"install-amp","Install Amp",{"depth":25,"slug":765,"text":766},"review-the-amp-manual","Review the Amp manual",{"depth":25,"slug":768,"text":769},"start-using-amp","Start using Amp",{"depth":32,"slug":771,"text":772},"example-1-application-architecture-overview","Example 1: Application Architecture Overview",{"depth":324,"slug":774,"text":775},"architecture-analysis-prompt","Architecture Analysis Prompt",{"depth":324,"slug":777,"text":778},"architecture-analysis-result","Architecture Analysis Result",{"depth":32,"slug":780,"text":781},"example-2-add-tests","Example 2: Add Tests",{"depth":324,"slug":783,"text":784},"test-implementation-prompt","Test Implementation Prompt",{"depth":324,"slug":786,"text":787},"test-implementation-result","Test Implementation Result",{"depth":32,"slug":789,"text":790},"example-3-improve-documentation","Example 3: Improve Documentation",{"depth":324,"slug":792,"text":793},"documentation-creation-prompt","Documentation Creation Prompt",{"depth":324,"slug":795,"text":796},"documentation-creation-result","Documentation Creation Result",{"depth":32,"slug":798,"text":799},"example-4-fix-code-linting-issues","Example 4: Fix Code Linting Issues",{"depth":324,"slug":801,"text":802},"linting-setup-prompt","Linting Setup Prompt",{"depth":324,"slug":804,"text":805},"linting-setup-result","Linting Setup Result",[],[],{},[],"day-0/README.md","documentation/readme",{"id":811,"data":813,"body":814,"filePath":815,"digest":816,"rendered":817,"legacyId":837},{},"# Documentation with Amp\n\n## Strategic documentation planning with the oracle tool\n\nUse Amp's `oracle` tool to explore the code base and provide an implementation plan to update documentation\n\n```bash\nfind . -name \"*.md\" -o -name \"*.js\" -o -name \"*.ts\" | grep -E \"(README|docs|comments)\" | amp -x \"Use the oracle to assess current documentation completeness and create a comprehensive improvement strategy\"\n```\n\n## Intelligent documentation pipelines\n\nSend the output of one Amp command to another, chaining together multiple steps, each enhanced with Amp's agentic capabilities\n\n```bash\ngit log --oneline --since=\"1 week ago\" | amp -x \"Analyze recent changes and spawn subagents to: 1) identify undocumented features, 2) generate changelog entries, 3) update API documentation, 4) validate documentation accuracy\" | amp -x \"Orchestrate documentation updates and create PR\"\n```\n\n## Cross-repository documentation analysis\n\n```bash\nfor repo in frontend backend mobile; do echo \"=== $repo ===\" && find $repo -name \"README.md\" -exec cat {} \\;; done | amp -x \"Analyze documentation across repositories, spawn subagents to: 1) ensure consistency in setup instructions, 2) identify gaps in cross-service documentation, 3) recommend unified documentation strategy\"\n```","src/content/guides/documentation/README.md","24406d0d81206dea",{"html":818,"metadata":819},"\u003Ch1 id=\"documentation-with-amp\">Documentation with Amp\u003C/h1>\n\u003Ch2 id=\"strategic-documentation-planning-with-the-oracle-tool\">Strategic documentation planning with the oracle tool\u003C/h2>\n\u003Cp>Use Amp’s \u003Ccode>oracle\u003C/code> tool to explore the code base and provide an implementation plan to update documentation\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">find\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> .\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -name\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"*.md\"\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -o\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -name\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"*.js\"\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -o\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -name\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"*.ts\"\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> grep\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -E\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"(README|docs|comments)\"\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Use the oracle to assess current documentation completeness and create a comprehensive improvement strategy\"\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"intelligent-documentation-pipelines\">Intelligent documentation pipelines\u003C/h2>\n\u003Cp>Send the output of one Amp command to another, chaining together multiple steps, each enhanced with Amp’s agentic capabilities\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">git\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> log\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --oneline\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --since=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"1 week ago\"\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Analyze recent changes and spawn subagents to: 1) identify undocumented features, 2) generate changelog entries, 3) update API documentation, 4) validate documentation accuracy\"\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Orchestrate documentation updates and create PR\"\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"cross-repository-documentation-analysis\">Cross-repository documentation analysis\u003C/h2>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> repo \u003C/span>\u003Cspan style=\"color:#F97583\">in\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> frontend\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> backend\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> mobile\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#F97583\">do\u003C/span>\u003Cspan style=\"color:#79B8FF\"> echo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"=== \u003C/span>\u003Cspan style=\"color:#E1E4E8\">$repo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> ===\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> &#x26;&#x26; \u003C/span>\u003Cspan style=\"color:#B392F0\">find\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $repo \u003C/span>\u003Cspan style=\"color:#79B8FF\">-name\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"README.md\"\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -exec\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> cat\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> {}\u003C/span>\u003Cspan style=\"color:#79B8FF\"> \\;\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#F97583\">done\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Analyze documentation across repositories, spawn subagents to: 1) ensure consistency in setup instructions, 2) identify gaps in cross-service documentation, 3) recommend unified documentation strategy\"\u003C/span>\u003C/span>\u003C/code>\u003C/pre>",{"headings":820,"localImagePaths":833,"remoteImagePaths":834,"frontmatter":835,"imagePaths":836},[821,824,827,830],{"depth":22,"slug":822,"text":823},"documentation-with-amp","Documentation with Amp",{"depth":25,"slug":825,"text":826},"strategic-documentation-planning-with-the-oracle-tool","Strategic documentation planning with the oracle tool",{"depth":25,"slug":828,"text":829},"intelligent-documentation-pipelines","Intelligent documentation pipelines",{"depth":25,"slug":831,"text":832},"cross-repository-documentation-analysis","Cross-repository documentation analysis",[],[],{},[],"documentation/README.md","mcp/amp-mcp-setup-guide",{"id":838,"data":840,"body":841,"filePath":842,"digest":843,"rendered":844,"legacyId":887},{},"# Amp MCP Setup Guide\n\nThis guide shows you how to set up MCP (Model Context Protocol) servers with Amp in VS Code. MCP servers give Amp access to external tools like Playwright for browser automation, Lighthouse for performance testing, and services like Linear and Atlassian.\n\n## MCP vs CLI Tools\n\nMCP servers provide seamless integration with external services, but CLI tools are also available as an alternative option. Try both to see which works best for your workflow.\n\n**MCP servers provide:**\n- Simplified, guided access to services\n- Seamless integration with a service's API\n- Structured tool access that Amp can easily use\n\n**CLI tools are also available:**\n- **GitHub CLI**: Access to more workflows and features than GitHub MCP server. See [GitHub CLI with Amp guide](https://ampcode.com/patterns/github-cli) for detailed usage.\n- **Standard CLI tools**: You can use CLI tools directly: \"Use the GitHub CLI to create a pull request\"\n- **Internal tools**: Your organization's custom CLI tools work too\n\n## Prerequisites\n\n- VS Code with Amp extension installed OR Amp CLI installed\n- Node.js and npm installed (for npx commands)\n\n## Finding MCP Servers\n\n- Search online for \"[vendor name] MCP server\" to find official implementations\n- Check \u003Chttps://mcpmarket.com/> for available servers\n- **Important**: Only use vendor-supported MCP servers that are officially provided by the service vendors themselves.\n- **Note**: Some MCP servers require you to setup a local Docker/Podman server (e.g., [SonarQube MCP server](https://github.com/SonarSource/sonarqube-mcp-server)). They'll provide instructions on what to populate in the Command or URL fields.\n\n## Setup Steps\n\n### 1. Access VS Code Settings\n\nOpen VS Code and go to **Settings** → **Extensions** → **Amp** → **MCP Servers**\n\n![VS Code MCP Settings](/images/amp-mcp-vscode-settings.png)\n\n### 2. Add MCP Servers\n\nClick **`Add MCP Server`** and configure example servers:\n\n**Playwright** (browser automation):\n- Server Name: `playwright`\n- Command or URL: `npx`\n- Arguments: `@playwright/mcp@latest`\n\n**Lighthouse** (performance testing):\n- Server Name: `lighthouse`\n- Command or URL: `npx`\n- Arguments: `@mcp-lighthouse/server@latest`\n\n**Atlassian** (Jira/Confluence):\n- Server Name: `atlassian`\n- Command or URL: `npx`\n- Arguments: `@atlassian/mcp@latest`\n\n**Linear** (issue tracking):\n- Server Name: `linear`\n- Command or URL: `npx`\n- Arguments: `@linear/mcp@latest`\n\n![MCP Server Configuration](/images/amp-mcp-server-configuration.png)\n\n### 3. Configure Tool Access\n\nAfter adding servers, you'll see available tools listed. Click on individual tools to disable ones you don't want (e.g., if you don't want Linear to create new issues, uncheck `create_issue`).\n\n![MCP Tool Access Configuration](/images/amp-mcp-tool-access.png)\n\n### 4. Alternative: CLI Configuration\n\nYou can also configure MCP servers directly in the config file:\n\n- **Windows**: `%APPDATA%\\amp\\settings.json`\n- **macOS**: `~/.config/amp/settings.json`\n- **Linux**: `~/.config/amp/settings.json`\n\nExample `settings.json` configuration:\n\n```json\n{\n  \"amp.mcpServers\": {\n    \"playwright\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"@playwright/mcp@latest\"\n      ]\n    },\n    \"Lighthouse\": {\n      \"command\": \"lighthouse-mcp\",\n      \"env\": {}\n    },\n    \"linear\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"mcp-remote\",\n        \"https://mcp.linear.app/sse\"\n      ],\n      \"disabled\": false\n    }, \n    \"jira\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"mcp-remote\",\n        \"https://mcp.jira.com/sse\"\n      ],\n      \"disabled\": false\n    }\n  }\n}\n```\n\nMore info at [https://ampcode.com/manual#core-settings](https://ampcode.com/manual#core-settings)\n\n## Testing the Integration\n\nTo verify MCP tools work:\n\nAsk Amp to use one of the new MCP tools, to test the Playwright MCP, ask Amp to do the following;\n1. Open a web page in your browser\n2. Ask Amp: \"Use Playwright to take a screenshot of \u003Chttps://example.com>\"\n3. Or: \"Run a Lighthouse audit on this website and show me the performance score\"\n\nAmp will automatically use the configured MCP tools. Be explicit in your prompts about which tools to use. \n\n## Best Practices & Troubleshooting\n\n### Context Management\n- Don't enable all tools at once - start slow and add only the tools that you know will be useful for your workflow. \n- Use specific prompts like \"Use Linear to create an issue\" rather than assuming Amp will know when you ask it to create an issue, to do so in Linear. \n\n\n\n### Troubleshooting\n- If MCP servers aren't working, first try running the command manually in terminal (e.g., `npx @atlassian/mcp@latest`) - this will prompt you to log in if needed\n- After manual setup, retry adding the MCP server in VS Code\n- Restart VS Code and Amp CLI after making changes","src/content/guides/mcp/amp-mcp-setup-guide.md","d42c3ce9666ff9be",{"html":845,"metadata":846},"\u003Ch1 id=\"amp-mcp-setup-guide\">Amp MCP Setup Guide\u003C/h1>\n\u003Cp>This guide shows you how to set up MCP (Model Context Protocol) servers with Amp in VS Code. MCP servers give Amp access to external tools like Playwright for browser automation, Lighthouse for performance testing, and services like Linear and Atlassian.\u003C/p>\n\u003Ch2 id=\"mcp-vs-cli-tools\">MCP vs CLI Tools\u003C/h2>\n\u003Cp>MCP servers provide seamless integration with external services, but CLI tools are also available as an alternative option. Try both to see which works best for your workflow.\u003C/p>\n\u003Cp>\u003Cstrong>MCP servers provide:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>Simplified, guided access to services\u003C/li>\n\u003Cli>Seamless integration with a service’s API\u003C/li>\n\u003Cli>Structured tool access that Amp can easily use\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>CLI tools are also available:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>GitHub CLI\u003C/strong>: Access to more workflows and features than GitHub MCP server. See \u003Ca href=\"https://ampcode.com/patterns/github-cli\">GitHub CLI with Amp guide\u003C/a> for detailed usage.\u003C/li>\n\u003Cli>\u003Cstrong>Standard CLI tools\u003C/strong>: You can use CLI tools directly: “Use the GitHub CLI to create a pull request”\u003C/li>\n\u003Cli>\u003Cstrong>Internal tools\u003C/strong>: Your organization’s custom CLI tools work too\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"prerequisites\">Prerequisites\u003C/h2>\n\u003Cul>\n\u003Cli>VS Code with Amp extension installed OR Amp CLI installed\u003C/li>\n\u003Cli>Node.js and npm installed (for npx commands)\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"finding-mcp-servers\">Finding MCP Servers\u003C/h2>\n\u003Cul>\n\u003Cli>Search online for “[vendor name] MCP server” to find official implementations\u003C/li>\n\u003Cli>Check \u003Ca href=\"https://mcpmarket.com/\">https://mcpmarket.com/\u003C/a> for available servers\u003C/li>\n\u003Cli>\u003Cstrong>Important\u003C/strong>: Only use vendor-supported MCP servers that are officially provided by the service vendors themselves.\u003C/li>\n\u003Cli>\u003Cstrong>Note\u003C/strong>: Some MCP servers require you to setup a local Docker/Podman server (e.g., \u003Ca href=\"https://github.com/SonarSource/sonarqube-mcp-server\">SonarQube MCP server\u003C/a>). They’ll provide instructions on what to populate in the Command or URL fields.\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"setup-steps\">Setup Steps\u003C/h2>\n\u003Ch3 id=\"1-access-vs-code-settings\">1. Access VS Code Settings\u003C/h3>\n\u003Cp>Open VS Code and go to \u003Cstrong>Settings\u003C/strong> → \u003Cstrong>Extensions\u003C/strong> → \u003Cstrong>Amp\u003C/strong> → \u003Cstrong>MCP Servers\u003C/strong>\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/amp-mcp-vscode-settings.png\" alt=\"VS Code MCP Settings\">\u003C/p>\n\u003Ch3 id=\"2-add-mcp-servers\">2. Add MCP Servers\u003C/h3>\n\u003Cp>Click \u003Cstrong>\u003Ccode>Add MCP Server\u003C/code>\u003C/strong> and configure example servers:\u003C/p>\n\u003Cp>\u003Cstrong>Playwright\u003C/strong> (browser automation):\u003C/p>\n\u003Cul>\n\u003Cli>Server Name: \u003Ccode>playwright\u003C/code>\u003C/li>\n\u003Cli>Command or URL: \u003Ccode>npx\u003C/code>\u003C/li>\n\u003Cli>Arguments: \u003Ccode>@playwright/mcp@latest\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>Lighthouse\u003C/strong> (performance testing):\u003C/p>\n\u003Cul>\n\u003Cli>Server Name: \u003Ccode>lighthouse\u003C/code>\u003C/li>\n\u003Cli>Command or URL: \u003Ccode>npx\u003C/code>\u003C/li>\n\u003Cli>Arguments: \u003Ccode>@mcp-lighthouse/server@latest\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>Atlassian\u003C/strong> (Jira/Confluence):\u003C/p>\n\u003Cul>\n\u003Cli>Server Name: \u003Ccode>atlassian\u003C/code>\u003C/li>\n\u003Cli>Command or URL: \u003Ccode>npx\u003C/code>\u003C/li>\n\u003Cli>Arguments: \u003Ccode>@atlassian/mcp@latest\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>Linear\u003C/strong> (issue tracking):\u003C/p>\n\u003Cul>\n\u003Cli>Server Name: \u003Ccode>linear\u003C/code>\u003C/li>\n\u003Cli>Command or URL: \u003Ccode>npx\u003C/code>\u003C/li>\n\u003Cli>Arguments: \u003Ccode>@linear/mcp@latest\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cimg src=\"/images/amp-mcp-server-configuration.png\" alt=\"MCP Server Configuration\">\u003C/p>\n\u003Ch3 id=\"3-configure-tool-access\">3. Configure Tool Access\u003C/h3>\n\u003Cp>After adding servers, you’ll see available tools listed. Click on individual tools to disable ones you don’t want (e.g., if you don’t want Linear to create new issues, uncheck \u003Ccode>create_issue\u003C/code>).\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/amp-mcp-tool-access.png\" alt=\"MCP Tool Access Configuration\">\u003C/p>\n\u003Ch3 id=\"4-alternative-cli-configuration\">4. Alternative: CLI Configuration\u003C/h3>\n\u003Cp>You can also configure MCP servers directly in the config file:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Windows\u003C/strong>: \u003Ccode>%APPDATA%\\amp\\settings.json\u003C/code>\u003C/li>\n\u003Cli>\u003Cstrong>macOS\u003C/strong>: \u003Ccode>~/.config/amp/settings.json\u003C/code>\u003C/li>\n\u003Cli>\u003Cstrong>Linux\u003C/strong>: \u003Ccode>~/.config/amp/settings.json\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Cp>Example \u003Ccode>settings.json\u003C/code> configuration:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"json\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"amp.mcpServers\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"playwright\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      \"command\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"npx\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      \"args\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        \"@playwright/mcp@latest\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      ]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"Lighthouse\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      \"command\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"lighthouse-mcp\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      \"env\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"linear\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      \"command\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"npx\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      \"args\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        \"-y\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        \"mcp-remote\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        \"https://mcp.linear.app/sse\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      ],\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      \"disabled\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">false\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }, \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"jira\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      \"command\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"npx\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      \"args\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        \"-y\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        \"mcp-remote\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        \"https://mcp.jira.com/sse\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      ],\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      \"disabled\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">false\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>More info at \u003Ca href=\"https://ampcode.com/manual#core-settings\">https://ampcode.com/manual#core-settings\u003C/a>\u003C/p>\n\u003Ch2 id=\"testing-the-integration\">Testing the Integration\u003C/h2>\n\u003Cp>To verify MCP tools work:\u003C/p>\n\u003Cp>Ask Amp to use one of the new MCP tools, to test the Playwright MCP, ask Amp to do the following;\u003C/p>\n\u003Col>\n\u003Cli>Open a web page in your browser\u003C/li>\n\u003Cli>Ask Amp: “Use Playwright to take a screenshot of \u003Ca href=\"https://example.com\">https://example.com\u003C/a>”\u003C/li>\n\u003Cli>Or: “Run a Lighthouse audit on this website and show me the performance score”\u003C/li>\n\u003C/ol>\n\u003Cp>Amp will automatically use the configured MCP tools. Be explicit in your prompts about which tools to use.\u003C/p>\n\u003Ch2 id=\"best-practices--troubleshooting\">Best Practices &#x26; Troubleshooting\u003C/h2>\n\u003Ch3 id=\"context-management\">Context Management\u003C/h3>\n\u003Cul>\n\u003Cli>Don’t enable all tools at once - start slow and add only the tools that you know will be useful for your workflow.\u003C/li>\n\u003Cli>Use specific prompts like “Use Linear to create an issue” rather than assuming Amp will know when you ask it to create an issue, to do so in Linear.\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"troubleshooting\">Troubleshooting\u003C/h3>\n\u003Cul>\n\u003Cli>If MCP servers aren’t working, first try running the command manually in terminal (e.g., \u003Ccode>npx @atlassian/mcp@latest\u003C/code>) - this will prompt you to log in if needed\u003C/li>\n\u003Cli>After manual setup, retry adding the MCP server in VS Code\u003C/li>\n\u003Cli>Restart VS Code and Amp CLI after making changes\u003C/li>\n\u003C/ul>",{"headings":847,"localImagePaths":883,"remoteImagePaths":884,"frontmatter":885,"imagePaths":886},[848,851,854,855,858,861,864,867,870,873,876,879,882],{"depth":22,"slug":849,"text":850},"amp-mcp-setup-guide","Amp MCP Setup Guide",{"depth":25,"slug":852,"text":853},"mcp-vs-cli-tools","MCP vs CLI Tools",{"depth":25,"slug":621,"text":622},{"depth":25,"slug":856,"text":857},"finding-mcp-servers","Finding MCP Servers",{"depth":25,"slug":859,"text":860},"setup-steps","Setup Steps",{"depth":32,"slug":862,"text":863},"1-access-vs-code-settings","1. Access VS Code Settings",{"depth":32,"slug":865,"text":866},"2-add-mcp-servers","2. Add MCP Servers",{"depth":32,"slug":868,"text":869},"3-configure-tool-access","3. Configure Tool Access",{"depth":32,"slug":871,"text":872},"4-alternative-cli-configuration","4. Alternative: CLI Configuration",{"depth":25,"slug":874,"text":875},"testing-the-integration","Testing the Integration",{"depth":25,"slug":877,"text":878},"best-practices--troubleshooting","Best Practices & Troubleshooting",{"depth":32,"slug":880,"text":881},"context-management","Context Management",{"depth":32,"slug":549,"text":550},[],[],{},[],"mcp/amp-mcp-setup-guide.md","mcp/data-dog-amp-setup-guide",{"id":888,"data":890,"body":891,"filePath":892,"digest":893,"rendered":894,"legacyId":947},{},"# Datadog MCP Setup Guide\n\nThis guide shows you how to set up the Datadog MCP (Model Context Protocol) server with Amp for monitoring and observability. The Datadog MCP server provides access to APM, metrics, logs, and other Datadog services.\n\n## Use Case: Comprehensive APM Issue Investigation\n\nOnce configured, you can leverage Amp with Datadog MCP to perform deep investigations of production issues. Amp can automatically fetch APM data, analyze patterns with the Oracle, and investigate your local codebase to provide comprehensive root cause analysis and resolution recommendations.\n\n\n### Amp / Datadog sequence diagram \n\nYou can have Amp call other tools such as git or even put it's findings in Jira or confluence if you want to automate this further. \n\n```mermaid\nsequenceDiagram\n    participant User\n    participant Amp\n    participant DataDog\n    participant Amp Oracle\n    participant GitRepo as Git Repo/Local\n\n    User->>Amp: Submit Investigation Prompt\n    Amp->>DataDog: Fetch APM Issues via MCP\n    DataDog-->>Amp: Return Initial Data\n    Amp->>DataDog: Get Detailed Issue Data\n    DataDog-->>Amp: Return Stack Traces & Metrics\n    Amp->>Amp Oracle: Analyze Patterns & Impact\n    Amp Oracle-->>Amp: Return Assessment & Insights\n    Amp->>GitRepo: Pull Repository & Git History    \n    GitRepo-->>Amp: Return Code & Commit Data & RCA\n    Amp->>Amp: Investigate APM issues in Codebase & Git history\n    Amp->>User: Deliver Markdown Report with findings\n```\n\n### Example Investigation Prompt\n\n```text\nPlease fetch the latest 5 APM issues from DataDog and investigate each one thoroughly. For each issue:\n\nGather details using available DataDog MCP tools\nAnalyze root causes and impact and ask the oracle to review your findings\nProvide actionable recommendations for resolution\n\nOutput: Create a markdown report with your findings, including:\n\nIssue summaries\nInvestigation details\nRoot cause analysis\nRecommended fixes\nPriority/severity assessment\n\nUse all relevant DataDog MCP tools to gather comprehensive information for each issue.\n\nFor each of the project issues ask me to provide the git location for the repo locally, so you can explore the git history and the codebase to investigate the codebase deeply and find resolution as well.\n```\n\n> **⚠️ Active Development Notice**  \n> The Datadog MCP server is currently in active development and is subject to change. As of August 2025, you need to request your Datadog organization to be whitelisted to use the MCP server. Contact your Datadog representative or support to request access.\n\n## Prerequisites\n\n- VS Code with Amp extension installed OR Amp CLI installed\n- Datadog account with appropriate permissions\n- macOS, Linux, or Windows with WSL support\n- Organization whitelisting with Datadog (required as of Aug 2025)\n\n## Setup Steps\n\n### 1. Install the Datadog MCP CLI\n\nFor macOS and Linux, install the Datadog MCP CLI using the installation script:\n\n```bash\ncurl -sSL https://coterm.datadoghq.com/mcp-cli/install.sh | bash\n```\n\nThis will install the CLI to `~/.local/bin/datadog_mcp_cli`. The Windows version can be downloaded from the [official Datadog releases page](https://github.com/DataDog/datadog-mcp/releases).\n\n### 2. Authenticate with Datadog\n\nRun the authentication flow manually to set up OAuth:\n\n```bash\ndatadog_mcp_cli login\n```\n\nThe MCP server will automatically start the OAuth flow when started by a client, but running it manually allows you to select your Datadog site and avoids MCP client timeouts during initial setup.\n\n### 3. Configure Amp\n\n#### Option A: Using Amp CLI Configuration\n\nAdd the following configuration to your Amp settings file:\n\n- **Windows**: `%APPDATA%\\amp\\settings.json`\n- **macOS**: `~/.config/amp/settings.json`\n- **Linux**: `~/.config/amp/settings.json`\n\n```json\n{\n  \"amp.mcpServers\": {\n    \"datadog\": {\n      \"command\": \"/Users/yourname/.local/bin/datadog_mcp_cli\",\n      \"env\": {},\n      \"_target\": \"global\"\n    }\n  }\n}\n```\n\nReplace `/Users/yourname/` with your actual home directory path.\n\n#### Option B: Using VS Code Extension\n\n1. Open VS Code and go to **Settings** → **Extensions** → **Amp** → **MCP Servers**\n2. Click **Add MCP Server**\n3. Configure the server:\n   - **Server Name**: `datadog`\n   - **Command or URL**: `/Users/yourname/.local/bin/datadog_mcp_cli`\n   - **Arguments**: (leave empty)\n   - **Environment Variables**: (leave empty unless required)\n\nReplace `/Users/yourname/` with your actual home directory path.\n\n### 4. Verify the Setup\n\nRestart VS Code or your Amp CLI session after making the configuration changes. The Datadog MCP server should now be available.\n\n## Testing the Integration\n\nTo verify the Datadog MCP integration works, ask Amp questions like:\n\n- \"What are the most recent APM issues?\"\n- \"Show me the current error rate for my services\"\n- \"What are the latest log entries with errors?\"\n- \"Get metrics for CPU usage in the last hour\"\n- \"Show me active monitors that are alerting\"\n\nAmp will automatically use the Datadog MCP server to fetch this information from your Datadog account.\n\n## Available Capabilities\n\nThe Datadog MCP server provides access to:\n\n- **APM**: Application performance monitoring data, traces, and service metrics\n- **Logs**: Search and retrieve log data with filters\n- **Metrics**: Query time-series metrics data\n- **Monitors**: View and manage monitor status and alerts\n- **Events**: Access Datadog events and notifications\n- **Dashboards**: Retrieve dashboard information\n- **Incidents**: View incident management data\n\n## Best Practices\n\n- Be specific in your queries to get the most relevant data\n- Use time ranges when requesting historical data (e.g., \"in the last hour\", \"today\")\n- Specify service names or environments when available to narrow results\n- The MCP server respects your Datadog permissions - you'll only see data you have access to\n\n## Troubleshooting\n\n### Authentication Issues\n- If you encounter authentication problems, run `datadog_mcp_cli login` again to refresh your credentials\n- Verify your organization is whitelisted for MCP access\n\n### Connection Problems\n- Ensure the path to `datadog_mcp_cli` is correct in your configuration\n- Check that the binary has execute permissions: `chmod +x ~/.local/bin/datadog_mcp_cli`\n- Restart VS Code or Amp CLI after configuration changes\n\n### Data Access Issues\n- Verify you have the necessary permissions in your Datadog account\n- Check that your organization has the required Datadog features enabled (APM, Logs, etc.)\n- Contact your Datadog administrator if you're missing access to certain data sources\n\nFor additional help, consult the [Datadog MCP documentation](https://docs.datadoghq.com/mcp/) or contact Datadog support.","src/content/guides/mcp/data-dog-amp-setup-guide.md","804fcefc3a4777e6",{"html":895,"metadata":896},"\u003Ch1 id=\"datadog-mcp-setup-guide\">Datadog MCP Setup Guide\u003C/h1>\n\u003Cp>This guide shows you how to set up the Datadog MCP (Model Context Protocol) server with Amp for monitoring and observability. The Datadog MCP server provides access to APM, metrics, logs, and other Datadog services.\u003C/p>\n\u003Ch2 id=\"use-case-comprehensive-apm-issue-investigation\">Use Case: Comprehensive APM Issue Investigation\u003C/h2>\n\u003Cp>Once configured, you can leverage Amp with Datadog MCP to perform deep investigations of production issues. Amp can automatically fetch APM data, analyze patterns with the Oracle, and investigate your local codebase to provide comprehensive root cause analysis and resolution recommendations.\u003C/p>\n\u003Ch3 id=\"amp--datadog-sequence-diagram\">Amp / Datadog sequence diagram\u003C/h3>\n\u003Cp>You can have Amp call other tools such as git or even put it’s findings in Jira or confluence if you want to automate this further.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"mermaid\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">sequenceDiagram\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    participant User\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    participant Amp\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    participant DataDog\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    participant Amp Oracle\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    participant GitRepo as Git Repo/Local\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    User->>Amp: Submit Investigation Prompt\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    Amp->>DataDog: Fetch APM Issues via MCP\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    DataDog-->>Amp: Return Initial Data\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    Amp->>DataDog: Get Detailed Issue Data\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    DataDog-->>Amp: Return Stack Traces &#x26; Metrics\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    Amp->>Amp Oracle: Analyze Patterns &#x26; Impact\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    Amp Oracle-->>Amp: Return Assessment &#x26; Insights\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    Amp->>GitRepo: Pull Repository &#x26; Git History    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    GitRepo-->>Amp: Return Code &#x26; Commit Data &#x26; RCA\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    Amp->>Amp: Investigate APM issues in Codebase &#x26; Git history\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    Amp->>User: Deliver Markdown Report with findings\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"example-investigation-prompt\">Example Investigation Prompt\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"text\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>Please fetch the latest 5 APM issues from DataDog and investigate each one thoroughly. For each issue:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Gather details using available DataDog MCP tools\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Analyze root causes and impact and ask the oracle to review your findings\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Provide actionable recommendations for resolution\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Output: Create a markdown report with your findings, including:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Issue summaries\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Investigation details\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Root cause analysis\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Recommended fixes\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Priority/severity assessment\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Use all relevant DataDog MCP tools to gather comprehensive information for each issue.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>For each of the project issues ask me to provide the git location for the repo locally, so you can explore the git history and the codebase to investigate the codebase deeply and find resolution as well.\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cblockquote>\n\u003Cp>\u003Cstrong>⚠️ Active Development Notice\u003C/strong>\u003Cbr>\nThe Datadog MCP server is currently in active development and is subject to change. As of August 2025, you need to request your Datadog organization to be whitelisted to use the MCP server. Contact your Datadog representative or support to request access.\u003C/p>\n\u003C/blockquote>\n\u003Ch2 id=\"prerequisites\">Prerequisites\u003C/h2>\n\u003Cul>\n\u003Cli>VS Code with Amp extension installed OR Amp CLI installed\u003C/li>\n\u003Cli>Datadog account with appropriate permissions\u003C/li>\n\u003Cli>macOS, Linux, or Windows with WSL support\u003C/li>\n\u003Cli>Organization whitelisting with Datadog (required as of Aug 2025)\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"setup-steps\">Setup Steps\u003C/h2>\n\u003Ch3 id=\"1-install-the-datadog-mcp-cli\">1. Install the Datadog MCP CLI\u003C/h3>\n\u003Cp>For macOS and Linux, install the Datadog MCP CLI using the installation script:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">curl\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -sSL\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> https://coterm.datadoghq.com/mcp-cli/install.sh\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> bash\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This will install the CLI to \u003Ccode>~/.local/bin/datadog_mcp_cli\u003C/code>. The Windows version can be downloaded from the \u003Ca href=\"https://github.com/DataDog/datadog-mcp/releases\">official Datadog releases page\u003C/a>.\u003C/p>\n\u003Ch3 id=\"2-authenticate-with-datadog\">2. Authenticate with Datadog\u003C/h3>\n\u003Cp>Run the authentication flow manually to set up OAuth:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">datadog_mcp_cli\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> login\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The MCP server will automatically start the OAuth flow when started by a client, but running it manually allows you to select your Datadog site and avoids MCP client timeouts during initial setup.\u003C/p>\n\u003Ch3 id=\"3-configure-amp\">3. Configure Amp\u003C/h3>\n\u003Ch4 id=\"option-a-using-amp-cli-configuration\">Option A: Using Amp CLI Configuration\u003C/h4>\n\u003Cp>Add the following configuration to your Amp settings file:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Windows\u003C/strong>: \u003Ccode>%APPDATA%\\amp\\settings.json\u003C/code>\u003C/li>\n\u003Cli>\u003Cstrong>macOS\u003C/strong>: \u003Ccode>~/.config/amp/settings.json\u003C/code>\u003C/li>\n\u003Cli>\u003Cstrong>Linux\u003C/strong>: \u003Ccode>~/.config/amp/settings.json\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"json\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"amp.mcpServers\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"datadog\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      \"command\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"/Users/yourname/.local/bin/datadog_mcp_cli\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      \"env\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {},\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      \"_target\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"global\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Replace \u003Ccode>/Users/yourname/\u003C/code> with your actual home directory path.\u003C/p>\n\u003Ch4 id=\"option-b-using-vs-code-extension\">Option B: Using VS Code Extension\u003C/h4>\n\u003Col>\n\u003Cli>Open VS Code and go to \u003Cstrong>Settings\u003C/strong> → \u003Cstrong>Extensions\u003C/strong> → \u003Cstrong>Amp\u003C/strong> → \u003Cstrong>MCP Servers\u003C/strong>\u003C/li>\n\u003Cli>Click \u003Cstrong>Add MCP Server\u003C/strong>\u003C/li>\n\u003Cli>Configure the server:\n\u003Cul>\n\u003Cli>\u003Cstrong>Server Name\u003C/strong>: \u003Ccode>datadog\u003C/code>\u003C/li>\n\u003Cli>\u003Cstrong>Command or URL\u003C/strong>: \u003Ccode>/Users/yourname/.local/bin/datadog_mcp_cli\u003C/code>\u003C/li>\n\u003Cli>\u003Cstrong>Arguments\u003C/strong>: (leave empty)\u003C/li>\n\u003Cli>\u003Cstrong>Environment Variables\u003C/strong>: (leave empty unless required)\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ol>\n\u003Cp>Replace \u003Ccode>/Users/yourname/\u003C/code> with your actual home directory path.\u003C/p>\n\u003Ch3 id=\"4-verify-the-setup\">4. Verify the Setup\u003C/h3>\n\u003Cp>Restart VS Code or your Amp CLI session after making the configuration changes. The Datadog MCP server should now be available.\u003C/p>\n\u003Ch2 id=\"testing-the-integration\">Testing the Integration\u003C/h2>\n\u003Cp>To verify the Datadog MCP integration works, ask Amp questions like:\u003C/p>\n\u003Cul>\n\u003Cli>“What are the most recent APM issues?”\u003C/li>\n\u003Cli>“Show me the current error rate for my services”\u003C/li>\n\u003Cli>“What are the latest log entries with errors?”\u003C/li>\n\u003Cli>“Get metrics for CPU usage in the last hour”\u003C/li>\n\u003Cli>“Show me active monitors that are alerting”\u003C/li>\n\u003C/ul>\n\u003Cp>Amp will automatically use the Datadog MCP server to fetch this information from your Datadog account.\u003C/p>\n\u003Ch2 id=\"available-capabilities\">Available Capabilities\u003C/h2>\n\u003Cp>The Datadog MCP server provides access to:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>APM\u003C/strong>: Application performance monitoring data, traces, and service metrics\u003C/li>\n\u003Cli>\u003Cstrong>Logs\u003C/strong>: Search and retrieve log data with filters\u003C/li>\n\u003Cli>\u003Cstrong>Metrics\u003C/strong>: Query time-series metrics data\u003C/li>\n\u003Cli>\u003Cstrong>Monitors\u003C/strong>: View and manage monitor status and alerts\u003C/li>\n\u003Cli>\u003Cstrong>Events\u003C/strong>: Access Datadog events and notifications\u003C/li>\n\u003Cli>\u003Cstrong>Dashboards\u003C/strong>: Retrieve dashboard information\u003C/li>\n\u003Cli>\u003Cstrong>Incidents\u003C/strong>: View incident management data\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"best-practices\">Best Practices\u003C/h2>\n\u003Cul>\n\u003Cli>Be specific in your queries to get the most relevant data\u003C/li>\n\u003Cli>Use time ranges when requesting historical data (e.g., “in the last hour”, “today”)\u003C/li>\n\u003Cli>Specify service names or environments when available to narrow results\u003C/li>\n\u003Cli>The MCP server respects your Datadog permissions - you’ll only see data you have access to\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"troubleshooting\">Troubleshooting\u003C/h2>\n\u003Ch3 id=\"authentication-issues\">Authentication Issues\u003C/h3>\n\u003Cul>\n\u003Cli>If you encounter authentication problems, run \u003Ccode>datadog_mcp_cli login\u003C/code> again to refresh your credentials\u003C/li>\n\u003Cli>Verify your organization is whitelisted for MCP access\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"connection-problems\">Connection Problems\u003C/h3>\n\u003Cul>\n\u003Cli>Ensure the path to \u003Ccode>datadog_mcp_cli\u003C/code> is correct in your configuration\u003C/li>\n\u003Cli>Check that the binary has execute permissions: \u003Ccode>chmod +x ~/.local/bin/datadog_mcp_cli\u003C/code>\u003C/li>\n\u003Cli>Restart VS Code or Amp CLI after configuration changes\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"data-access-issues\">Data Access Issues\u003C/h3>\n\u003Cul>\n\u003Cli>Verify you have the necessary permissions in your Datadog account\u003C/li>\n\u003Cli>Check that your organization has the required Datadog features enabled (APM, Logs, etc.)\u003C/li>\n\u003Cli>Contact your Datadog administrator if you’re missing access to certain data sources\u003C/li>\n\u003C/ul>\n\u003Cp>For additional help, consult the \u003Ca href=\"https://docs.datadoghq.com/mcp/\">Datadog MCP documentation\u003C/a> or contact Datadog support.\u003C/p>",{"headings":897,"localImagePaths":943,"remoteImagePaths":944,"frontmatter":945,"imagePaths":946},[898,901,904,907,910,911,912,915,918,921,924,927,930,931,934,935,936,937,940],{"depth":22,"slug":899,"text":900},"datadog-mcp-setup-guide","Datadog MCP Setup Guide",{"depth":25,"slug":902,"text":903},"use-case-comprehensive-apm-issue-investigation","Use Case: Comprehensive APM Issue Investigation",{"depth":32,"slug":905,"text":906},"amp--datadog-sequence-diagram","Amp / Datadog sequence diagram",{"depth":32,"slug":908,"text":909},"example-investigation-prompt","Example Investigation Prompt",{"depth":25,"slug":621,"text":622},{"depth":25,"slug":859,"text":860},{"depth":32,"slug":913,"text":914},"1-install-the-datadog-mcp-cli","1. Install the Datadog MCP CLI",{"depth":32,"slug":916,"text":917},"2-authenticate-with-datadog","2. Authenticate with Datadog",{"depth":32,"slug":919,"text":920},"3-configure-amp","3. Configure Amp",{"depth":324,"slug":922,"text":923},"option-a-using-amp-cli-configuration","Option A: Using Amp CLI Configuration",{"depth":324,"slug":925,"text":926},"option-b-using-vs-code-extension","Option B: Using VS Code Extension",{"depth":32,"slug":928,"text":929},"4-verify-the-setup","4. Verify the Setup",{"depth":25,"slug":874,"text":875},{"depth":25,"slug":932,"text":933},"available-capabilities","Available Capabilities",{"depth":25,"slug":99,"text":100},{"depth":25,"slug":549,"text":550},{"depth":32,"slug":555,"text":556},{"depth":32,"slug":938,"text":939},"connection-problems","Connection Problems",{"depth":32,"slug":941,"text":942},"data-access-issues","Data Access Issues",[],[],{},[],"mcp/data-dog-amp-setup-guide.md","plan/readme",{"id":948,"data":950,"body":951,"filePath":952,"digest":953,"rendered":954,"legacyId":989},{},"# PLAN Phase - Analysis, Exploration & Strategy\n\nAnalyse, explore, and strategize your development approach with intelligent codebase understanding.\n\n## Overview\n\nThe PLAN phase focuses on understanding your codebase, analyzing requirements, and strategizing your development approach before implementation. This phase helps you make informed decisions about architecture, dependencies, and implementation strategies.\n\n## Workflows\n\n### Codebase Exploration & Understanding\n\nNavigate and understand complex codebases through intelligent analysis and relationship mapping.\n\n**Example Workflow:**\n> User: \"Locate where the AutoScroller logic is implemented in the codebase. Provide a summary of its functionality and key responsibilities. Then, explain how it interacts with or connects to the ViewUpdater component/module—describe the flow of data or control between them, including any shared state, events, or dependencies.\"\n\n**Generic Prompts:**\n- \"Find all components that use the authentication context and show their relationships\"\n- \"Locate the error handling logic and explain how errors bubble up\"\n- \"Map the data flow from API calls to UI components for the user dashboard\"\n\n### Search & Contextual Analysis Across Codebase\n\nUse intelligent search to understand code relationships and dependencies.\n\n**Example Workflow:**\n> User: \"Search for all database connection patterns in the codebase and analyze how connection pooling is implemented across different services\"\n\n**Generic Prompts:**\n- \"Find all instances of [specific pattern] and explain their usage context\"\n- \"Locate configuration management code and show how settings are propagated\"\n- \"Search for all API endpoints and group them by functionality\"\n\n### Git History Exploration & Feature Evolution\n\nUnderstand codebase evolution and decision-making context through version control analysis.\n\n**Example Workflow:**\n> User: \"Please identify who introduced the caching layer into the system and provide the reasoning or context behind its implementation (e.g., performance, scalability, cost). Additionally, list the services or modules that utilize this caching layer, and illustrate the relationships and data flow using a Mermaid diagram.\"\n\n**Generic Prompts:**\n- \"Show me the evolution of our API integration over the last 6 months\"\n- \"Find the commit that introduced TypeScript and summarise the migration strategy\"\n- \"Trace the bug fix history for the payment processing module\"\n\n### Learning and Discovery\n\nAccelerate learning through hands-on exploration of new technologies and patterns.\n\n**Example Workflow:**\n> User: \"I'm new to GraphQL. Show me how to implement a simple schema with queries and mutations\"\n\n**Generic Prompts:**\n- \"Learn [technology] by building a simple [project type] with best practices\"\n- \"Explore [framework/library] by creating a [specific functionality] example\"\n- \"Understand [concept] by implementing a practical example in this codebase\"\n\n### Feature Implementation Planning\n\nPlan feature implementation from concept to deployment strategy.\n\n**Example Workflow:**\n> User: \"Plan the implementation of a user notification system that supports email, SMS, and in-app notifications. Include architecture decisions, technology choices, and rollout strategy.\"\n\n**Generic Prompts:**\n- \"Plan the architecture for [feature] including database design and API endpoints\"\n- \"Create an implementation strategy for [requirement] with risk assessment\"\n- \"Design a rollout plan for [feature] with feature flags and gradual deployment\"\n\n## CLI Examples for PLAN Phase\n\n```bash\n# Architecture analysis\ngit log --oneline --since=\"3 months ago\" src/ | amp -x \"Analyze commit patterns and identify architectural evolution\"\n\n# Strategic planning with Oracle\namp -x \"Use Amp Oracle to create a comprehensive technical debt assessment and prioritization strategy\"\n\n# Dependency analysis\nfind . -name \"package.json\" -o -name \"*.lock\" | amp -x \"Analyze dependency patterns and identify potential upgrade paths\"\n```\n\n## Tips for Effective Planning\n\n- **Start Broad:** Begin with high-level architectural understanding before diving into specifics\n- **Document Assumptions:** Keep track of architectural decisions and their reasoning\n- **Use Diagrams:** Leverage Mermaid diagrams to visualize relationships and data flows\n- **Consider Non-Functional Requirements:** Think about performance, security, and scalability early\n- **Validate with Stakeholders:** Use Amp to generate clear explanations for technical decisions\n\n## Related Phases\n\n- **BUILD**: Use planning insights to guide implementation decisions\n- **DEPLOY**: Consider deployment complexity during planning\n- **SUPPORT**: Plan for maintainability and debugging from the start","src/content/guides/plan/README.md","fabf2ed40c2d1177",{"html":955,"metadata":956},"\u003Ch1 id=\"plan-phase---analysis-exploration--strategy\">PLAN Phase - Analysis, Exploration &#x26; Strategy\u003C/h1>\n\u003Cp>Analyse, explore, and strategize your development approach with intelligent codebase understanding.\u003C/p>\n\u003Ch2 id=\"overview\">Overview\u003C/h2>\n\u003Cp>The PLAN phase focuses on understanding your codebase, analyzing requirements, and strategizing your development approach before implementation. This phase helps you make informed decisions about architecture, dependencies, and implementation strategies.\u003C/p>\n\u003Ch2 id=\"workflows\">Workflows\u003C/h2>\n\u003Ch3 id=\"codebase-exploration--understanding\">Codebase Exploration &#x26; Understanding\u003C/h3>\n\u003Cp>Navigate and understand complex codebases through intelligent analysis and relationship mapping.\u003C/p>\n\u003Cp>\u003Cstrong>Example Workflow:\u003C/strong>\u003C/p>\n\u003Cblockquote>\n\u003Cp>User: “Locate where the AutoScroller logic is implemented in the codebase. Provide a summary of its functionality and key responsibilities. Then, explain how it interacts with or connects to the ViewUpdater component/module—describe the flow of data or control between them, including any shared state, events, or dependencies.”\u003C/p>\n\u003C/blockquote>\n\u003Cp>\u003Cstrong>Generic Prompts:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>“Find all components that use the authentication context and show their relationships”\u003C/li>\n\u003Cli>“Locate the error handling logic and explain how errors bubble up”\u003C/li>\n\u003Cli>“Map the data flow from API calls to UI components for the user dashboard”\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"search--contextual-analysis-across-codebase\">Search &#x26; Contextual Analysis Across Codebase\u003C/h3>\n\u003Cp>Use intelligent search to understand code relationships and dependencies.\u003C/p>\n\u003Cp>\u003Cstrong>Example Workflow:\u003C/strong>\u003C/p>\n\u003Cblockquote>\n\u003Cp>User: “Search for all database connection patterns in the codebase and analyze how connection pooling is implemented across different services”\u003C/p>\n\u003C/blockquote>\n\u003Cp>\u003Cstrong>Generic Prompts:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>“Find all instances of [specific pattern] and explain their usage context”\u003C/li>\n\u003Cli>“Locate configuration management code and show how settings are propagated”\u003C/li>\n\u003Cli>“Search for all API endpoints and group them by functionality”\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"git-history-exploration--feature-evolution\">Git History Exploration &#x26; Feature Evolution\u003C/h3>\n\u003Cp>Understand codebase evolution and decision-making context through version control analysis.\u003C/p>\n\u003Cp>\u003Cstrong>Example Workflow:\u003C/strong>\u003C/p>\n\u003Cblockquote>\n\u003Cp>User: “Please identify who introduced the caching layer into the system and provide the reasoning or context behind its implementation (e.g., performance, scalability, cost). Additionally, list the services or modules that utilize this caching layer, and illustrate the relationships and data flow using a Mermaid diagram.”\u003C/p>\n\u003C/blockquote>\n\u003Cp>\u003Cstrong>Generic Prompts:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>“Show me the evolution of our API integration over the last 6 months”\u003C/li>\n\u003Cli>“Find the commit that introduced TypeScript and summarise the migration strategy”\u003C/li>\n\u003Cli>“Trace the bug fix history for the payment processing module”\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"learning-and-discovery\">Learning and Discovery\u003C/h3>\n\u003Cp>Accelerate learning through hands-on exploration of new technologies and patterns.\u003C/p>\n\u003Cp>\u003Cstrong>Example Workflow:\u003C/strong>\u003C/p>\n\u003Cblockquote>\n\u003Cp>User: “I’m new to GraphQL. Show me how to implement a simple schema with queries and mutations”\u003C/p>\n\u003C/blockquote>\n\u003Cp>\u003Cstrong>Generic Prompts:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>“Learn [technology] by building a simple [project type] with best practices”\u003C/li>\n\u003Cli>“Explore [framework/library] by creating a [specific functionality] example”\u003C/li>\n\u003Cli>“Understand [concept] by implementing a practical example in this codebase”\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"feature-implementation-planning\">Feature Implementation Planning\u003C/h3>\n\u003Cp>Plan feature implementation from concept to deployment strategy.\u003C/p>\n\u003Cp>\u003Cstrong>Example Workflow:\u003C/strong>\u003C/p>\n\u003Cblockquote>\n\u003Cp>User: “Plan the implementation of a user notification system that supports email, SMS, and in-app notifications. Include architecture decisions, technology choices, and rollout strategy.”\u003C/p>\n\u003C/blockquote>\n\u003Cp>\u003Cstrong>Generic Prompts:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>“Plan the architecture for [feature] including database design and API endpoints”\u003C/li>\n\u003Cli>“Create an implementation strategy for [requirement] with risk assessment”\u003C/li>\n\u003Cli>“Design a rollout plan for [feature] with feature flags and gradual deployment”\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"cli-examples-for-plan-phase\">CLI Examples for PLAN Phase\u003C/h2>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Architecture analysis\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">git\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> log\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --oneline\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --since=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"3 months ago\"\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> src/\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Analyze commit patterns and identify architectural evolution\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Strategic planning with Oracle\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Use Amp Oracle to create a comprehensive technical debt assessment and prioritization strategy\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Dependency analysis\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">find\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> .\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -name\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"package.json\"\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -o\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -name\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"*.lock\"\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Analyze dependency patterns and identify potential upgrade paths\"\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"tips-for-effective-planning\">Tips for Effective Planning\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>Start Broad:\u003C/strong> Begin with high-level architectural understanding before diving into specifics\u003C/li>\n\u003Cli>\u003Cstrong>Document Assumptions:\u003C/strong> Keep track of architectural decisions and their reasoning\u003C/li>\n\u003Cli>\u003Cstrong>Use Diagrams:\u003C/strong> Leverage Mermaid diagrams to visualize relationships and data flows\u003C/li>\n\u003Cli>\u003Cstrong>Consider Non-Functional Requirements:\u003C/strong> Think about performance, security, and scalability early\u003C/li>\n\u003Cli>\u003Cstrong>Validate with Stakeholders:\u003C/strong> Use Amp to generate clear explanations for technical decisions\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"related-phases\">Related Phases\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>BUILD\u003C/strong>: Use planning insights to guide implementation decisions\u003C/li>\n\u003Cli>\u003Cstrong>DEPLOY\u003C/strong>: Consider deployment complexity during planning\u003C/li>\n\u003Cli>\u003Cstrong>SUPPORT\u003C/strong>: Plan for maintainability and debugging from the start\u003C/li>\n\u003C/ul>",{"headings":957,"localImagePaths":985,"remoteImagePaths":986,"frontmatter":987,"imagePaths":988},[958,961,962,963,966,969,972,975,978,981,984],{"depth":22,"slug":959,"text":960},"plan-phase---analysis-exploration--strategy","PLAN Phase - Analysis, Exploration & Strategy",{"depth":25,"slug":122,"text":123},{"depth":25,"slug":368,"text":369},{"depth":32,"slug":964,"text":965},"codebase-exploration--understanding","Codebase Exploration & Understanding",{"depth":32,"slug":967,"text":968},"search--contextual-analysis-across-codebase","Search & Contextual Analysis Across Codebase",{"depth":32,"slug":970,"text":971},"git-history-exploration--feature-evolution","Git History Exploration & Feature Evolution",{"depth":32,"slug":973,"text":974},"learning-and-discovery","Learning and Discovery",{"depth":32,"slug":976,"text":977},"feature-implementation-planning","Feature Implementation Planning",{"depth":25,"slug":979,"text":980},"cli-examples-for-plan-phase","CLI Examples for PLAN Phase",{"depth":25,"slug":982,"text":983},"tips-for-effective-planning","Tips for Effective Planning",{"depth":25,"slug":401,"text":402},[],[],{},[],"plan/README.md","support/readme",{"id":990,"data":992,"body":993,"filePath":994,"digest":995,"rendered":996,"legacyId":1068},{},"# SUPPORT Phase - Maintenance, Security & Collaboration\n\nMaintain, secure, and collaborate on your deployed applications with ongoing optimization.\n\n## Overview\n\nThe SUPPORT phase focuses on maintaining production applications, ensuring security, facilitating team collaboration, and continuously optimizing performance and user experience.\n\n## Workflows\n\n### Documentation Generation\n\nAutomate the creation and maintenance of comprehensive documentation.\n\n**Example Workflow:**\n> User: \"Generate API documentation for all Express routes in src/routes/ and create comprehensive user guides based on the current application features\"\n\n**Generic Prompts:**\n- \"Analyze all components and generate a style guide with usage examples\"\n- \"Create deployment documentation including environment setup and troubleshooting\"\n- \"Generate changelog from git history with feature highlights and breaking changes\"\n\n### Security and Code Quality\n\nMaintain robust security posture and code quality standards.\n\n**Example Workflow:**\n> User: \"Scan for potential security vulnerabilities in our authentication code and provide a prioritized remediation plan\"\n\n**Generic Prompts:**\n- \"Audit dependencies for known vulnerabilities and suggest upgrade paths\"\n- \"Review code for common security anti-patterns and provide fixes\"\n- \"Analyze authentication flows for potential security weaknesses\"\n\n### Batch File Operations\n\nProcess and manage large sets of files efficiently.\n\n**Example Workflow:**\n> User: \"Analyze all log files from the last week and create a summary report of error patterns and performance issues\"\n\n**Generic Prompts:**\n- \"Process all configuration files and ensure consistency across environments\"\n- \"Organize project assets by type and remove unused files\"\n- \"Update copyright headers across all source files\"\n\n### Development Environment Debugging\n\nTroubleshoot and optimize development environments.\n\n**Example Workflow:**\n> User: \"Analyze package.json and package-lock.json to identify version conflicts and dependency issues\"\n\n**Generic Prompts:**\n- \"Diagnose build performance issues and suggest optimizations\"\n- \"Troubleshoot Docker containerization problems\"\n- \"Resolve IDE configuration conflicts across team members\"\n\n### Review & Cleanup Changes\n\nAutomated code review with actionable improvement suggestions.\n\n**Example Workflow:**\n> User: \"Run git diff on the current branch and identify any debug code, temporary logs, commented-out blocks, or other potentially unsafe or non-production-ready code (e.g., console.log, debugger, test stubs). Clean up or flag these issues to ensure the code is production-ready. Focus on quality, clarity, and security.\"\n\n**Generic Prompts:**\n- \"Review my last 3 commits and suggest performance improvements\"\n- \"Find all TODO comments and prioritise them by impact\"\n- \"Scan for security vulnerabilities in authentication code\"\n\n### Thread History & Contextual Documentation\n\nLeverage Amp's thread history to provide rich context in documentation and team communications.\n\n**Example Workflow:**\n> User: \"Reference our previous discussion thread about the auth middleware refactor and include the key decisions in this PR description\"\n\n**Generic Prompts:**\n- \"Link the database migration thread in this PR to show our rollback strategy discussion\"\n- \"Include the performance optimization thread URL in the JIRA ticket for context\"\n- \"Add the API versioning discussion thread to the Confluence documentation\"\n\n### Team Knowledge Sharing & Collaboration\n\nFacilitate effective team collaboration and knowledge transfer.\n\n**Example Workflow:**\n> User: \"Create a team knowledge base entry documenting our React debugging strategies based on recent thread discussions\"\n\n**Generic Prompts:**\n- \"Generate onboarding documentation for new team members\"\n- \"Create troubleshooting guides based on common support tickets\"\n- \"Document architectural decisions and their rationale\"\n\n### Cross-Platform Thread Sharing\n\nShare Amp conversation threads across team collaboration tools.\n\n**Example Workflow:**\n> User: \"Share this React debugging thread in our #frontend Slack channel and create a Linear ticket referencing it\"\n\n**Generic Prompts:**\n- \"Post this database optimization thread to the team Slack with a summary\"\n- \"Create a JIRA ticket linking this AWS deployment troubleshooting thread\"\n- \"Add this API integration thread to our Confluence knowledge base with proper tagging\"\n\n## CLI Examples for SUPPORT Phase\n\n```bash\n# Security audit with intelligent vulnerability assessment\namp -x \"Scan for potential security vulnerabilities in our authentication code\"\n\n# Strategic security planning with Oracle\nnpm audit --json | amp -x \"Use Amp Oracle to create comprehensive security improvement strategy with prioritized action plan\"\n\n# Content processing with intelligent pattern recognition\ncat *.log | amp -x \"Analyze these logs for error patterns and create a summary report\"\n\n# Strategic log analysis planning with Oracle\nfind . -name \"*.log\" -mtime -7 | amp -x \"Use Amp Oracle to create comprehensive log analysis strategy including pattern recognition, alerting, and monitoring improvements\"\n\n# Intelligent file organization with automated cleanup\nfind . -type f -size +100M | amp -x \"Analyze large files and spawn subagents to: 1) identify archival candidates, 2) suggest compression opportunities, 3) validate file dependencies before cleanup\" | amp -x \"Create automated cleanup script with safety checks\"\n\n# API documentation with comprehensive analysis\namp -x \"Analyze all Express routes in src/routes/ and generate OpenAPI documentation\"\n\n# Cross-repository documentation analysis\nfor repo in frontend backend mobile; do echo \"=== $repo ===\" && find $repo -name \"README.md\" -exec cat {} \\;; done | amp -x \"Analyze documentation across repositories, spawn subagents to: 1) ensure consistency in setup instructions, 2) identify gaps in cross-service documentation, 3) recommend unified documentation strategy\"\n```\n\n## Maintenance Best Practices\n\n### Monitoring and Alerting\n- **Application Performance**: Monitor response times, error rates, and resource usage\n- **Business Metrics**: Track user engagement and conversion rates\n- **Infrastructure Health**: Monitor server resources and service availability\n- **Security Events**: Alert on suspicious activities and potential breaches\n\n### Performance Optimization\n- **Code Profiling**: Regular performance analysis and optimization\n- **Database Tuning**: Query optimization and index management\n- **Caching Strategies**: Implement and maintain effective caching layers\n- **Resource Scaling**: Monitor and adjust resource allocation\n\n### Security Maintenance\n- **Dependency Updates**: Regular security patches and updates\n- **Access Control**: Review and update user permissions\n- **Audit Trails**: Maintain comprehensive logging for security analysis\n- **Vulnerability Scanning**: Regular security assessments\n\n## Knowledge Management\n\n### Documentation Strategy\n- **Living Documentation**: Keep documentation current with code changes\n- **Searchable Knowledge Base**: Organize information for easy retrieval\n- **Video Tutorials**: Create visual guides for complex processes\n- **Decision Records**: Document architectural and technical decisions\n\n### Team Collaboration\n- **Code Reviews**: Systematic review processes with learning opportunities\n- **Pair Programming**: Knowledge sharing through collaborative development\n- **Tech Talks**: Regular sharing of new technologies and techniques\n- **Retrospectives**: Regular process improvement meetings\n\n## Incident Response\n\n### Preparation\n- **Runbooks**: Documented procedures for common issues\n- **Contact Lists**: Up-to-date emergency contact information\n- **Access Controls**: Proper permissions for incident responders\n- **Tools Access**: Ensure responders have necessary tool access\n\n### Response Process\n- **Issue Detection**: Automated monitoring and alerting\n- **Impact Assessment**: Quickly determine severity and scope\n- **Communication**: Clear status updates to stakeholders\n- **Resolution**: Systematic troubleshooting and fixes\n- **Post-Mortem**: Analysis and improvement planning\n\n## Tips for Effective Support\n\n- **Proactive Monitoring**: Catch issues before they impact users\n- **Clear Documentation**: Make troubleshooting information easily accessible\n- **Regular Maintenance**: Schedule routine maintenance and updates\n- **Team Knowledge Sharing**: Ensure knowledge isn't siloed\n- **Continuous Improvement**: Learn from incidents and optimize processes\n\n## Related Phases\n\n- **PLAN**: Use support insights to inform future architectural decisions\n- **BUILD**: Incorporate maintainability requirements into development\n- **DEPLOY**: Ensure deployment processes support maintenance needs","src/content/guides/support/README.md","02109a8168f2cc4f",{"html":997,"metadata":998},"\u003Ch1 id=\"support-phase---maintenance-security--collaboration\">SUPPORT Phase - Maintenance, Security &#x26; Collaboration\u003C/h1>\n\u003Cp>Maintain, secure, and collaborate on your deployed applications with ongoing optimization.\u003C/p>\n\u003Ch2 id=\"overview\">Overview\u003C/h2>\n\u003Cp>The SUPPORT phase focuses on maintaining production applications, ensuring security, facilitating team collaboration, and continuously optimizing performance and user experience.\u003C/p>\n\u003Ch2 id=\"workflows\">Workflows\u003C/h2>\n\u003Ch3 id=\"documentation-generation\">Documentation Generation\u003C/h3>\n\u003Cp>Automate the creation and maintenance of comprehensive documentation.\u003C/p>\n\u003Cp>\u003Cstrong>Example Workflow:\u003C/strong>\u003C/p>\n\u003Cblockquote>\n\u003Cp>User: “Generate API documentation for all Express routes in src/routes/ and create comprehensive user guides based on the current application features”\u003C/p>\n\u003C/blockquote>\n\u003Cp>\u003Cstrong>Generic Prompts:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>“Analyze all components and generate a style guide with usage examples”\u003C/li>\n\u003Cli>“Create deployment documentation including environment setup and troubleshooting”\u003C/li>\n\u003Cli>“Generate changelog from git history with feature highlights and breaking changes”\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"security-and-code-quality\">Security and Code Quality\u003C/h3>\n\u003Cp>Maintain robust security posture and code quality standards.\u003C/p>\n\u003Cp>\u003Cstrong>Example Workflow:\u003C/strong>\u003C/p>\n\u003Cblockquote>\n\u003Cp>User: “Scan for potential security vulnerabilities in our authentication code and provide a prioritized remediation plan”\u003C/p>\n\u003C/blockquote>\n\u003Cp>\u003Cstrong>Generic Prompts:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>“Audit dependencies for known vulnerabilities and suggest upgrade paths”\u003C/li>\n\u003Cli>“Review code for common security anti-patterns and provide fixes”\u003C/li>\n\u003Cli>“Analyze authentication flows for potential security weaknesses”\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"batch-file-operations\">Batch File Operations\u003C/h3>\n\u003Cp>Process and manage large sets of files efficiently.\u003C/p>\n\u003Cp>\u003Cstrong>Example Workflow:\u003C/strong>\u003C/p>\n\u003Cblockquote>\n\u003Cp>User: “Analyze all log files from the last week and create a summary report of error patterns and performance issues”\u003C/p>\n\u003C/blockquote>\n\u003Cp>\u003Cstrong>Generic Prompts:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>“Process all configuration files and ensure consistency across environments”\u003C/li>\n\u003Cli>“Organize project assets by type and remove unused files”\u003C/li>\n\u003Cli>“Update copyright headers across all source files”\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"development-environment-debugging\">Development Environment Debugging\u003C/h3>\n\u003Cp>Troubleshoot and optimize development environments.\u003C/p>\n\u003Cp>\u003Cstrong>Example Workflow:\u003C/strong>\u003C/p>\n\u003Cblockquote>\n\u003Cp>User: “Analyze package.json and package-lock.json to identify version conflicts and dependency issues”\u003C/p>\n\u003C/blockquote>\n\u003Cp>\u003Cstrong>Generic Prompts:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>“Diagnose build performance issues and suggest optimizations”\u003C/li>\n\u003Cli>“Troubleshoot Docker containerization problems”\u003C/li>\n\u003Cli>“Resolve IDE configuration conflicts across team members”\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"review--cleanup-changes\">Review &#x26; Cleanup Changes\u003C/h3>\n\u003Cp>Automated code review with actionable improvement suggestions.\u003C/p>\n\u003Cp>\u003Cstrong>Example Workflow:\u003C/strong>\u003C/p>\n\u003Cblockquote>\n\u003Cp>User: “Run git diff on the current branch and identify any debug code, temporary logs, commented-out blocks, or other potentially unsafe or non-production-ready code (e.g., console.log, debugger, test stubs). Clean up or flag these issues to ensure the code is production-ready. Focus on quality, clarity, and security.”\u003C/p>\n\u003C/blockquote>\n\u003Cp>\u003Cstrong>Generic Prompts:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>“Review my last 3 commits and suggest performance improvements”\u003C/li>\n\u003Cli>“Find all TODO comments and prioritise them by impact”\u003C/li>\n\u003Cli>“Scan for security vulnerabilities in authentication code”\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"thread-history--contextual-documentation\">Thread History &#x26; Contextual Documentation\u003C/h3>\n\u003Cp>Leverage Amp’s thread history to provide rich context in documentation and team communications.\u003C/p>\n\u003Cp>\u003Cstrong>Example Workflow:\u003C/strong>\u003C/p>\n\u003Cblockquote>\n\u003Cp>User: “Reference our previous discussion thread about the auth middleware refactor and include the key decisions in this PR description”\u003C/p>\n\u003C/blockquote>\n\u003Cp>\u003Cstrong>Generic Prompts:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>“Link the database migration thread in this PR to show our rollback strategy discussion”\u003C/li>\n\u003Cli>“Include the performance optimization thread URL in the JIRA ticket for context”\u003C/li>\n\u003Cli>“Add the API versioning discussion thread to the Confluence documentation”\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"team-knowledge-sharing--collaboration\">Team Knowledge Sharing &#x26; Collaboration\u003C/h3>\n\u003Cp>Facilitate effective team collaboration and knowledge transfer.\u003C/p>\n\u003Cp>\u003Cstrong>Example Workflow:\u003C/strong>\u003C/p>\n\u003Cblockquote>\n\u003Cp>User: “Create a team knowledge base entry documenting our React debugging strategies based on recent thread discussions”\u003C/p>\n\u003C/blockquote>\n\u003Cp>\u003Cstrong>Generic Prompts:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>“Generate onboarding documentation for new team members”\u003C/li>\n\u003Cli>“Create troubleshooting guides based on common support tickets”\u003C/li>\n\u003Cli>“Document architectural decisions and their rationale”\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"cross-platform-thread-sharing\">Cross-Platform Thread Sharing\u003C/h3>\n\u003Cp>Share Amp conversation threads across team collaboration tools.\u003C/p>\n\u003Cp>\u003Cstrong>Example Workflow:\u003C/strong>\u003C/p>\n\u003Cblockquote>\n\u003Cp>User: “Share this React debugging thread in our #frontend Slack channel and create a Linear ticket referencing it”\u003C/p>\n\u003C/blockquote>\n\u003Cp>\u003Cstrong>Generic Prompts:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>“Post this database optimization thread to the team Slack with a summary”\u003C/li>\n\u003Cli>“Create a JIRA ticket linking this AWS deployment troubleshooting thread”\u003C/li>\n\u003Cli>“Add this API integration thread to our Confluence knowledge base with proper tagging”\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"cli-examples-for-support-phase\">CLI Examples for SUPPORT Phase\u003C/h2>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Security audit with intelligent vulnerability assessment\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Scan for potential security vulnerabilities in our authentication code\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Strategic security planning with Oracle\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">npm\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> audit\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --json\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Use Amp Oracle to create comprehensive security improvement strategy with prioritized action plan\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Content processing with intelligent pattern recognition\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">cat\u003C/span>\u003Cspan style=\"color:#79B8FF\"> *\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.log\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Analyze these logs for error patterns and create a summary report\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Strategic log analysis planning with Oracle\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">find\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> .\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -name\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"*.log\"\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -mtime\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -7\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Use Amp Oracle to create comprehensive log analysis strategy including pattern recognition, alerting, and monitoring improvements\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Intelligent file organization with automated cleanup\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">find\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> .\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -type\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> f\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -size\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> +100M\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Analyze large files and spawn subagents to: 1) identify archival candidates, 2) suggest compression opportunities, 3) validate file dependencies before cleanup\"\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Create automated cleanup script with safety checks\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># API documentation with comprehensive analysis\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Analyze all Express routes in src/routes/ and generate OpenAPI documentation\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Cross-repository documentation analysis\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> repo \u003C/span>\u003Cspan style=\"color:#F97583\">in\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> frontend\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> backend\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> mobile\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#F97583\">do\u003C/span>\u003Cspan style=\"color:#79B8FF\"> echo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"=== \u003C/span>\u003Cspan style=\"color:#E1E4E8\">$repo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> ===\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> &#x26;&#x26; \u003C/span>\u003Cspan style=\"color:#B392F0\">find\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $repo \u003C/span>\u003Cspan style=\"color:#79B8FF\">-name\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"README.md\"\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -exec\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> cat\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> {}\u003C/span>\u003Cspan style=\"color:#79B8FF\"> \\;\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#F97583\">done\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Analyze documentation across repositories, spawn subagents to: 1) ensure consistency in setup instructions, 2) identify gaps in cross-service documentation, 3) recommend unified documentation strategy\"\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"maintenance-best-practices\">Maintenance Best Practices\u003C/h2>\n\u003Ch3 id=\"monitoring-and-alerting\">Monitoring and Alerting\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Application Performance\u003C/strong>: Monitor response times, error rates, and resource usage\u003C/li>\n\u003Cli>\u003Cstrong>Business Metrics\u003C/strong>: Track user engagement and conversion rates\u003C/li>\n\u003Cli>\u003Cstrong>Infrastructure Health\u003C/strong>: Monitor server resources and service availability\u003C/li>\n\u003Cli>\u003Cstrong>Security Events\u003C/strong>: Alert on suspicious activities and potential breaches\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"performance-optimization\">Performance Optimization\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Code Profiling\u003C/strong>: Regular performance analysis and optimization\u003C/li>\n\u003Cli>\u003Cstrong>Database Tuning\u003C/strong>: Query optimization and index management\u003C/li>\n\u003Cli>\u003Cstrong>Caching Strategies\u003C/strong>: Implement and maintain effective caching layers\u003C/li>\n\u003Cli>\u003Cstrong>Resource Scaling\u003C/strong>: Monitor and adjust resource allocation\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"security-maintenance\">Security Maintenance\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Dependency Updates\u003C/strong>: Regular security patches and updates\u003C/li>\n\u003Cli>\u003Cstrong>Access Control\u003C/strong>: Review and update user permissions\u003C/li>\n\u003Cli>\u003Cstrong>Audit Trails\u003C/strong>: Maintain comprehensive logging for security analysis\u003C/li>\n\u003Cli>\u003Cstrong>Vulnerability Scanning\u003C/strong>: Regular security assessments\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"knowledge-management\">Knowledge Management\u003C/h2>\n\u003Ch3 id=\"documentation-strategy\">Documentation Strategy\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Living Documentation\u003C/strong>: Keep documentation current with code changes\u003C/li>\n\u003Cli>\u003Cstrong>Searchable Knowledge Base\u003C/strong>: Organize information for easy retrieval\u003C/li>\n\u003Cli>\u003Cstrong>Video Tutorials\u003C/strong>: Create visual guides for complex processes\u003C/li>\n\u003Cli>\u003Cstrong>Decision Records\u003C/strong>: Document architectural and technical decisions\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"team-collaboration\">Team Collaboration\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Code Reviews\u003C/strong>: Systematic review processes with learning opportunities\u003C/li>\n\u003Cli>\u003Cstrong>Pair Programming\u003C/strong>: Knowledge sharing through collaborative development\u003C/li>\n\u003Cli>\u003Cstrong>Tech Talks\u003C/strong>: Regular sharing of new technologies and techniques\u003C/li>\n\u003Cli>\u003Cstrong>Retrospectives\u003C/strong>: Regular process improvement meetings\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"incident-response\">Incident Response\u003C/h2>\n\u003Ch3 id=\"preparation\">Preparation\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Runbooks\u003C/strong>: Documented procedures for common issues\u003C/li>\n\u003Cli>\u003Cstrong>Contact Lists\u003C/strong>: Up-to-date emergency contact information\u003C/li>\n\u003Cli>\u003Cstrong>Access Controls\u003C/strong>: Proper permissions for incident responders\u003C/li>\n\u003Cli>\u003Cstrong>Tools Access\u003C/strong>: Ensure responders have necessary tool access\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"response-process\">Response Process\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Issue Detection\u003C/strong>: Automated monitoring and alerting\u003C/li>\n\u003Cli>\u003Cstrong>Impact Assessment\u003C/strong>: Quickly determine severity and scope\u003C/li>\n\u003Cli>\u003Cstrong>Communication\u003C/strong>: Clear status updates to stakeholders\u003C/li>\n\u003Cli>\u003Cstrong>Resolution\u003C/strong>: Systematic troubleshooting and fixes\u003C/li>\n\u003Cli>\u003Cstrong>Post-Mortem\u003C/strong>: Analysis and improvement planning\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"tips-for-effective-support\">Tips for Effective Support\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>Proactive Monitoring\u003C/strong>: Catch issues before they impact users\u003C/li>\n\u003Cli>\u003Cstrong>Clear Documentation\u003C/strong>: Make troubleshooting information easily accessible\u003C/li>\n\u003Cli>\u003Cstrong>Regular Maintenance\u003C/strong>: Schedule routine maintenance and updates\u003C/li>\n\u003Cli>\u003Cstrong>Team Knowledge Sharing\u003C/strong>: Ensure knowledge isn’t siloed\u003C/li>\n\u003Cli>\u003Cstrong>Continuous Improvement\u003C/strong>: Learn from incidents and optimize processes\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"related-phases\">Related Phases\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>PLAN\u003C/strong>: Use support insights to inform future architectural decisions\u003C/li>\n\u003Cli>\u003Cstrong>BUILD\u003C/strong>: Incorporate maintainability requirements into development\u003C/li>\n\u003Cli>\u003Cstrong>DEPLOY\u003C/strong>: Ensure deployment processes support maintenance needs\u003C/li>\n\u003C/ul>",{"headings":999,"localImagePaths":1064,"remoteImagePaths":1065,"frontmatter":1066,"imagePaths":1067},[1000,1003,1004,1005,1008,1011,1014,1017,1020,1023,1026,1029,1032,1035,1038,1041,1044,1047,1050,1051,1054,1057,1060,1063],{"depth":22,"slug":1001,"text":1002},"support-phase---maintenance-security--collaboration","SUPPORT Phase - Maintenance, Security & Collaboration",{"depth":25,"slug":122,"text":123},{"depth":25,"slug":368,"text":369},{"depth":32,"slug":1006,"text":1007},"documentation-generation","Documentation Generation",{"depth":32,"slug":1009,"text":1010},"security-and-code-quality","Security and Code Quality",{"depth":32,"slug":1012,"text":1013},"batch-file-operations","Batch File Operations",{"depth":32,"slug":1015,"text":1016},"development-environment-debugging","Development Environment Debugging",{"depth":32,"slug":1018,"text":1019},"review--cleanup-changes","Review & Cleanup Changes",{"depth":32,"slug":1021,"text":1022},"thread-history--contextual-documentation","Thread History & Contextual Documentation",{"depth":32,"slug":1024,"text":1025},"team-knowledge-sharing--collaboration","Team Knowledge Sharing & Collaboration",{"depth":32,"slug":1027,"text":1028},"cross-platform-thread-sharing","Cross-Platform Thread Sharing",{"depth":25,"slug":1030,"text":1031},"cli-examples-for-support-phase","CLI Examples for SUPPORT Phase",{"depth":25,"slug":1033,"text":1034},"maintenance-best-practices","Maintenance Best Practices",{"depth":32,"slug":1036,"text":1037},"monitoring-and-alerting","Monitoring and Alerting",{"depth":32,"slug":1039,"text":1040},"performance-optimization","Performance Optimization",{"depth":32,"slug":1042,"text":1043},"security-maintenance","Security Maintenance",{"depth":25,"slug":1045,"text":1046},"knowledge-management","Knowledge Management",{"depth":32,"slug":1048,"text":1049},"documentation-strategy","Documentation Strategy",{"depth":32,"slug":343,"text":344},{"depth":25,"slug":1052,"text":1053},"incident-response","Incident Response",{"depth":32,"slug":1055,"text":1056},"preparation","Preparation",{"depth":32,"slug":1058,"text":1059},"response-process","Response Process",{"depth":25,"slug":1061,"text":1062},"tips-for-effective-support","Tips for Effective Support",{"depth":25,"slug":401,"text":402},[],[],{},[],"support/README.md","tips/readme",{"id":1069,"data":1071,"body":1072,"filePath":1073,"digest":1074,"rendered":1075,"legacyId":1083},{},"The purpose of this doc is to document tips dropfeed into a Slack channel \n\n\u003Cdetails>\n\u003Csummary>Oracle Tip\u003C/summary>\n💡 Amp Coding Tip 1: Meet Oracle - Your New Code Review Partner\n\"Oracle\" - a powerful code analysis tool powered by OpenAI's o3 model that works alongside your main coding agent. Think of it as having a senior developer looking over your shoulder!\nWhen to use Oracle:\n  \n* Code reviews: ```\"Use the oracle to review the last commit's changes\"```\n* Debugging tricky issues: ```\"Help me fix this bug. Use the oracle as much as possible\"```\n* Refactoring complex code: ```\"Work with the oracle to figure out how we can refactor this duplication\"```\n\nPro tip: Oracle requires explicit prompting - it won't activate automatically. Just mention \"use the oracle\" in your requests when you need that extra analytical power for complex coding challenges.\nIt's slower than Amp's main agent but incredibly thorough for analysis tasks. Perfect for those moments when you need a second pair of eyes on critical code! 🔍\n\n\u003C/details>\n\n\n\n\u003Cdetails>\n\u003Csummary>Nicolay's post\u003C/summary>\n:bulb: Amp Coding Tip 2: here is another helpful tip on how to use Amp (from one of our power users in Amp discord)\nP.S. feel free to share any top tips/hacks/insights you've learnt from the first initial days of your Amp trial in :thread: \n\u003Cimg width=\"803\" height=\"876\" alt=\"image\" src=\"https://github.com/user-attachments/assets/31d4de53-bbfb-4145-8013-e1f2a8bdf7e2\" />\n\u003C/details>\n\n\n\u003Cdetails>\n\u003Csummary>AGENT.md tip\u003C/summary>\n:bulb: Amp Coding Tip 3: AGENT.md Tip of the Day\nAmp uses AGENT.md files to give your AI agent long-term memory and context.\n\n🔹 No AGENT.md? No problem. Amp will offer to generate one for you.\n🔹 You can create or update AGENT.md manually or just ask:\nUpdate AGENT.md based on what I told you in this thread.\n\n📎 Want to give your agent more context?\nJust @-mention files in your AGENT.md like this:\n```markdown\nSee @doc/style.md and @rules/internal-api-conventions.md.  \nWhen making commits, see @doc/git-commit-instructions.md.\n```\n🔍 Mentions follow these rules:\n* Relative paths are relative to the AGENT.md file.\n* Absolute paths and @~/some/path work too.\n* Mentions in code blocks are ignored.\n* Globs (e.g., @src/**/*.md) are not supported.\n\n✅ You can have multiple AGENT.md files across your repo and in ~/.config/AGENT.md.\n\u003C/details>\n\n\n\n\u003Cdetails>\n\u003Csummary>Amp CLI @ reference\u003C/summary>\n:bulb: Amp Coding Tip 4: Amp CLI Tip: Use @ to Reference Files in Your Prompt\nWhen using Amp CLI in interactive mode, you can type @ to bring up a fuzzy file search. This lets you quickly reference files in your prompt like:\n  \n\"Summarize what's happening in @src/utils/helpers.ts\"\n\nAmp will include the content of the mentioned file in the context, so you don’t have to copy-paste anything manually. Super handy for large codebases! \n\n* You can also @ reference images and screenshots in the CLI, in addition to code and other text files.\n* You can also @ reference files in non-interactive mode. For instance ```amp -x  \"summarise recent changes in @/lib folder\"```\n\u003C/details>\n\n\n\n\u003Cdetails>\n\u003Csummary>Leverage Git Commands for Code Review and Debugging\u003C/summary>\n:bulb: Amp Coding Tip 5: Leverage Git Commands for Code Review and Debugging\n  \nInstead of manually copying code changes or trying to describe what changed, use Git commands directly in your Amp prompts for more efficient workflows:\n* Quick code review: \"Run ```git diff``` to see the current changes and review them for potential edge cases or bugs\"\n* Debug recent changes: \"Run ```git blame``` on [file] and figure out who added [problematic line], then look at the full commit to understand the context\"\n* Clean up before committing: \"Run ```git diff``` to see all changes and remove any debug statements or console.logs\"\n* Understand feature history: \"Find the commit that added [feature] using ```git log```, examine the whole commit, then help me improve this feature\"\n\nThis approach gives Amp direct visibility into your actual code changes rather than requiring you to manually describe or copy-paste diffs. It's especially powerful because Amp can execute these commands directly and analyse the results in context, making code reviews and debugging much more thorough and efficient.\n\n**Bonus:** If you frequently use specific git commands with custom flags, add them to your ```amp.commands.allowlist``` in settings to avoid permission prompts each time!\n  \n\u003C/details>\n\n\n\u003Cdetails>\n\u003Csummary>Refactoring with Amp\u003C/summary>\n:bulb: Amp Coding Tip 6: Refactoring with Sourcegraph Amp\n  \nOur field guide reveals proven steps for successful code refactoring and migrations with Amp. Here's the process our FDEs use:\n:magnifying_glass: Step 1: Plan Before You Code Ask Amp to compile requirements and identify breaking changes first. For example:\n* What dependencies need updating?\n* What are the breaking changes?\n* How will the build environment change?\n:dart: Step 2: Start with One File Guide Amp through migrating a single file first, then use it as a template:13\nCheck the diffs in @HeaderComponent.vue on the most recent commit and use it as a template to complete the migration\n\n:clipboard: Step 3: Create Exhaustive Checklists Have Amp generate a checklist of all files needing migration with checkboxes - ensures nothing gets missed!\n\n:robot_face: Step 4: Leverage Subagents Use subagents for discrete tasks - they have separate context windows and return only essential information, perfect for handling multiple files.\n\n:spanner: Step 5: Integrate External Tools Use CLI tools for migration-specific tasks (e.g., dotnet upgrade assistant, JaCoCo for dead code analysis).\n\n:white_tick: Step 6: Use Oracle for Review Ask the oracle to review diffs, analyze errors, and validate against your migration goals.\n\n:zap: Step 7: Set Up Hooks Configure hooks to automatically correct common migration mistakes as they happen.\n\nCheck out our complete Code Migration Field Notes: \u003Chttps://ampcode.com/guides/code-migration#use-agentmd-files>\nThe guide includes real examples from Vue 2→3 and .NET migrations. Let me know if you'd like help getting started! :rocket:\n\n\u003C/details>\n\n\u003Cdetails>\n\u003Csummary>Amp thread CLI shortcut\u003C/summary>\n  \n:bulb: Amp Coding Tip 7: Amp Thread CLI Shortcuts\nSave keystrokes with abbreviated commands:\nThread command shortcuts:\n```bash\namp t c → amp threads continue\namp t n → amp threads new\namp t l → amp threads list\namp t f → amp threads fork\namp t s → amp threads share\namp t co → amp threads compact\n```\nNeed to pick a thread? Add --pick:\n```bash\namp t c --pick\n```\nThis opens an interactive thread picker instead of using the current thread.\n\n\u003C/details>\n\n\u003Cdetails>\n\u003Csummary>Context Engineering with Amp\u003C/summary>\n:bulb: Amp Coding Tip 8: Context engineering with Amp\nUnlike traditional prompt engineering, which focuses primarily on crafting individual queries, context engineering takes a holistic view of how information flows through an AI system over time.\n\n\n**The Foundational Question: Can the Task Be Accomplished?**\nGoing back to first principles, ask: Does the AI system have what it needs to accomplish this task? AI can only work with the information, tools, and capabilities you provide them.\nGenerally, when AI systems don't work in the way you expect them, it's either because:\n* Context Engineering Failures: The AI has the capability but lacks necessary information, tools or context. Address through better information architecture or additional tool integration.\n* Capability Failures: The AI has all the right information but still cannot complete the task due to inherent limitations. In which case, consider a different strategy. E.g. task decomposition.\nDon't just focus on crafting the perfect prompt. Think holistically about whether the AI agent has access to everything it needs to successfully complete the task. Context engineering isn't about what you say. It's about ensuring the entire working environment supports the outcome.\nFor further reading on Context Engineering please see our guide.\n\u003C/details>\n\n\n\u003Cdetails>\n\u003Csummary>Build a Personal Solutions Library in Your Global AGENT.md\u003C/summary>\n:bulb: Amp Coding Tip 9: Build a Personal Solutions Library in Your Global AGENT.md\n\nCreate a \"Solutions Library\" section in your ```$HOME/.config/AGENT.md``` file to document common coding patterns and fixes you encounter repeatedly. Since this file is automatically included in all your Amp sessions, your solutions will always be available as context.\nAdd entries like this to your ```$HOME/.config/AGENT.md```:\nmarkdown\n```markdown\n## My Solutions Library\n\n### TypeScript Module Resolution Issues\n- When encountering \"Cannot find module\" errors, check tsconfig paths and ensure baseUrl is set correctly\n- Solution pattern: Update compilerOptions.paths to match project structure\n\n### React Hydration Mismatches  \n- Always wrap client-only code in useEffect to prevent SSR/CSR mismatches\n- Use dynamic imports with ssr: false for client-only components\n\n### API Rate Limiting Pattern\n- Implement async queue with configurable concurrency using p-queue library\n- Track retry attempts with exponential backoff: delay = Math.min(1000 * 2^attempt, 30000)\n```\nNow Amp will automatically know your preferred solutions and patterns. When you encounter similar issues, Amp can reference your documented approaches without you having to explain them again. Over time, this builds a powerful personal knowledge base that makes Amp increasingly effective at solving problems the way you prefer.\nThis tip leverages Amp's AGENT.md system, which the manual emphasizes as a key way to provide persistent guidance and preferences that automatically enhance every coding session.\n\n\u003C/details>","src/content/guides/tips/README.md","fea9fa58ac212c47",{"html":1076,"metadata":1077},"\u003Cp>The purpose of this doc is to document tips dropfeed into a Slack channel\u003C/p>\n\u003Cdetails>\n\u003Csummary>Oracle Tip\u003C/summary>\n💡 Amp Coding Tip 1: Meet Oracle - Your New Code Review Partner\n\"Oracle\" - a powerful code analysis tool powered by OpenAI's o3 model that works alongside your main coding agent. Think of it as having a senior developer looking over your shoulder!\nWhen to use Oracle:\n\u003Cul>\n\u003Cli>Code reviews: \u003Ccode>\"Use the oracle to review the last commit's changes\"\u003C/code>\u003C/li>\n\u003Cli>Debugging tricky issues: \u003Ccode>\"Help me fix this bug. Use the oracle as much as possible\"\u003C/code>\u003C/li>\n\u003Cli>Refactoring complex code: \u003Ccode>\"Work with the oracle to figure out how we can refactor this duplication\"\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Cp>Pro tip: Oracle requires explicit prompting - it won’t activate automatically. Just mention “use the oracle” in your requests when you need that extra analytical power for complex coding challenges.\nIt’s slower than Amp’s main agent but incredibly thorough for analysis tasks. Perfect for those moments when you need a second pair of eyes on critical code! 🔍\u003C/p>\n\u003C/details>\n\u003Cdetails>\n\u003Csummary>Nicolay's post\u003C/summary>\n:bulb: Amp Coding Tip 2: here is another helpful tip on how to use Amp (from one of our power users in Amp discord)\nP.S. feel free to share any top tips/hacks/insights you've learnt from the first initial days of your Amp trial in :thread: \n\u003Cimg width=\"803\" height=\"876\" alt=\"image\" src=\"https://github.com/user-attachments/assets/31d4de53-bbfb-4145-8013-e1f2a8bdf7e2\">\n\u003C/details>\n\u003Cdetails>\n\u003Csummary>AGENT.md tip\u003C/summary>\n:bulb: Amp Coding Tip 3: AGENT.md Tip of the Day\nAmp uses AGENT.md files to give your AI agent long-term memory and context.\n\u003Cp>🔹 No AGENT.md? No problem. Amp will offer to generate one for you.\n🔹 You can create or update AGENT.md manually or just ask:\nUpdate AGENT.md based on what I told you in this thread.\u003C/p>\n\u003Cp>📎 Want to give your agent more context?\nJust @-mention files in your AGENT.md like this:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"markdown\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">See @doc/style.md and @rules/internal-api-conventions.md.  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">When making commits, see @doc/git-commit-instructions.md.\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>🔍 Mentions follow these rules:\u003C/p>\n\u003Cul>\n\u003Cli>Relative paths are relative to the AGENT.md file.\u003C/li>\n\u003Cli>Absolute paths and @~/some/path work too.\u003C/li>\n\u003Cli>Mentions in code blocks are ignored.\u003C/li>\n\u003Cli>Globs (e.g., @src/**/*.md) are not supported.\u003C/li>\n\u003C/ul>\n\u003Cp>✅ You can have multiple AGENT.md files across your repo and in ~/.config/AGENT.md.\u003C/p>\n\u003C/details>\n\u003Cdetails>\n\u003Csummary>Amp CLI @ reference\u003C/summary>\n:bulb: Amp Coding Tip 4: Amp CLI Tip: Use @ to Reference Files in Your Prompt\nWhen using Amp CLI in interactive mode, you can type @ to bring up a fuzzy file search. This lets you quickly reference files in your prompt like:\n\u003Cp>“Summarize what’s happening in @src/utils/helpers.ts”\u003C/p>\n\u003Cp>Amp will include the content of the mentioned file in the context, so you don’t have to copy-paste anything manually. Super handy for large codebases!\u003C/p>\n\u003Cul>\n\u003Cli>You can also @ reference images and screenshots in the CLI, in addition to code and other text files.\u003C/li>\n\u003Cli>You can also @ reference files in non-interactive mode. For instance \u003Ccode>amp -x  \"summarise recent changes in @/lib folder\"\u003C/code>\u003C/li>\n\u003C/ul>\n\u003C/details>\n\u003Cdetails>\n\u003Csummary>Leverage Git Commands for Code Review and Debugging\u003C/summary>\n:bulb: Amp Coding Tip 5: Leverage Git Commands for Code Review and Debugging\n\u003Cp>Instead of manually copying code changes or trying to describe what changed, use Git commands directly in your Amp prompts for more efficient workflows:\u003C/p>\n\u003Cul>\n\u003Cli>Quick code review: “Run \u003Ccode>git diff\u003C/code> to see the current changes and review them for potential edge cases or bugs”\u003C/li>\n\u003Cli>Debug recent changes: “Run \u003Ccode>git blame\u003C/code> on [file] and figure out who added [problematic line], then look at the full commit to understand the context”\u003C/li>\n\u003Cli>Clean up before committing: “Run \u003Ccode>git diff\u003C/code> to see all changes and remove any debug statements or console.logs”\u003C/li>\n\u003Cli>Understand feature history: “Find the commit that added [feature] using \u003Ccode>git log\u003C/code>, examine the whole commit, then help me improve this feature”\u003C/li>\n\u003C/ul>\n\u003Cp>This approach gives Amp direct visibility into your actual code changes rather than requiring you to manually describe or copy-paste diffs. It’s especially powerful because Amp can execute these commands directly and analyse the results in context, making code reviews and debugging much more thorough and efficient.\u003C/p>\n\u003Cp>\u003Cstrong>Bonus:\u003C/strong> If you frequently use specific git commands with custom flags, add them to your \u003Ccode>amp.commands.allowlist\u003C/code> in settings to avoid permission prompts each time!\u003C/p>\n\u003C/details>\n\u003Cdetails>\n\u003Csummary>Refactoring with Amp\u003C/summary>\n:bulb: Amp Coding Tip 6: Refactoring with Sourcegraph Amp\n\u003Cp>Our field guide reveals proven steps for successful code refactoring and migrations with Amp. Here’s the process our FDEs use:\n:magnifying_glass: Step 1: Plan Before You Code Ask Amp to compile requirements and identify breaking changes first. For example:\u003C/p>\n\u003Cul>\n\u003Cli>What dependencies need updating?\u003C/li>\n\u003Cli>What are the breaking changes?\u003C/li>\n\u003Cli>How will the build environment change?\n:dart: Step 2: Start with One File Guide Amp through migrating a single file first, then use it as a template:13\nCheck the diffs in @HeaderComponent.vue on the most recent commit and use it as a template to complete the migration\u003C/li>\n\u003C/ul>\n\u003Cp>:clipboard: Step 3: Create Exhaustive Checklists Have Amp generate a checklist of all files needing migration with checkboxes - ensures nothing gets missed!\u003C/p>\n\u003Cp>:robot_face: Step 4: Leverage Subagents Use subagents for discrete tasks - they have separate context windows and return only essential information, perfect for handling multiple files.\u003C/p>\n\u003Cp>:spanner: Step 5: Integrate External Tools Use CLI tools for migration-specific tasks (e.g., dotnet upgrade assistant, JaCoCo for dead code analysis).\u003C/p>\n\u003Cp>:white_tick: Step 6: Use Oracle for Review Ask the oracle to review diffs, analyze errors, and validate against your migration goals.\u003C/p>\n\u003Cp>:zap: Step 7: Set Up Hooks Configure hooks to automatically correct common migration mistakes as they happen.\u003C/p>\n\u003Cp>Check out our complete Code Migration Field Notes: \u003Ca href=\"https://ampcode.com/guides/code-migration#use-agentmd-files\">https://ampcode.com/guides/code-migration#use-agentmd-files\u003C/a>\nThe guide includes real examples from Vue 2→3 and .NET migrations. Let me know if you’d like help getting started! :rocket:\u003C/p>\n\u003C/details>\n\u003Cdetails>\n\u003Csummary>Amp thread CLI shortcut\u003C/summary>\n\u003Cp>:bulb: Amp Coding Tip 7: Amp Thread CLI Shortcuts\nSave keystrokes with abbreviated commands:\nThread command shortcuts:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">amp\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> t\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> c\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> →\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> amp\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> threads\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> continue\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">amp\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> t\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> n\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> →\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> amp\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> threads\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> new\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">amp\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> t\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> l\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> →\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> amp\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> threads\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> list\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">amp\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> t\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> f\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> →\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> amp\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> threads\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> fork\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">amp\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> t\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> s\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> →\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> amp\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> threads\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> share\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">amp\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> t\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> co\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> →\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> amp\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> threads\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> compact\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Need to pick a thread? Add —pick:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">amp\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> t\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> c\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --pick\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This opens an interactive thread picker instead of using the current thread.\u003C/p>\n\u003C/details>\n\u003Cdetails>\n\u003Csummary>Context Engineering with Amp\u003C/summary>\n:bulb: Amp Coding Tip 8: Context engineering with Amp\nUnlike traditional prompt engineering, which focuses primarily on crafting individual queries, context engineering takes a holistic view of how information flows through an AI system over time.\n\u003Cp>\u003Cstrong>The Foundational Question: Can the Task Be Accomplished?\u003C/strong>\nGoing back to first principles, ask: Does the AI system have what it needs to accomplish this task? AI can only work with the information, tools, and capabilities you provide them.\nGenerally, when AI systems don’t work in the way you expect them, it’s either because:\u003C/p>\n\u003Cul>\n\u003Cli>Context Engineering Failures: The AI has the capability but lacks necessary information, tools or context. Address through better information architecture or additional tool integration.\u003C/li>\n\u003Cli>Capability Failures: The AI has all the right information but still cannot complete the task due to inherent limitations. In which case, consider a different strategy. E.g. task decomposition.\nDon’t just focus on crafting the perfect prompt. Think holistically about whether the AI agent has access to everything it needs to successfully complete the task. Context engineering isn’t about what you say. It’s about ensuring the entire working environment supports the outcome.\nFor further reading on Context Engineering please see our guide.\u003C/li>\n\u003C/ul>\n\u003C/details>\n\u003Cdetails>\n\u003Csummary>Build a Personal Solutions Library in Your Global AGENT.md\u003C/summary>\n:bulb: Amp Coding Tip 9: Build a Personal Solutions Library in Your Global AGENT.md\n\u003Cp>Create a “Solutions Library” section in your \u003Ccode>$HOME/.config/AGENT.md\u003C/code> file to document common coding patterns and fixes you encounter repeatedly. Since this file is automatically included in all your Amp sessions, your solutions will always be available as context.\nAdd entries like this to your \u003Ccode>$HOME/.config/AGENT.md\u003C/code>:\nmarkdown\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"markdown\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF;font-weight:bold\">## My Solutions Library\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF;font-weight:bold\">### TypeScript Module Resolution Issues\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">-\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> When encountering \"Cannot find module\" errors, check tsconfig paths and ensure baseUrl is set correctly\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">-\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Solution pattern: Update compilerOptions.paths to match project structure\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF;font-weight:bold\">### React Hydration Mismatches  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">-\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Always wrap client-only code in useEffect to prevent SSR/CSR mismatches\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">-\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Use dynamic imports with ssr: false for client-only components\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF;font-weight:bold\">### API Rate Limiting Pattern\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">-\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Implement async queue with configurable concurrency using p-queue library\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">-\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Track retry attempts with exponential backoff: delay = Math.min(1000 * 2^attempt, 30000)\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Now Amp will automatically know your preferred solutions and patterns. When you encounter similar issues, Amp can reference your documented approaches without you having to explain them again. Over time, this builds a powerful personal knowledge base that makes Amp increasingly effective at solving problems the way you prefer.\nThis tip leverages Amp’s AGENT.md system, which the manual emphasizes as a key way to provide persistent guidance and preferences that automatically enhance every coding session.\u003C/p>\n\u003C/details>",{"headings":1078,"localImagePaths":1079,"remoteImagePaths":1080,"frontmatter":1081,"imagePaths":1082},[],[],[],{},[],"tips/README.md","code-migrations/dotnet48-to-dotnet8core-rebuild/readme",{"id":1084,"data":1086,"body":1087,"filePath":1088,"digest":1089,"rendered":1090,"legacyId":1155},{},"# .NET 4.8 to Core 8 Migration Guide\n\n\n## Example Repo and migration output\n- Source repo \u003Chttps://github.com/Isuru-F/dot-net-4-8-migration-example>\n\n- Migration PR \u003Chttps://github.com/Isuru-F/dot-net-4-8-migration-example/pull/1>\n\n- Post migration Method inventory analysis \u003Chttps://github.com/Isuru-F/dot-net-4-8-migration-example/pull/1#issuecomment-3166767509>\n## Preparation Phase\n\n### Source Project Requirements\n- Install OpenCover: `choco install opencover.portable -y`\n- Verify build: `dotnet build` or via `msbuild`\n- Set up `tree-sitter/c-sharp`\n- CLI tools (optional) or VS Code\n- Are you able to verify the migration? Do you need to build a test harness/client CLI project first?\n\n### Generate Agent.md\n- Document build/run/test procedures\n- Always include \"build and test\" in Amp prompts\n\n## Assessment Phase\n\n### Safety Check\n- Assess current test coverage [Example prompt -> Get test coverage report](https://ampcode.com/threads/T-4789e69b-5fcd-4a1a-8b3b-007286d713d5)\n- Identify all business logic requirements and extract into `source-methods-vs-business-logic.md`\nNote: We will do this after the migration and generate a `target-methods-vs-business-logic.md` file and compare.\n\n### Test Coverage Enhancement\n1. Build and test current state\n2. Add unit tests for key components -> [Example prompt to backfill unit tests](https://ampcode.com/threads/T-89dfffa2-fae6-4c6d-bbd5-a4574fa91605)\n3. Re-run build and test\n4. Generate updated coverage report\n\n**Output:** Comprehensive test suite\n\n## Analysis Phase\n\n### Method Inventory\nUse Tree-sitter C# to generate method report and ask the oracle for business logic classification and summary.\n\n[Example prompt](https://ampcode.com/threads/T-fc218532-98d6-467c-9fc9-9e52c17a119a?q=dotnet)\n\nCreate table with:\n- Filename\n- Method name\n- Classification (noise vs business logic)\n- Business logic description with enough detail extracted to verify after migration\n\nOptional: Add unit tests for business rules\n\n## Unit test coverage\n- Generate unit test coverage report and review risk\n- Add additional unit tests if required\n\n## Planning Phase\n\n### Multi-Step Migration Plan\nAsk Amp to generate a plan for you. Instructions should include;\n1. Analyise this project and create phase-by-phase breakdown - file per phase\n2. Oracle review of plan\n3. Build/test verification between phases\n4. Maintain unit test coverage\n5. API Inputs and Outputs/ contracts should remain the same. There should be no impact to clients that consume this prjects API.\n5. Store plan to disk\n6. Create progress tracking file\n7. Document any blockers in progress file\n\n[Example prompt](https://ampcode.com/threads/T-fc218532-98d6-467c-9fc9-9e52c17a119a?q=dotnet)\n\n## Execution Phase\n\n### Phase-by-Phase Migration\n- Ask Amp to create a new branch and Execute each phase, ask amp to sue subagents to maintain main thread context\n- Ask amp to Build, compile, and run tests before starting next phase\n- Document blockers in progress file with detailed reasoning\n- If things do not go to plan, revise the original plan and start again. \n- Commit per phase to have waypoints you can come back to.\n\n[Example prompt](https://ampcode.com/threads/T-7d545c2e-35cd-4678-b7f5-964e5cc2f6d7?q=dotnet)\n\n## Verification Phase\n\n### Final Validation\n- Run Tree-sitter comparison (migrated vs main branch)\n- Identify missing or extra methods\n- Flag any untested work as risk\n- Build / test / run migrated code\n\n## Success Criteria\n- Maintained test coverage\n- All business logic preserved\n- Build/test passes at each phase\n- Complete method inventory matches\n\n## Next steps \n- Update CI scripts / github workflow actions with new framework build/ test steps","src/content/guides/code-migrations/dotnet48-to-dotnet8core-rebuild/README.md","f459be39c378f05b",{"html":1091,"metadata":1092},"\u003Ch1 id=\"net-48-to-core-8-migration-guide\">.NET 4.8 to Core 8 Migration Guide\u003C/h1>\n\u003Ch2 id=\"example-repo-and-migration-output\">Example Repo and migration output\u003C/h2>\n\u003Cul>\n\u003Cli>\n\u003Cp>Source repo \u003Ca href=\"https://github.com/Isuru-F/dot-net-4-8-migration-example\">https://github.com/Isuru-F/dot-net-4-8-migration-example\u003C/a>\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Migration PR \u003Ca href=\"https://github.com/Isuru-F/dot-net-4-8-migration-example/pull/1\">https://github.com/Isuru-F/dot-net-4-8-migration-example/pull/1\u003C/a>\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Post migration Method inventory analysis \u003Ca href=\"https://github.com/Isuru-F/dot-net-4-8-migration-example/pull/1#issuecomment-3166767509\">https://github.com/Isuru-F/dot-net-4-8-migration-example/pull/1#issuecomment-3166767509\u003C/a>\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"preparation-phase\">Preparation Phase\u003C/h2>\n\u003Ch3 id=\"source-project-requirements\">Source Project Requirements\u003C/h3>\n\u003Cul>\n\u003Cli>Install OpenCover: \u003Ccode>choco install opencover.portable -y\u003C/code>\u003C/li>\n\u003Cli>Verify build: \u003Ccode>dotnet build\u003C/code> or via \u003Ccode>msbuild\u003C/code>\u003C/li>\n\u003Cli>Set up \u003Ccode>tree-sitter/c-sharp\u003C/code>\u003C/li>\n\u003Cli>CLI tools (optional) or VS Code\u003C/li>\n\u003Cli>Are you able to verify the migration? Do you need to build a test harness/client CLI project first?\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"generate-agentmd\">Generate Agent.md\u003C/h3>\n\u003Cul>\n\u003Cli>Document build/run/test procedures\u003C/li>\n\u003Cli>Always include “build and test” in Amp prompts\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"assessment-phase\">Assessment Phase\u003C/h2>\n\u003Ch3 id=\"safety-check\">Safety Check\u003C/h3>\n\u003Cul>\n\u003Cli>Assess current test coverage \u003Ca href=\"https://ampcode.com/threads/T-4789e69b-5fcd-4a1a-8b3b-007286d713d5\">Example prompt -> Get test coverage report\u003C/a>\u003C/li>\n\u003Cli>Identify all business logic requirements and extract into \u003Ccode>source-methods-vs-business-logic.md\u003C/code>\nNote: We will do this after the migration and generate a \u003Ccode>target-methods-vs-business-logic.md\u003C/code> file and compare.\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"test-coverage-enhancement\">Test Coverage Enhancement\u003C/h3>\n\u003Col>\n\u003Cli>Build and test current state\u003C/li>\n\u003Cli>Add unit tests for key components -> \u003Ca href=\"https://ampcode.com/threads/T-89dfffa2-fae6-4c6d-bbd5-a4574fa91605\">Example prompt to backfill unit tests\u003C/a>\u003C/li>\n\u003Cli>Re-run build and test\u003C/li>\n\u003Cli>Generate updated coverage report\u003C/li>\n\u003C/ol>\n\u003Cp>\u003Cstrong>Output:\u003C/strong> Comprehensive test suite\u003C/p>\n\u003Ch2 id=\"analysis-phase\">Analysis Phase\u003C/h2>\n\u003Ch3 id=\"method-inventory\">Method Inventory\u003C/h3>\n\u003Cp>Use Tree-sitter C# to generate method report and ask the oracle for business logic classification and summary.\u003C/p>\n\u003Cp>\u003Ca href=\"https://ampcode.com/threads/T-fc218532-98d6-467c-9fc9-9e52c17a119a?q=dotnet\">Example prompt\u003C/a>\u003C/p>\n\u003Cp>Create table with:\u003C/p>\n\u003Cul>\n\u003Cli>Filename\u003C/li>\n\u003Cli>Method name\u003C/li>\n\u003Cli>Classification (noise vs business logic)\u003C/li>\n\u003Cli>Business logic description with enough detail extracted to verify after migration\u003C/li>\n\u003C/ul>\n\u003Cp>Optional: Add unit tests for business rules\u003C/p>\n\u003Ch2 id=\"unit-test-coverage\">Unit test coverage\u003C/h2>\n\u003Cul>\n\u003Cli>Generate unit test coverage report and review risk\u003C/li>\n\u003Cli>Add additional unit tests if required\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"planning-phase\">Planning Phase\u003C/h2>\n\u003Ch3 id=\"multi-step-migration-plan\">Multi-Step Migration Plan\u003C/h3>\n\u003Cp>Ask Amp to generate a plan for you. Instructions should include;\u003C/p>\n\u003Col>\n\u003Cli>Analyise this project and create phase-by-phase breakdown - file per phase\u003C/li>\n\u003Cli>Oracle review of plan\u003C/li>\n\u003Cli>Build/test verification between phases\u003C/li>\n\u003Cli>Maintain unit test coverage\u003C/li>\n\u003Cli>API Inputs and Outputs/ contracts should remain the same. There should be no impact to clients that consume this prjects API.\u003C/li>\n\u003Cli>Store plan to disk\u003C/li>\n\u003Cli>Create progress tracking file\u003C/li>\n\u003Cli>Document any blockers in progress file\u003C/li>\n\u003C/ol>\n\u003Cp>\u003Ca href=\"https://ampcode.com/threads/T-fc218532-98d6-467c-9fc9-9e52c17a119a?q=dotnet\">Example prompt\u003C/a>\u003C/p>\n\u003Ch2 id=\"execution-phase\">Execution Phase\u003C/h2>\n\u003Ch3 id=\"phase-by-phase-migration\">Phase-by-Phase Migration\u003C/h3>\n\u003Cul>\n\u003Cli>Ask Amp to create a new branch and Execute each phase, ask amp to sue subagents to maintain main thread context\u003C/li>\n\u003Cli>Ask amp to Build, compile, and run tests before starting next phase\u003C/li>\n\u003Cli>Document blockers in progress file with detailed reasoning\u003C/li>\n\u003Cli>If things do not go to plan, revise the original plan and start again.\u003C/li>\n\u003Cli>Commit per phase to have waypoints you can come back to.\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Ca href=\"https://ampcode.com/threads/T-7d545c2e-35cd-4678-b7f5-964e5cc2f6d7?q=dotnet\">Example prompt\u003C/a>\u003C/p>\n\u003Ch2 id=\"verification-phase\">Verification Phase\u003C/h2>\n\u003Ch3 id=\"final-validation\">Final Validation\u003C/h3>\n\u003Cul>\n\u003Cli>Run Tree-sitter comparison (migrated vs main branch)\u003C/li>\n\u003Cli>Identify missing or extra methods\u003C/li>\n\u003Cli>Flag any untested work as risk\u003C/li>\n\u003Cli>Build / test / run migrated code\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"success-criteria\">Success Criteria\u003C/h2>\n\u003Cul>\n\u003Cli>Maintained test coverage\u003C/li>\n\u003Cli>All business logic preserved\u003C/li>\n\u003Cli>Build/test passes at each phase\u003C/li>\n\u003Cli>Complete method inventory matches\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"next-steps\">Next steps\u003C/h2>\n\u003Cul>\n\u003Cli>Update CI scripts / github workflow actions with new framework build/ test steps\u003C/li>\n\u003C/ul>",{"headings":1093,"localImagePaths":1151,"remoteImagePaths":1152,"frontmatter":1153,"imagePaths":1154},[1094,1097,1100,1103,1106,1109,1112,1115,1118,1121,1124,1127,1130,1133,1136,1139,1142,1145,1148],{"depth":22,"slug":1095,"text":1096},"net-48-to-core-8-migration-guide",".NET 4.8 to Core 8 Migration Guide",{"depth":25,"slug":1098,"text":1099},"example-repo-and-migration-output","Example Repo and migration output",{"depth":25,"slug":1101,"text":1102},"preparation-phase","Preparation Phase",{"depth":32,"slug":1104,"text":1105},"source-project-requirements","Source Project Requirements",{"depth":32,"slug":1107,"text":1108},"generate-agentmd","Generate Agent.md",{"depth":25,"slug":1110,"text":1111},"assessment-phase","Assessment Phase",{"depth":32,"slug":1113,"text":1114},"safety-check","Safety Check",{"depth":32,"slug":1116,"text":1117},"test-coverage-enhancement","Test Coverage Enhancement",{"depth":25,"slug":1119,"text":1120},"analysis-phase","Analysis Phase",{"depth":32,"slug":1122,"text":1123},"method-inventory","Method Inventory",{"depth":25,"slug":1125,"text":1126},"unit-test-coverage","Unit test coverage",{"depth":25,"slug":1128,"text":1129},"planning-phase","Planning Phase",{"depth":32,"slug":1131,"text":1132},"multi-step-migration-plan","Multi-Step Migration Plan",{"depth":25,"slug":1134,"text":1135},"execution-phase","Execution Phase",{"depth":32,"slug":1137,"text":1138},"phase-by-phase-migration","Phase-by-Phase Migration",{"depth":25,"slug":1140,"text":1141},"verification-phase","Verification Phase",{"depth":32,"slug":1143,"text":1144},"final-validation","Final Validation",{"depth":25,"slug":1146,"text":1147},"success-criteria","Success Criteria",{"depth":25,"slug":1149,"text":1150},"next-steps","Next steps",[],[],{},[],"code-migrations/dotnet48-to-dotnet8core-rebuild/README.md","code-migrations/multi-repo-upgrade/readme",{"id":1156,"data":1158,"body":1159,"filePath":1160,"digest":1161,"rendered":1162,"legacyId":1234},{},"# Multi-Repository Upgrade with Amp\n\nUpgrade multiple repositories simultaneously using Amp's parallel processing with AI-guided planning and execution.\n\n## Quick Overview\n\n![Multi-Repository Migration Flow](/images/migration-diagram.png)\n\n**Two phases**: Plan the migration → Execute across repositories  \n**Result**: Automated PRs with tested upgrades across all your repos  \n\n\n## When to Use This Approach\n\nThis method works best when you have:\n\n### **Ideal Scenarios**\n- **Local Repository Access**: All target repositories are cloned locally\n- **Local Build Capability**: You can compile and build projects on your machine\n- **Small to Medium Scale**: Upgrading small-medium number of repositories (varies by API limits and machine resources)\n- **Standard Migrations**: Framework upgrades, dependency updates, configuration changes that are well documented\n\n### **API Limit Considerations**\n- **Code Host Limits**: GitHub/GitLab API limits vary by plan and setup\n- **Limited Interactions**: Only hits APIs for cloning/fetching and creating PRs\n- **Retry Capability**: If you hit limits, ask Amp to retry later\n\n\n### **Not Suitable For**\n- Repositories you can't build locally (.NET 4 project on Mac OS host)\n- Complex migrations requiring manual intervention\n- Very large scale (1000s+ repositories) without enterprise API limits\n- Migrations requiring external service coordination\n\n## Your First Migration\n\n### Step 1: Prerequisites Checklist\n- [ ] Amp CLI or VS Code extension installed\n- [ ] GitHub/GitLab CLI logged in with write access\n- [ ] Target repositories cloned locally in one directory (you can ask Amp to do this)\n- [ ] Migration documentation URL ready\n\n### Step 2: Use the example Migration Template\n\nCopy this template and replace the `{variables}`:\n\n```text\nAnalyze all projects in this folder and create a migration plan to upgrade from {PURPOSE}\n\nRequirements:\n- Generate a detailed spec plan in {SPEC_FILENAME}.md\n- Use subagents for execution\n- Build and test projects before migration\n- Execute the migration\n- Build and test projects after migration\n- Document all results\n\nReference: {MIGRATION_URL}\n\nOutput Requirements:\nCreate {PROGRESS_FILENAME}.md with:\n- Build status (before/after)\n- Branch name and commit messages\n- Migration steps executed\n- Any issues encountered including blockers\n- Summary of what was changed and why\n\nUse GitHub CLI to create a pull request\nInclude build verification results in PR description\n\nDo not start the migration yet, only generate the spec plan.\n\nOnce completed ask the oracle to review your plan and adjust the spec based on the oracle's advice.\n```\n\n### Step 3: Fill in Your Variables\n\n**Example - React Upgrade:**\n```text\n{PURPOSE}: React 17 to React 18\n{SPEC_FILENAME}: react-18-upgrade\n{PROGRESS_FILENAME}: react-migration-progress\n{MIGRATION_URL}: https://react.dev/blog/2022/03/29/react-v18\n```\n\n### Step 4: Review and Execute\n\n1. **Generate Plan**: Amp analyzes your repositories and creates migration plan\n2. **AI Review**: AI reviewer validates and optimizes the plan\n3. **Your Review**: Confirm the plan looks correct\n4. **Execute**: Amp deploys parallel workers to upgrade each repository\n5. **Monitor**: Track progress and review created PRs\n\n## Real Example\n\n**Migration**: [System.Data.SqlClient to Microsoft.Data.SqlClient](https://ampcode.com/threads/T-e5f31274-832a-492f-b50e-63908d25c411)\n\n**Template Variables Used:**\n```text\n{PURPOSE}: System.Data.SqlClient to Microsoft.Data.SqlClient\n{SPEC_FILENAME}: sqldata-migration\n{PROGRESS_FILENAME}: progress\n{MIGRATION_URL}: https://github.com/dotnet/SqlClient/blob/main/porting-cheat-sheet.md\n```\n\n**Result Amp Output from VS Code**: ![15 repositories upgraded with automated PRs](/images/multi-repo-upgrade-output.png)\n\n**Sample PR**: \u003Chttps://github.com/amp-example-org/bank-app-15/pull/1>\n\n## Understanding the Process\n\n### Phase 1: Planning\n1. **Repository Analysis**: Amp scans all local repositories for current versions and dependencies\n2. **Migration Plan**: Creates detailed upgrade strategy based on official documentation\n3. **AI Review**: AI reviewer identifies potential issues and optimizes the approach\n4. **Your Approval**: You review and confirm the plan before execution\n\n### Phase 2: Execution  \n1. **Parallel Workers**: Amp creates one worker per repository\n2. **For Each Repository**:\n   - Create feature branch (`feature/migrate-{framework}-{version}`)\n   - Apply upgrades (dependencies, code changes, configs)\n   - Run tests and builds\n   - Create PR with results\n\n### What Amp Does Automatically\n- **Dependency Analysis**: Identifies which files need updating\n- **Breaking Change Detection**: Reviews migration docs for potential issues  \n- **Test Validation**: Runs your existing test suite to verify changes\n- **Build Verification**: Ensures projects compile after migration\n- **PR Creation**: Generates detailed pull requests with test results\n\n### What You Control\n- **Repository Selection**: Choose which repos to include\n- **Migration Scope**: Define what gets upgraded\n- **Success Criteria**: Set requirements for test coverage, build times, etc.\n- **Final Approval**: Review and merge PRs when ready\n\n## Template Variables Reference\n\n| Variable | Purpose | Example |\n|----------|---------|---------|\n| `{PURPOSE}` | What you're migrating | `\"React 17 to React 18\"` |\n| `{SPEC_FILENAME}` | Name for plan file | `\"react-18-upgrade\"` |\n| `{PROGRESS_FILENAME}` | Name for progress file | `\"migration-progress\"` |\n| `{MIGRATION_URL}` | Official documentation | `\"https://react.dev/blog/...\"` |\n\n\n## Advanced Usage\n\n\u003Cdetails>\n\u003Csummary>Custom Success Criteria\u003C/summary>\n\nAdd specific requirements to your template:\n```text\nSuccess criteria:\n- All tests pass with same coverage (±2%)\n- Build time increases no more than 20%\n- No new linting errors introduced\n- Performance tests within 5% of baseline\n```\n\u003C/details>\n\n\n\u003Cdetails>\n\u003Csummary>Custom Branch Strategy\u003C/summary>\n\nModify branch naming and strategy:\n```text\nGit strategy:\n- Branch name: feature/react-18-{date}\n- Base branch: develop (not main)\n- PR target: staging branch for review\n```\n\u003C/details>\n\n## Best Practices\n\n### Before Starting\n- Test the migration on one repository manually first\n- Ensure all repositories build successfully locally\n- Start with smaller, less critical repositories before you scale it out\n\n\n### After Migration\n- Review all PRs before merging\n- Run integration tests across updated repositories\n- Plan follow-up for any blocked repositories","src/content/guides/code-migrations/multi-repo-upgrade/README.md","4721d2bbe6a4b1e3",{"html":1163,"metadata":1164},"\u003Ch1 id=\"multi-repository-upgrade-with-amp\">Multi-Repository Upgrade with Amp\u003C/h1>\n\u003Cp>Upgrade multiple repositories simultaneously using Amp’s parallel processing with AI-guided planning and execution.\u003C/p>\n\u003Ch2 id=\"quick-overview\">Quick Overview\u003C/h2>\n\u003Cp>\u003Cimg src=\"/images/migration-diagram.png\" alt=\"Multi-Repository Migration Flow\">\u003C/p>\n\u003Cp>\u003Cstrong>Two phases\u003C/strong>: Plan the migration → Execute across repositories\u003Cbr>\n\u003Cstrong>Result\u003C/strong>: Automated PRs with tested upgrades across all your repos\u003C/p>\n\u003Ch2 id=\"when-to-use-this-approach\">When to Use This Approach\u003C/h2>\n\u003Cp>This method works best when you have:\u003C/p>\n\u003Ch3 id=\"ideal-scenarios\">\u003Cstrong>Ideal Scenarios\u003C/strong>\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Local Repository Access\u003C/strong>: All target repositories are cloned locally\u003C/li>\n\u003Cli>\u003Cstrong>Local Build Capability\u003C/strong>: You can compile and build projects on your machine\u003C/li>\n\u003Cli>\u003Cstrong>Small to Medium Scale\u003C/strong>: Upgrading small-medium number of repositories (varies by API limits and machine resources)\u003C/li>\n\u003Cli>\u003Cstrong>Standard Migrations\u003C/strong>: Framework upgrades, dependency updates, configuration changes that are well documented\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"api-limit-considerations\">\u003Cstrong>API Limit Considerations\u003C/strong>\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Code Host Limits\u003C/strong>: GitHub/GitLab API limits vary by plan and setup\u003C/li>\n\u003Cli>\u003Cstrong>Limited Interactions\u003C/strong>: Only hits APIs for cloning/fetching and creating PRs\u003C/li>\n\u003Cli>\u003Cstrong>Retry Capability\u003C/strong>: If you hit limits, ask Amp to retry later\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"not-suitable-for\">\u003Cstrong>Not Suitable For\u003C/strong>\u003C/h3>\n\u003Cul>\n\u003Cli>Repositories you can’t build locally (.NET 4 project on Mac OS host)\u003C/li>\n\u003Cli>Complex migrations requiring manual intervention\u003C/li>\n\u003Cli>Very large scale (1000s+ repositories) without enterprise API limits\u003C/li>\n\u003Cli>Migrations requiring external service coordination\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"your-first-migration\">Your First Migration\u003C/h2>\n\u003Ch3 id=\"step-1-prerequisites-checklist\">Step 1: Prerequisites Checklist\u003C/h3>\n\u003Cul class=\"contains-task-list\">\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> Amp CLI or VS Code extension installed\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> GitHub/GitLab CLI logged in with write access\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> Target repositories cloned locally in one directory (you can ask Amp to do this)\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> Migration documentation URL ready\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"step-2-use-the-example-migration-template\">Step 2: Use the example Migration Template\u003C/h3>\n\u003Cp>Copy this template and replace the \u003Ccode>{variables}\u003C/code>:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"text\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>Analyze all projects in this folder and create a migration plan to upgrade from {PURPOSE}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Requirements:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>- Generate a detailed spec plan in {SPEC_FILENAME}.md\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>- Use subagents for execution\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>- Build and test projects before migration\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>- Execute the migration\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>- Build and test projects after migration\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>- Document all results\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Reference: {MIGRATION_URL}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Output Requirements:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Create {PROGRESS_FILENAME}.md with:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>- Build status (before/after)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>- Branch name and commit messages\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>- Migration steps executed\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>- Any issues encountered including blockers\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>- Summary of what was changed and why\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Use GitHub CLI to create a pull request\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Include build verification results in PR description\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Do not start the migration yet, only generate the spec plan.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Once completed ask the oracle to review your plan and adjust the spec based on the oracle's advice.\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"step-3-fill-in-your-variables\">Step 3: Fill in Your Variables\u003C/h3>\n\u003Cp>\u003Cstrong>Example - React Upgrade:\u003C/strong>\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"text\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>{PURPOSE}: React 17 to React 18\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>{SPEC_FILENAME}: react-18-upgrade\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>{PROGRESS_FILENAME}: react-migration-progress\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>{MIGRATION_URL}: https://react.dev/blog/2022/03/29/react-v18\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"step-4-review-and-execute\">Step 4: Review and Execute\u003C/h3>\n\u003Col>\n\u003Cli>\u003Cstrong>Generate Plan\u003C/strong>: Amp analyzes your repositories and creates migration plan\u003C/li>\n\u003Cli>\u003Cstrong>AI Review\u003C/strong>: AI reviewer validates and optimizes the plan\u003C/li>\n\u003Cli>\u003Cstrong>Your Review\u003C/strong>: Confirm the plan looks correct\u003C/li>\n\u003Cli>\u003Cstrong>Execute\u003C/strong>: Amp deploys parallel workers to upgrade each repository\u003C/li>\n\u003Cli>\u003Cstrong>Monitor\u003C/strong>: Track progress and review created PRs\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"real-example\">Real Example\u003C/h2>\n\u003Cp>\u003Cstrong>Migration\u003C/strong>: \u003Ca href=\"https://ampcode.com/threads/T-e5f31274-832a-492f-b50e-63908d25c411\">System.Data.SqlClient to Microsoft.Data.SqlClient\u003C/a>\u003C/p>\n\u003Cp>\u003Cstrong>Template Variables Used:\u003C/strong>\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"text\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>{PURPOSE}: System.Data.SqlClient to Microsoft.Data.SqlClient\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>{SPEC_FILENAME}: sqldata-migration\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>{PROGRESS_FILENAME}: progress\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>{MIGRATION_URL}: https://github.com/dotnet/SqlClient/blob/main/porting-cheat-sheet.md\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>Result Amp Output from VS Code\u003C/strong>: \u003Cimg src=\"/images/multi-repo-upgrade-output.png\" alt=\"15 repositories upgraded with automated PRs\">\u003C/p>\n\u003Cp>\u003Cstrong>Sample PR\u003C/strong>: \u003Ca href=\"https://github.com/amp-example-org/bank-app-15/pull/1\">https://github.com/amp-example-org/bank-app-15/pull/1\u003C/a>\u003C/p>\n\u003Ch2 id=\"understanding-the-process\">Understanding the Process\u003C/h2>\n\u003Ch3 id=\"phase-1-planning\">Phase 1: Planning\u003C/h3>\n\u003Col>\n\u003Cli>\u003Cstrong>Repository Analysis\u003C/strong>: Amp scans all local repositories for current versions and dependencies\u003C/li>\n\u003Cli>\u003Cstrong>Migration Plan\u003C/strong>: Creates detailed upgrade strategy based on official documentation\u003C/li>\n\u003Cli>\u003Cstrong>AI Review\u003C/strong>: AI reviewer identifies potential issues and optimizes the approach\u003C/li>\n\u003Cli>\u003Cstrong>Your Approval\u003C/strong>: You review and confirm the plan before execution\u003C/li>\n\u003C/ol>\n\u003Ch3 id=\"phase-2-execution\">Phase 2: Execution\u003C/h3>\n\u003Col>\n\u003Cli>\u003Cstrong>Parallel Workers\u003C/strong>: Amp creates one worker per repository\u003C/li>\n\u003Cli>\u003Cstrong>For Each Repository\u003C/strong>:\n\u003Cul>\n\u003Cli>Create feature branch (\u003Ccode>feature/migrate-{framework}-{version}\u003C/code>)\u003C/li>\n\u003Cli>Apply upgrades (dependencies, code changes, configs)\u003C/li>\n\u003Cli>Run tests and builds\u003C/li>\n\u003Cli>Create PR with results\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ol>\n\u003Ch3 id=\"what-amp-does-automatically\">What Amp Does Automatically\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Dependency Analysis\u003C/strong>: Identifies which files need updating\u003C/li>\n\u003Cli>\u003Cstrong>Breaking Change Detection\u003C/strong>: Reviews migration docs for potential issues\u003C/li>\n\u003Cli>\u003Cstrong>Test Validation\u003C/strong>: Runs your existing test suite to verify changes\u003C/li>\n\u003Cli>\u003Cstrong>Build Verification\u003C/strong>: Ensures projects compile after migration\u003C/li>\n\u003Cli>\u003Cstrong>PR Creation\u003C/strong>: Generates detailed pull requests with test results\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"what-you-control\">What You Control\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Repository Selection\u003C/strong>: Choose which repos to include\u003C/li>\n\u003Cli>\u003Cstrong>Migration Scope\u003C/strong>: Define what gets upgraded\u003C/li>\n\u003Cli>\u003Cstrong>Success Criteria\u003C/strong>: Set requirements for test coverage, build times, etc.\u003C/li>\n\u003Cli>\u003Cstrong>Final Approval\u003C/strong>: Review and merge PRs when ready\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"template-variables-reference\">Template Variables Reference\u003C/h2>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>Variable\u003C/th>\u003Cth>Purpose\u003C/th>\u003Cth>Example\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>\u003Ccode>{PURPOSE}\u003C/code>\u003C/td>\u003Ctd>What you’re migrating\u003C/td>\u003Ctd>\u003Ccode>\"React 17 to React 18\"\u003C/code>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ccode>{SPEC_FILENAME}\u003C/code>\u003C/td>\u003Ctd>Name for plan file\u003C/td>\u003Ctd>\u003Ccode>\"react-18-upgrade\"\u003C/code>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ccode>{PROGRESS_FILENAME}\u003C/code>\u003C/td>\u003Ctd>Name for progress file\u003C/td>\u003Ctd>\u003Ccode>\"migration-progress\"\u003C/code>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ccode>{MIGRATION_URL}\u003C/code>\u003C/td>\u003Ctd>Official documentation\u003C/td>\u003Ctd>\u003Ccode>\"https://react.dev/blog/...\"\u003C/code>\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Ch2 id=\"advanced-usage\">Advanced Usage\u003C/h2>\n\u003Cdetails>\n\u003Csummary>Custom Success Criteria\u003C/summary>\n\u003Cp>Add specific requirements to your template:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"text\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>Success criteria:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>- All tests pass with same coverage (±2%)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>- Build time increases no more than 20%\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>- No new linting errors introduced\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>- Performance tests within 5% of baseline\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003C/details>\n\u003Cdetails>\n\u003Csummary>Custom Branch Strategy\u003C/summary>\n\u003Cp>Modify branch naming and strategy:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"text\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>Git strategy:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>- Branch name: feature/react-18-{date}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>- Base branch: develop (not main)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>- PR target: staging branch for review\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003C/details>\n\u003Ch2 id=\"best-practices\">Best Practices\u003C/h2>\n\u003Ch3 id=\"before-starting\">Before Starting\u003C/h3>\n\u003Cul>\n\u003Cli>Test the migration on one repository manually first\u003C/li>\n\u003Cli>Ensure all repositories build successfully locally\u003C/li>\n\u003Cli>Start with smaller, less critical repositories before you scale it out\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"after-migration\">After Migration\u003C/h3>\n\u003Cul>\n\u003Cli>Review all PRs before merging\u003C/li>\n\u003Cli>Run integration tests across updated repositories\u003C/li>\n\u003Cli>Plan follow-up for any blocked repositories\u003C/li>\n\u003C/ul>",{"headings":1165,"localImagePaths":1230,"remoteImagePaths":1231,"frontmatter":1232,"imagePaths":1233},[1166,1169,1172,1175,1178,1181,1184,1187,1190,1193,1196,1199,1202,1205,1208,1211,1214,1217,1220,1223,1224,1227],{"depth":22,"slug":1167,"text":1168},"multi-repository-upgrade-with-amp","Multi-Repository Upgrade with Amp",{"depth":25,"slug":1170,"text":1171},"quick-overview","Quick Overview",{"depth":25,"slug":1173,"text":1174},"when-to-use-this-approach","When to Use This Approach",{"depth":32,"slug":1176,"text":1177},"ideal-scenarios","Ideal Scenarios",{"depth":32,"slug":1179,"text":1180},"api-limit-considerations","API Limit Considerations",{"depth":32,"slug":1182,"text":1183},"not-suitable-for","Not Suitable For",{"depth":25,"slug":1185,"text":1186},"your-first-migration","Your First Migration",{"depth":32,"slug":1188,"text":1189},"step-1-prerequisites-checklist","Step 1: Prerequisites Checklist",{"depth":32,"slug":1191,"text":1192},"step-2-use-the-example-migration-template","Step 2: Use the example Migration Template",{"depth":32,"slug":1194,"text":1195},"step-3-fill-in-your-variables","Step 3: Fill in Your Variables",{"depth":32,"slug":1197,"text":1198},"step-4-review-and-execute","Step 4: Review and Execute",{"depth":25,"slug":1200,"text":1201},"real-example","Real Example",{"depth":25,"slug":1203,"text":1204},"understanding-the-process","Understanding the Process",{"depth":32,"slug":1206,"text":1207},"phase-1-planning","Phase 1: Planning",{"depth":32,"slug":1209,"text":1210},"phase-2-execution","Phase 2: Execution",{"depth":32,"slug":1212,"text":1213},"what-amp-does-automatically","What Amp Does Automatically",{"depth":32,"slug":1215,"text":1216},"what-you-control","What You Control",{"depth":25,"slug":1218,"text":1219},"template-variables-reference","Template Variables Reference",{"depth":25,"slug":1221,"text":1222},"advanced-usage","Advanced Usage",{"depth":25,"slug":99,"text":100},{"depth":32,"slug":1225,"text":1226},"before-starting","Before Starting",{"depth":32,"slug":1228,"text":1229},"after-migration","After Migration",[],[],{},[],"code-migrations/multi-repo-upgrade/README.md","code-migrations/multi-repo-upgrade/sql-data-migration-progress",{"id":1235,"data":1237,"body":1238,"filePath":1239,"digest":1240,"rendered":1241,"legacyId":1348},{},"# Migration Progress: System.Data.SqlClient to Microsoft.Data.SqlClient\n\n## Overview\n**Purpose**: Migrate from System.Data.SqlClient to Microsoft.Data.SqlClient across 15 bank application projects  \n**Start Date**: July 24, 2025  \n**Status**: Oracle Review Complete - Critical Blockers Identified & Resolved in Updated Plan  \n\n## Pre-Migration Status\n\n### Build Status (Before Migration)\n- **Status**: Not yet executed\n- **Target**: Verify all 15 projects build successfully\n- **Command**: `dotnet msbuild AcmeBankApp.sln /p:Configuration=Debug`\n\n### Test Status (Before Migration)  \n- **Status**: Not yet executed\n- **Target**: Establish baseline test results\n- **Command**: `vstest.console.exe AcmeBankApp.Tests\\bin\\Debug\\AcmeBankApp.Tests.dll`\n\n## Migration Analysis Completed\n\n### Projects Analyzed: 15 total\n- ✅ bank-app-1 through bank-app-15\n- ✅ Consistent .NET Framework 4.8 structure\n- ✅ Identified 4 files per project requiring changes (60 total files)\n\n### Current Dependencies Identified\n- ✅ System.Data.SqlClient 4.6.0 (to be replaced)\n- ✅ EntityFramework 6.2.0 (compatibility verified)\n- ✅ .NET Framework 4.8 (supported)\n\n### Files Requiring Changes per Project\n1. ✅ `AcmeBankApp.Data/packages.config`\n2. ✅ `AcmeBankApp.Web/packages.config`  \n3. ✅ `AcmeBankApp.Data/AcmeBankApp.Data.csproj`\n4. ✅ `AcmeBankApp.Data/DataHelper.cs`\n\n## Specification Planning\n\n### Documentation Created\n- ✅ **sqldata-migration.md**: Comprehensive migration plan (UPDATED post-Oracle review)\n- ✅ **progress.md**: This progress tracking document (UPDATED with Oracle findings)\n\n### Key Planning Elements\n- ✅ Risk assessment completed and REVISED with critical blockers\n- ✅ Quality assurance plan enhanced with performance baselines  \n- ✅ Rollback strategy documented with package backup procedures\n- ✅ Success criteria expanded with security and performance validation\n\n## Git Strategy\n\n### Branch Planning\n- **Branch Name**: `feature/migrate-to-microsoft-data-sqlclient`\n- **Commit Strategy**: One commit per project + verification commit\n- **PR Strategy**: Single PR with comprehensive build verification\n\n## Issues Encountered\n\n### CRITICAL ISSUES IDENTIFIED (Oracle Review)\n\n#### 🚨 BLOCKER 1: Entity Framework 6.2.0 Incompatibility\n- **Issue**: EF 6.2.0 does NOT support Microsoft.Data.SqlClient provider services\n- **Impact**: EF will silently continue using System.Data.SqlClient from framework\n- **Resolution**: Must upgrade to Entity Framework 6.4.4 + Microsoft.Data.SqlClient.EntityFramework\n- **Status**: BLOCKING - Requires additional phase before migration\n\n#### 🚨 BLOCKER 2: Breaking Connection String Defaults\n- **Issue**: Microsoft.Data.SqlClient 5.x defaults Encrypt=true (was false in System.Data.SqlClient)\n- **Impact**: LocalDB connections will fail without TLS certificates\n- **Resolution**: Add Encrypt=false and TrustServerCertificate=true to all connection strings\n- **Status**: BLOCKING - Must update all connection strings\n\n#### 🚨 BLOCKER 3: Native SNI Dependencies\n- **Issue**: Microsoft.Data.SqlClient requires platform-specific SNI.dll native libraries\n- **Impact**: Build agents and test runners may fail without proper deployment\n- **Resolution**: Ensure x64 platform builds and test execution\n- **Status**: BLOCKING - Requires build configuration changes\n\n### Revised Risk Assessment\n- **High Risk**: Entity Framework compatibility, connection string encryption, native dependencies\n- **Medium Risk**: Performance impact, TLS version compatibility, connection pooling changes\n- **Low Risk**: Namespace changes (after compatibility issues resolved)\n\n## REVISED Migration Steps (Post Oracle Review)\n\n### Phase 0: Critical Compatibility Resolution (NEW - REQUIRED)\n- [ ] Entity Framework upgrade: 6.2.0 → 6.4.4 across all projects\n- [ ] Install Microsoft.Data.SqlClient.EntityFramework provider packages\n- [ ] Create DbConfiguration classes for provider registration\n- [ ] Update connection strings with encryption parameters (Encrypt=false)\n- [ ] Canary testing on bank-app-1 before proceeding\n\n### Phase 1: Enhanced Pre-Migration Validation\n- [ ] Capture ADO.NET performance baseline counters\n- [ ] Build verification with x64 platform configuration\n- [ ] Add TLS connection health probe integration tests\n- [ ] Verify SNI.dll native library deployment on build agents\n\n### Phase 2: Comprehensive Package Migration\n- [ ] Entity Framework upgrade validation (if not done in Phase 0)\n- [ ] Install Microsoft.Data.SqlClient + EntityFramework extension\n- [ ] Remove System.Data.SqlClient packages cleanly\n- [ ] Update .csproj references with AutoGenerateBindingRedirects\n\n### Phase 3: Enhanced Code Migration\n- [ ] Update DbConfiguration and Web.config provider settings\n- [ ] Update using statements (84+ files including new config files)\n- [ ] Update all connection strings with encryption parameters\n- [ ] Verify assembly redirects for cryptography dependencies\n\n### Phase 4: Comprehensive Post-Migration Validation\n- [ ] Build verification with strict error/warning checking\n- [ ] TLS handshake and connection pooling validation\n- [ ] Performance counter comparison vs baseline (±5% tolerance)\n- [ ] CodeQL/SonarQube security scanning for SQL injection\n\n## Next Steps\n\n### Immediate Actions\n1. ✅ **Oracle Review**: Expert review completed with critical findings\n2. ✅ **Plan Refinement**: Specification updated based on Oracle feedback  \n3. ⏳ **Execution Approval**: Confirm updated plan before beginning migration\n4. 🆕 **Risk Mitigation**: Address EF 6.4.4 upgrade and connection string security\n\n### Execution Readiness\n- ✅ Comprehensive plan created and REVISED\n- ✅ All files identified and mapped (84+ files vs original 60)\n- ✅ Commands documented with platform-specific requirements\n- ✅ Oracle validation complete with critical blockers addressed\n- ⏳ **Ready for execution approval** with enhanced risk mitigation\n\n## Summary\n\n### What Was Completed\n- ✅ Comprehensive analysis of 15 bank application projects\n- ✅ Identification of all System.Data.SqlClient usage patterns\n- ✅ Detailed migration specification with risk assessment (REVISED)\n- ✅ Quality assurance and rollback planning (ENHANCED)\n- ✅ Complete documentation of required changes (UPDATED)\n- ✅ **Oracle expert review identifying 3 critical blockers**\n- ✅ **Updated migration plan addressing all Oracle findings**\n\n### What Changed (REVISED After Oracle Review)\n- **Files Analyzed**: 84+ files across 15 projects (increased from 60 due to EF upgrade)\n- **Dependencies Mapped**: \n  - EntityFramework 6.2.0 → 6.4.4 (CRITICAL upgrade required)\n  - System.Data.SqlClient 4.6.0 → Microsoft.Data.SqlClient 5.1.1\n  - Added: Microsoft.Data.SqlClient.EntityFramework provider\n- **Migration Strategy**: REVISED from simple drop-in to comprehensive upgrade with EF compatibility resolution\n\n### Why These Changes\n- **CRITICAL COMPATIBILITY**: EF 6.2.0 does not support Microsoft.Data.SqlClient\n- **Security Requirements**: New encryption defaults require explicit connection string updates  \n- **Platform Compatibility**: Native SNI dependencies require x64 build configuration\n- **Future-Proofing**: Prepares codebase for future .NET migrations with proper provider support\n\n### Current State\n**Oracle review completed - CRITICAL BLOCKERS IDENTIFIED** - Specification updated with mandatory EF upgrade path, connection string security updates, and enhanced validation requirements. Migration complexity increased from 2.5 to 6 hours due to EF compatibility requirements.","src/content/guides/code-migrations/multi-repo-upgrade/sql-data-migration-progress.md","6ae30e65fffc2584",{"html":1242,"metadata":1243},"\u003Ch1 id=\"migration-progress-systemdatasqlclient-to-microsoftdatasqlclient\">Migration Progress: System.Data.SqlClient to Microsoft.Data.SqlClient\u003C/h1>\n\u003Ch2 id=\"overview\">Overview\u003C/h2>\n\u003Cp>\u003Cstrong>Purpose\u003C/strong>: Migrate from System.Data.SqlClient to Microsoft.Data.SqlClient across 15 bank application projects\u003Cbr>\n\u003Cstrong>Start Date\u003C/strong>: July 24, 2025\u003Cbr>\n\u003Cstrong>Status\u003C/strong>: Oracle Review Complete - Critical Blockers Identified &#x26; Resolved in Updated Plan\u003C/p>\n\u003Ch2 id=\"pre-migration-status\">Pre-Migration Status\u003C/h2>\n\u003Ch3 id=\"build-status-before-migration\">Build Status (Before Migration)\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Status\u003C/strong>: Not yet executed\u003C/li>\n\u003Cli>\u003Cstrong>Target\u003C/strong>: Verify all 15 projects build successfully\u003C/li>\n\u003Cli>\u003Cstrong>Command\u003C/strong>: \u003Ccode>dotnet msbuild AcmeBankApp.sln /p:Configuration=Debug\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"test-status-before-migration\">Test Status (Before Migration)\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Status\u003C/strong>: Not yet executed\u003C/li>\n\u003Cli>\u003Cstrong>Target\u003C/strong>: Establish baseline test results\u003C/li>\n\u003Cli>\u003Cstrong>Command\u003C/strong>: \u003Ccode>vstest.console.exe AcmeBankApp.Tests\\bin\\Debug\\AcmeBankApp.Tests.dll\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"migration-analysis-completed\">Migration Analysis Completed\u003C/h2>\n\u003Ch3 id=\"projects-analyzed-15-total\">Projects Analyzed: 15 total\u003C/h3>\n\u003Cul>\n\u003Cli>✅ bank-app-1 through bank-app-15\u003C/li>\n\u003Cli>✅ Consistent .NET Framework 4.8 structure\u003C/li>\n\u003Cli>✅ Identified 4 files per project requiring changes (60 total files)\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"current-dependencies-identified\">Current Dependencies Identified\u003C/h3>\n\u003Cul>\n\u003Cli>✅ System.Data.SqlClient 4.6.0 (to be replaced)\u003C/li>\n\u003Cli>✅ EntityFramework 6.2.0 (compatibility verified)\u003C/li>\n\u003Cli>✅ .NET Framework 4.8 (supported)\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"files-requiring-changes-per-project\">Files Requiring Changes per Project\u003C/h3>\n\u003Col>\n\u003Cli>✅ \u003Ccode>AcmeBankApp.Data/packages.config\u003C/code>\u003C/li>\n\u003Cli>✅ \u003Ccode>AcmeBankApp.Web/packages.config\u003C/code>\u003C/li>\n\u003Cli>✅ \u003Ccode>AcmeBankApp.Data/AcmeBankApp.Data.csproj\u003C/code>\u003C/li>\n\u003Cli>✅ \u003Ccode>AcmeBankApp.Data/DataHelper.cs\u003C/code>\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"specification-planning\">Specification Planning\u003C/h2>\n\u003Ch3 id=\"documentation-created\">Documentation Created\u003C/h3>\n\u003Cul>\n\u003Cli>✅ \u003Cstrong>sqldata-migration.md\u003C/strong>: Comprehensive migration plan (UPDATED post-Oracle review)\u003C/li>\n\u003Cli>✅ \u003Cstrong>progress.md\u003C/strong>: This progress tracking document (UPDATED with Oracle findings)\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"key-planning-elements\">Key Planning Elements\u003C/h3>\n\u003Cul>\n\u003Cli>✅ Risk assessment completed and REVISED with critical blockers\u003C/li>\n\u003Cli>✅ Quality assurance plan enhanced with performance baselines\u003C/li>\n\u003Cli>✅ Rollback strategy documented with package backup procedures\u003C/li>\n\u003Cli>✅ Success criteria expanded with security and performance validation\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"git-strategy\">Git Strategy\u003C/h2>\n\u003Ch3 id=\"branch-planning\">Branch Planning\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Branch Name\u003C/strong>: \u003Ccode>feature/migrate-to-microsoft-data-sqlclient\u003C/code>\u003C/li>\n\u003Cli>\u003Cstrong>Commit Strategy\u003C/strong>: One commit per project + verification commit\u003C/li>\n\u003Cli>\u003Cstrong>PR Strategy\u003C/strong>: Single PR with comprehensive build verification\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"issues-encountered\">Issues Encountered\u003C/h2>\n\u003Ch3 id=\"critical-issues-identified-oracle-review\">CRITICAL ISSUES IDENTIFIED (Oracle Review)\u003C/h3>\n\u003Ch4 id=\"-blocker-1-entity-framework-620-incompatibility\">🚨 BLOCKER 1: Entity Framework 6.2.0 Incompatibility\u003C/h4>\n\u003Cul>\n\u003Cli>\u003Cstrong>Issue\u003C/strong>: EF 6.2.0 does NOT support Microsoft.Data.SqlClient provider services\u003C/li>\n\u003Cli>\u003Cstrong>Impact\u003C/strong>: EF will silently continue using System.Data.SqlClient from framework\u003C/li>\n\u003Cli>\u003Cstrong>Resolution\u003C/strong>: Must upgrade to Entity Framework 6.4.4 + Microsoft.Data.SqlClient.EntityFramework\u003C/li>\n\u003Cli>\u003Cstrong>Status\u003C/strong>: BLOCKING - Requires additional phase before migration\u003C/li>\n\u003C/ul>\n\u003Ch4 id=\"-blocker-2-breaking-connection-string-defaults\">🚨 BLOCKER 2: Breaking Connection String Defaults\u003C/h4>\n\u003Cul>\n\u003Cli>\u003Cstrong>Issue\u003C/strong>: Microsoft.Data.SqlClient 5.x defaults Encrypt=true (was false in System.Data.SqlClient)\u003C/li>\n\u003Cli>\u003Cstrong>Impact\u003C/strong>: LocalDB connections will fail without TLS certificates\u003C/li>\n\u003Cli>\u003Cstrong>Resolution\u003C/strong>: Add Encrypt=false and TrustServerCertificate=true to all connection strings\u003C/li>\n\u003Cli>\u003Cstrong>Status\u003C/strong>: BLOCKING - Must update all connection strings\u003C/li>\n\u003C/ul>\n\u003Ch4 id=\"-blocker-3-native-sni-dependencies\">🚨 BLOCKER 3: Native SNI Dependencies\u003C/h4>\n\u003Cul>\n\u003Cli>\u003Cstrong>Issue\u003C/strong>: Microsoft.Data.SqlClient requires platform-specific SNI.dll native libraries\u003C/li>\n\u003Cli>\u003Cstrong>Impact\u003C/strong>: Build agents and test runners may fail without proper deployment\u003C/li>\n\u003Cli>\u003Cstrong>Resolution\u003C/strong>: Ensure x64 platform builds and test execution\u003C/li>\n\u003Cli>\u003Cstrong>Status\u003C/strong>: BLOCKING - Requires build configuration changes\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"revised-risk-assessment\">Revised Risk Assessment\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>High Risk\u003C/strong>: Entity Framework compatibility, connection string encryption, native dependencies\u003C/li>\n\u003Cli>\u003Cstrong>Medium Risk\u003C/strong>: Performance impact, TLS version compatibility, connection pooling changes\u003C/li>\n\u003Cli>\u003Cstrong>Low Risk\u003C/strong>: Namespace changes (after compatibility issues resolved)\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"revised-migration-steps-post-oracle-review\">REVISED Migration Steps (Post Oracle Review)\u003C/h2>\n\u003Ch3 id=\"phase-0-critical-compatibility-resolution-new---required\">Phase 0: Critical Compatibility Resolution (NEW - REQUIRED)\u003C/h3>\n\u003Cul class=\"contains-task-list\">\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> Entity Framework upgrade: 6.2.0 → 6.4.4 across all projects\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> Install Microsoft.Data.SqlClient.EntityFramework provider packages\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> Create DbConfiguration classes for provider registration\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> Update connection strings with encryption parameters (Encrypt=false)\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> Canary testing on bank-app-1 before proceeding\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"phase-1-enhanced-pre-migration-validation\">Phase 1: Enhanced Pre-Migration Validation\u003C/h3>\n\u003Cul class=\"contains-task-list\">\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> Capture ADO.NET performance baseline counters\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> Build verification with x64 platform configuration\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> Add TLS connection health probe integration tests\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> Verify SNI.dll native library deployment on build agents\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"phase-2-comprehensive-package-migration\">Phase 2: Comprehensive Package Migration\u003C/h3>\n\u003Cul class=\"contains-task-list\">\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> Entity Framework upgrade validation (if not done in Phase 0)\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> Install Microsoft.Data.SqlClient + EntityFramework extension\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> Remove System.Data.SqlClient packages cleanly\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> Update .csproj references with AutoGenerateBindingRedirects\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"phase-3-enhanced-code-migration\">Phase 3: Enhanced Code Migration\u003C/h3>\n\u003Cul class=\"contains-task-list\">\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> Update DbConfiguration and Web.config provider settings\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> Update using statements (84+ files including new config files)\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> Update all connection strings with encryption parameters\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> Verify assembly redirects for cryptography dependencies\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"phase-4-comprehensive-post-migration-validation\">Phase 4: Comprehensive Post-Migration Validation\u003C/h3>\n\u003Cul class=\"contains-task-list\">\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> Build verification with strict error/warning checking\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> TLS handshake and connection pooling validation\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> Performance counter comparison vs baseline (±5% tolerance)\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> CodeQL/SonarQube security scanning for SQL injection\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"next-steps\">Next Steps\u003C/h2>\n\u003Ch3 id=\"immediate-actions\">Immediate Actions\u003C/h3>\n\u003Col>\n\u003Cli>✅ \u003Cstrong>Oracle Review\u003C/strong>: Expert review completed with critical findings\u003C/li>\n\u003Cli>✅ \u003Cstrong>Plan Refinement\u003C/strong>: Specification updated based on Oracle feedback\u003C/li>\n\u003Cli>⏳ \u003Cstrong>Execution Approval\u003C/strong>: Confirm updated plan before beginning migration\u003C/li>\n\u003Cli>🆕 \u003Cstrong>Risk Mitigation\u003C/strong>: Address EF 6.4.4 upgrade and connection string security\u003C/li>\n\u003C/ol>\n\u003Ch3 id=\"execution-readiness\">Execution Readiness\u003C/h3>\n\u003Cul>\n\u003Cli>✅ Comprehensive plan created and REVISED\u003C/li>\n\u003Cli>✅ All files identified and mapped (84+ files vs original 60)\u003C/li>\n\u003Cli>✅ Commands documented with platform-specific requirements\u003C/li>\n\u003Cli>✅ Oracle validation complete with critical blockers addressed\u003C/li>\n\u003Cli>⏳ \u003Cstrong>Ready for execution approval\u003C/strong> with enhanced risk mitigation\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"summary\">Summary\u003C/h2>\n\u003Ch3 id=\"what-was-completed\">What Was Completed\u003C/h3>\n\u003Cul>\n\u003Cli>✅ Comprehensive analysis of 15 bank application projects\u003C/li>\n\u003Cli>✅ Identification of all System.Data.SqlClient usage patterns\u003C/li>\n\u003Cli>✅ Detailed migration specification with risk assessment (REVISED)\u003C/li>\n\u003Cli>✅ Quality assurance and rollback planning (ENHANCED)\u003C/li>\n\u003Cli>✅ Complete documentation of required changes (UPDATED)\u003C/li>\n\u003Cli>✅ \u003Cstrong>Oracle expert review identifying 3 critical blockers\u003C/strong>\u003C/li>\n\u003Cli>✅ \u003Cstrong>Updated migration plan addressing all Oracle findings\u003C/strong>\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"what-changed-revised-after-oracle-review\">What Changed (REVISED After Oracle Review)\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Files Analyzed\u003C/strong>: 84+ files across 15 projects (increased from 60 due to EF upgrade)\u003C/li>\n\u003Cli>\u003Cstrong>Dependencies Mapped\u003C/strong>:\n\u003Cul>\n\u003Cli>EntityFramework 6.2.0 → 6.4.4 (CRITICAL upgrade required)\u003C/li>\n\u003Cli>System.Data.SqlClient 4.6.0 → Microsoft.Data.SqlClient 5.1.1\u003C/li>\n\u003Cli>Added: Microsoft.Data.SqlClient.EntityFramework provider\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Cstrong>Migration Strategy\u003C/strong>: REVISED from simple drop-in to comprehensive upgrade with EF compatibility resolution\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"why-these-changes\">Why These Changes\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>CRITICAL COMPATIBILITY\u003C/strong>: EF 6.2.0 does not support Microsoft.Data.SqlClient\u003C/li>\n\u003Cli>\u003Cstrong>Security Requirements\u003C/strong>: New encryption defaults require explicit connection string updates\u003C/li>\n\u003Cli>\u003Cstrong>Platform Compatibility\u003C/strong>: Native SNI dependencies require x64 build configuration\u003C/li>\n\u003Cli>\u003Cstrong>Future-Proofing\u003C/strong>: Prepares codebase for future .NET migrations with proper provider support\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"current-state\">Current State\u003C/h3>\n\u003Cp>\u003Cstrong>Oracle review completed - CRITICAL BLOCKERS IDENTIFIED\u003C/strong> - Specification updated with mandatory EF upgrade path, connection string security updates, and enhanced validation requirements. Migration complexity increased from 2.5 to 6 hours due to EF compatibility requirements.\u003C/p>",{"headings":1244,"localImagePaths":1344,"remoteImagePaths":1345,"frontmatter":1346,"imagePaths":1347},[1245,1248,1249,1252,1255,1258,1261,1264,1267,1270,1273,1276,1279,1282,1285,1288,1291,1294,1297,1300,1303,1306,1309,1312,1315,1318,1321,1323,1326,1329,1332,1335,1338,1341],{"depth":22,"slug":1246,"text":1247},"migration-progress-systemdatasqlclient-to-microsoftdatasqlclient","Migration Progress: System.Data.SqlClient to Microsoft.Data.SqlClient",{"depth":25,"slug":122,"text":123},{"depth":25,"slug":1250,"text":1251},"pre-migration-status","Pre-Migration Status",{"depth":32,"slug":1253,"text":1254},"build-status-before-migration","Build Status (Before Migration)",{"depth":32,"slug":1256,"text":1257},"test-status-before-migration","Test Status (Before Migration)",{"depth":25,"slug":1259,"text":1260},"migration-analysis-completed","Migration Analysis Completed",{"depth":32,"slug":1262,"text":1263},"projects-analyzed-15-total","Projects Analyzed: 15 total",{"depth":32,"slug":1265,"text":1266},"current-dependencies-identified","Current Dependencies Identified",{"depth":32,"slug":1268,"text":1269},"files-requiring-changes-per-project","Files Requiring Changes per Project",{"depth":25,"slug":1271,"text":1272},"specification-planning","Specification Planning",{"depth":32,"slug":1274,"text":1275},"documentation-created","Documentation Created",{"depth":32,"slug":1277,"text":1278},"key-planning-elements","Key Planning Elements",{"depth":25,"slug":1280,"text":1281},"git-strategy","Git Strategy",{"depth":32,"slug":1283,"text":1284},"branch-planning","Branch Planning",{"depth":25,"slug":1286,"text":1287},"issues-encountered","Issues Encountered",{"depth":32,"slug":1289,"text":1290},"critical-issues-identified-oracle-review","CRITICAL ISSUES IDENTIFIED (Oracle Review)",{"depth":324,"slug":1292,"text":1293},"-blocker-1-entity-framework-620-incompatibility","🚨 BLOCKER 1: Entity Framework 6.2.0 Incompatibility",{"depth":324,"slug":1295,"text":1296},"-blocker-2-breaking-connection-string-defaults","🚨 BLOCKER 2: Breaking Connection String Defaults",{"depth":324,"slug":1298,"text":1299},"-blocker-3-native-sni-dependencies","🚨 BLOCKER 3: Native SNI Dependencies",{"depth":32,"slug":1301,"text":1302},"revised-risk-assessment","Revised Risk Assessment",{"depth":25,"slug":1304,"text":1305},"revised-migration-steps-post-oracle-review","REVISED Migration Steps (Post Oracle Review)",{"depth":32,"slug":1307,"text":1308},"phase-0-critical-compatibility-resolution-new---required","Phase 0: Critical Compatibility Resolution (NEW - REQUIRED)",{"depth":32,"slug":1310,"text":1311},"phase-1-enhanced-pre-migration-validation","Phase 1: Enhanced Pre-Migration Validation",{"depth":32,"slug":1313,"text":1314},"phase-2-comprehensive-package-migration","Phase 2: Comprehensive Package Migration",{"depth":32,"slug":1316,"text":1317},"phase-3-enhanced-code-migration","Phase 3: Enhanced Code Migration",{"depth":32,"slug":1319,"text":1320},"phase-4-comprehensive-post-migration-validation","Phase 4: Comprehensive Post-Migration Validation",{"depth":25,"slug":1149,"text":1322},"Next Steps",{"depth":32,"slug":1324,"text":1325},"immediate-actions","Immediate Actions",{"depth":32,"slug":1327,"text":1328},"execution-readiness","Execution Readiness",{"depth":25,"slug":1330,"text":1331},"summary","Summary",{"depth":32,"slug":1333,"text":1334},"what-was-completed","What Was Completed",{"depth":32,"slug":1336,"text":1337},"what-changed-revised-after-oracle-review","What Changed (REVISED After Oracle Review)",{"depth":32,"slug":1339,"text":1340},"why-these-changes","Why These Changes",{"depth":32,"slug":1342,"text":1343},"current-state","Current State",[],[],{},[],"code-migrations/multi-repo-upgrade/sql-data-migration-progress.md","code-migrations/multi-repo-upgrade/sqldata-migration",{"id":1349,"data":1351,"body":1352,"filePath":1353,"digest":1354,"rendered":1355,"legacyId":1517},{},"# System.Data.SqlClient to Microsoft.Data.SqlClient Migration Plan\n\n## Overview\n\nThis document outlines the migration plan for upgrading from `System.Data.SqlClient` to `Microsoft.Data.SqlClient` across 15 bank application projects (bank-app-1 through bank-app-15).\n\n**Migration URL Reference**: \u003Chttps://github.com/dotnet/SqlClient/blob/main/porting-cheat-sheet.md>\n\n## Current State Analysis\n\n### Project Structure\n- **Projects**: 15 identical .NET Framework 4.8 applications (bank-app-1 to bank-app-15)\n- **Architecture**: 4-tier structure per project:\n  - `AcmeBankApp.Core` - Business logic layer\n  - `AcmeBankApp.Data` - Data access layer\n  - `AcmeBankApp.Web` - Presentation/UI layer  \n  - `AcmeBankApp.Tests` - Unit testing project\n\n### Current System.Data.SqlClient Usage\n\n#### Primary Usage Locations\n1. **DataHelper.cs** (in each Data project)\n   - Direct usage of `SqlConnection`, `SqlCommand`, `SqlDataAdapter`, `SqlParameter`\n   - Line 4: `using System.Data.SqlClient;`\n   - Contains legacy ADO.NET patterns with security vulnerabilities\n\n2. **AccountService.cs** (in each Data project)\n   - Uses System.Data.SqlClient namespace for data operations\n\n3. **Project Configuration Files**:\n   - **packages.config**: `System.Data.SqlClient` version 4.6.0\n   - **.csproj files**: Assembly references to System.Data.SqlClient 4.6.0\n   - **Web.config/App.config**: Connection string providers\n\n4. **Test Files**:\n   - **LegacyDataHelperTests.cs**: Direct SqlParameter usage\n\n### Dependencies per Project\n- EntityFramework 6.2.0\n- System.Data.SqlClient 4.6.0\n- .NET Framework 4.8\n\n## REVISED Migration Strategy (Post Oracle Review)\n\n### Phase 0: Critical Compatibility Resolution (NEW - REQUIRED)\n1. **Entity Framework Upgrade**: Upgrade EF 6.2.0 → 6.4.4 across all projects\n2. **Provider Services Installation**: Add Microsoft.Data.SqlClient.EntityFramework package\n3. **DbConfiguration Setup**: Configure provider services registration\n4. **Connection String Security**: Update all connection strings with encryption settings\n5. **Canary Testing**: Test Phase 0 changes on bank-app-1 only before proceeding\n\n### Phase 1: Pre-Migration Validation  \n1. **Performance Baseline**: Capture ADO.NET performance counters\n2. **Build Verification**: Verify all 15 projects build successfully\n3. **Integration Testing**: Add TLS connection health probes\n4. **Native Dependencies**: Verify SNI.dll deployment on build agents\n\n### Phase 2: Package Migration\n1. **Entity Framework Upgrade**: EF 6.2.0 → 6.4.4 (if not done in Phase 0)\n2. **Provider Package Installation**: Microsoft.Data.SqlClient + EntityFramework extension\n3. **Remove System.Data.SqlClient**: Clean removal from packages.config\n4. **Update Project References**: Modify .csproj with new assembly references\n\n### Phase 3: Code Migration\n1. **Provider Configuration**: Update DbConfiguration and Web.config provider settings\n2. **Namespace Updates**: Change using statements to Microsoft.Data.SqlClient\n3. **Connection String Updates**: Add Encrypt=false and TrustServerCertificate=true\n4. **Assembly Redirects**: Verify AutoGenerateBindingRedirects for crypto dependencies\n\n### Phase 4: Enhanced Post-Migration Validation\n1. **Build Verification**: All projects must build without errors or warnings\n2. **Integration Testing**: TLS handshake validation and connection pooling tests\n3. **Performance Validation**: Compare performance counters vs baseline (±5% tolerance)\n4. **Security Scanning**: CodeQL/SonarQube scan for SQL injection patterns\n\n## Detailed Implementation Plan\n\n### Files to Modify Per Project (REVISED - 84+ total files across 15 projects)\n\n#### Phase 0: Entity Framework Upgrade (NEW - 6 files per project)\n1. `AcmeBankApp.Data/packages.config`\n   - **Change**: `\u003Cpackage id=\"EntityFramework\" version=\"6.2.0\" targetFramework=\"net48\" />`\n   - **To**: `\u003Cpackage id=\"EntityFramework\" version=\"6.4.4\" targetFramework=\"net48\" />`\n   - **Add**: `\u003Cpackage id=\"Microsoft.Data.SqlClient.EntityFramework\" version=\"5.0.2\" targetFramework=\"net48\" />`\n\n2. `AcmeBankApp.Data/DbConfiguration.cs` (NEW FILE)\n   - **Create**: Provider services registration class\n\n3. `AcmeBankApp.Data/App.config`\n   - **Update**: Provider configuration and connection strings\n\n4. `AcmeBankApp.Web/packages.config`\n   - **Update**: EntityFramework version, add Microsoft.Data.SqlClient packages\n\n5. `AcmeBankApp.Web/Web.config`\n   - **Update**: Connection strings with encryption parameters\n   - **Add**: DbProviderFactories registration\n\n6. `AcmeBankApp.Web/AcmeBankApp.Web.csproj`\n   - **Add**: AutoGenerateBindingRedirects=true property\n\n#### Package Configuration (4 files per project)\n1. `AcmeBankApp.Data/packages.config`\n   - **Add**: `\u003Cpackage id=\"Microsoft.Data.SqlClient\" version=\"5.1.1\" targetFramework=\"net48\" />`\n   - **Remove**: `\u003Cpackage id=\"System.Data.SqlClient\" version=\"4.6.0\" targetFramework=\"net48\" />`\n\n2. `AcmeBankApp.Web/packages.config`  \n   - **Add**: `\u003Cpackage id=\"Microsoft.Data.SqlClient\" version=\"5.1.1\" targetFramework=\"net48\" />`\n   - **Remove**: `\u003Cpackage id=\"System.Data.SqlClient\" version=\"4.6.0\" targetFramework=\"net48\" />`\n\n3. `AcmeBankApp.Data/AcmeBankApp.Data.csproj`\n   - **Change**: Lines 47-49 System.Data.SqlClient reference\n   - **To**: Microsoft.Data.SqlClient reference with updated version and path\n\n4. `AcmeBankApp.Web/AcmeBankApp.Web.csproj`\n   - **Change**: System.Data.SqlClient reference  \n   - **To**: Microsoft.Data.SqlClient reference\n\n#### Source Code (4 files per project)\n1. `AcmeBankApp.Data/DataHelper.cs`\n   - **Change**: `using System.Data.SqlClient;` (line 4)\n   - **To**: `using Microsoft.Data.SqlClient;`\n\n2. `AcmeBankApp.Data/Services/AccountService.cs`\n   - **Change**: `using System.Data.SqlClient;`\n   - **To**: `using Microsoft.Data.SqlClient;`\n\n3. `AcmeBankApp.Tests/LegacyDataHelperTests.cs`\n   - **Change**: `using System.Data.SqlClient;`\n   - **To**: `using Microsoft.Data.SqlClient;`\n\n4. `AcmeBankApp.Data/App.config`\n   - **Update**: Entity Framework provider configuration\n   - **Add**: DbProviderFactories registration and encryption settings\n\n### Migration Commands (REVISED)\n\n#### Phase 0: Entity Framework Upgrade (per project)\n```powershell\n# Navigate to each project directory\ncd bank-app-{n}\n\n# Upgrade Entity Framework first\nnuget.exe update EntityFramework -ProjectName AcmeBankApp.Data -Version 6.4.4\nnuget.exe update EntityFramework -ProjectName AcmeBankApp.Web -Version 6.4.4\n\n# Install Microsoft.Data.SqlClient.EntityFramework provider\nnuget.exe install Microsoft.Data.SqlClient.EntityFramework -Version 5.0.2 -ProjectName AcmeBankApp.Data\n```\n\n#### NuGet Package Updates (per project)\n```powershell\n# Install new SqlClient package (use update instead of uninstall/install)\nnuget.exe update Microsoft.Data.SqlClient -Version 5.1.1 -ProjectName AcmeBankApp.Data\nnuget.exe update Microsoft.Data.SqlClient -Version 5.1.1 -ProjectName AcmeBankApp.Web\n\n# Remove old package (after new one is installed)\nnuget.exe uninstall System.Data.SqlClient -ProjectName AcmeBankApp.Data\nnuget.exe uninstall System.Data.SqlClient -ProjectName AcmeBankApp.Web\n```\n\n#### Required Configuration Files (NEW)\n\n**DbConfiguration.cs** (Create in AcmeBankApp.Data):\n```csharp\nusing System.Data.Entity;\nusing Microsoft.Data.SqlClient.EntityFramework;\n\n[DbConfigurationType(typeof(EfConfig))]\npublic class EfConfig : DbConfiguration\n{\n    public EfConfig()\n    {\n        SetProviderServices(\"Microsoft.Data.SqlClient\", \n            SqlProviderServices.Instance);\n        SetProviderFactory(\"Microsoft.Data.SqlClient\",\n            Microsoft.Data.SqlClient.SqlClientFactory.Instance);\n    }\n}\n```\n\n**Web.config/App.config Updates**:\n```xml\n\u003CconnectionStrings>\n  \u003Cadd name=\"DefaultConnection\" \n       connectionString=\"Server=(LocalDB)\\MSSQLLocalDB;Database=AcmeBank;Encrypt=false;TrustServerCertificate=true;Integrated Security=true;\" \n       providerName=\"Microsoft.Data.SqlClient\" />\n\u003C/connectionStrings>\n\n\u003Csystem.data>\n  \u003CDbProviderFactories>\n    \u003Cadd name=\"Microsoft.Data.SqlClient\"\n         invariant=\"Microsoft.Data.SqlClient\"\n         description=\".NET Framework Data Provider for SQL Server (Microsoft)\"\n         type=\"Microsoft.Data.SqlClient.SqlClientFactory, Microsoft.Data.SqlClient\" />\n  \u003C/DbProviderFactories>\n\u003C/system.data>\n```\n\n#### Build Commands (per project)\n```bash\n# Restore packages\nnuget.exe restore AcmeBankApp.sln\n\n# Build solution with x64 platform for SNI compatibility\ndotnet msbuild AcmeBankApp.sln /p:Configuration=Debug /p:Platform=x64\n\n# Run tests with x64 platform\nvstest.console.exe AcmeBankApp.Tests\\bin\\Debug\\AcmeBankApp.Tests.dll -- RunConfiguration.TargetPlatform=x64\n```\n\n#### Performance Baseline Commands\n```powershell\n# Capture ADO.NET performance counters before migration\nGet-Counter \"\\\\.NET Data Provider for SqlServer(*)\\\\*\" -MaxSamples 10\n```\n\n## Risk Assessment\n\n### Low Risk Items\n- **Namespace Changes**: Simple find/replace operation\n- **API Compatibility**: Microsoft.Data.SqlClient is a drop-in replacement\n- **Connection Strings**: Existing connection strings should work unchanged\n\n### Medium Risk Items\n- **Entity Framework Integration**: Need to verify EF 6.2.0 compatibility\n- **Package Restoration**: Ensure new packages download correctly\n- **Build Configuration**: .csproj reference updates\n\n### CRITICAL BLOCKERS (Oracle Review Findings)\n\n### 🚨 BLOCKER 1: Entity Framework 6.2.0 Incompatibility\n- **Issue**: EF 6.2.0 does NOT understand Microsoft.Data.SqlClient provider services\n- **Impact**: EF will silently continue using System.Data.SqlClient from framework\n- **Required Action**: Must upgrade to **Entity Framework 6.4.4** + **Microsoft.Data.SqlClient.EntityFramework**\n- **Status**: BLOCKING - Cannot proceed without EF upgrade\n\n### 🚨 BLOCKER 2: Breaking Connection String Changes\n- **Issue**: Microsoft.Data.SqlClient 5.x defaults Encrypt=true (was false)\n- **Impact**: Servers without valid TLS certificates will fail to connect\n- **Required Action**: Add explicit connection string parameters\n- **Status**: BLOCKING - Must update all connection strings\n\n### 🚨 BLOCKER 3: Native SNI Dependencies  \n- **Issue**: Microsoft.Data.SqlClient requires platform-specific native libraries\n- **Impact**: Build/test agents may fail without proper SNI.dll deployment\n- **Required Action**: Verify native binary deployment in CI/CD\n- **Status**: BLOCKING - Could cause runtime failures\n\n## Potential Additional Issues\n1. **TLS Version Requirements**: Default minimum TLS 1.2 may fail on older SQL Servers\n2. **Connection Pooling Changes**: Different idle connection resiliency behavior\n3. **Performance Impact**: SNI native path could affect CPU usage\n\n## Quality Assurance Plan\n\n### Pre-Migration Testing\n1. **Baseline Build**: Verify all 15 projects build successfully\n2. **Baseline Tests**: Run all unit tests and document results\n3. **Database Connectivity**: Verify database connections work\n\n### Post-Migration Testing\n1. **Build Verification**: All projects must build without errors or warnings\n2. **Unit Test Execution**: All existing tests must pass\n3. **Integration Testing**: Enhanced verification including:\n   - TLS handshake validation with Encrypt=false setting\n   - Connection pooling behavior validation\n   - User authentication (ValidateUserLegacy method)\n   - Database queries (ExecuteQuery, ExecuteParameterizedQuery)\n   - Account operations (AccountService functionality)\n4. **Performance Testing**: Compare ADO.NET counters vs baseline (±5% tolerance)\n5. **Security Scanning**: CodeQL scan for SQL injection patterns\n\n### Success Criteria\n- ✅ All 15 projects build successfully\n- ✅ All existing unit tests pass\n- ✅ No runtime exceptions during basic operations\n- ✅ Database connectivity maintained\n- ✅ No performance degradation\n\n## Timeline and Execution\n\n### Automated Execution Strategy\n1. **Parallel Processing**: Use subagents to handle multiple projects simultaneously\n2. **Batch Operations**: Group similar file modifications\n3. **Rollback Strategy**: Git branching for easy reversion\n\n### Execution Order\n1. **Projects 1-5**: First batch for validation\n2. **Projects 6-10**: Second batch after first batch success\n3. **Projects 11-15**: Final batch\n\n### REVISED Estimated Duration\n- **Phase 0 (EF Upgrade + Canary)**: 2 hours (EF upgrade + bank-app-1 testing)\n- **Phase 1 (Pre-Migration)**: 45 minutes (performance baseline + validation)\n- **Package Updates**: 60 minutes (15 projects × 4 minutes including EF)\n- **Code Changes + Configuration**: 90 minutes (namespace updates + config files)\n- **Enhanced Build & Test Verification**: 120 minutes (performance validation)\n- **Total**: ~6 hours (increased due to EF upgrade requirements)\n\n## Version Control Strategy\n\n### Git Branch Strategy\n- **Branch Name**: `feature/migrate-to-microsoft-data-sqlclient`\n- **Commit Strategy**: \n  - One commit per project for package updates\n  - One commit per project for code changes\n  - Final commit with build verification\n\n### Pull Request Requirements\n- Include build verification results\n- Document any issues encountered\n- List all modified files\n- Include test execution summary\n\n## Rollback Plan\n\n### If Migration Fails\n1. **Git Reset**: `git checkout main` to return to original state\n2. **Package Restoration**: `nuget restore` with original packages.config\n3. **Build Verification**: Ensure original state builds correctly\n\n### Partial Failure Handling\n- Complete migration on successful projects\n- Document failed projects and specific issues\n- Create separate remediation plan for failures\n\n## Success Metrics\n\n### Technical Metrics\n- **Build Success Rate**: 100% (15/15 projects must build)\n- **Test Pass Rate**: 100% (all existing tests must pass)\n- **Zero Regression**: No new compilation errors or runtime exceptions\n\n### Process Metrics\n- **Automation Coverage**: 95%+ of changes automated\n- **Manual Intervention**: Minimal manual fixes required\n- **Documentation Quality**: Complete migration log\n\n## Post-Migration Recommendations\n\n### Immediate Actions\n1. **Security Assessment**: Address SQL injection vulnerabilities (separate task)\n2. **Dependency Updates**: Consider upgrading Entity Framework to 6.4+\n3. **Code Modernization**: Implement proper error handling and logging\n\n### Long-term Improvements\n1. **Migration to .NET Core/.NET 5+**: Plan future framework upgrade\n2. **Dependency Injection**: Replace static DataHelper with proper DI\n3. **Repository Pattern**: Implement proper data access patterns\n\n## Dependencies and Prerequisites\n\n### Tools Required\n- NuGet CLI\n- MSBuild or Visual Studio\n- Git for version control\n- VSTest.Console for test execution\n\n### Environment Requirements\n- .NET Framework 4.8 installed\n- Visual Studio or Build Tools\n- SQL Server LocalDB for testing\n\n### Team Prerequisites\n- Access to modify all 15 repositories\n- Build server access for CI/CD validation\n- Database access for integration testing","src/content/guides/code-migrations/multi-repo-upgrade/sqldata-migration.md","d09a0689f39ed4f6",{"html":1356,"metadata":1357},"\u003Ch1 id=\"systemdatasqlclient-to-microsoftdatasqlclient-migration-plan\">System.Data.SqlClient to Microsoft.Data.SqlClient Migration Plan\u003C/h1>\n\u003Ch2 id=\"overview\">Overview\u003C/h2>\n\u003Cp>This document outlines the migration plan for upgrading from \u003Ccode>System.Data.SqlClient\u003C/code> to \u003Ccode>Microsoft.Data.SqlClient\u003C/code> across 15 bank application projects (bank-app-1 through bank-app-15).\u003C/p>\n\u003Cp>\u003Cstrong>Migration URL Reference\u003C/strong>: \u003Ca href=\"https://github.com/dotnet/SqlClient/blob/main/porting-cheat-sheet.md\">https://github.com/dotnet/SqlClient/blob/main/porting-cheat-sheet.md\u003C/a>\u003C/p>\n\u003Ch2 id=\"current-state-analysis\">Current State Analysis\u003C/h2>\n\u003Ch3 id=\"project-structure\">Project Structure\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Projects\u003C/strong>: 15 identical .NET Framework 4.8 applications (bank-app-1 to bank-app-15)\u003C/li>\n\u003Cli>\u003Cstrong>Architecture\u003C/strong>: 4-tier structure per project:\n\u003Cul>\n\u003Cli>\u003Ccode>AcmeBankApp.Core\u003C/code> - Business logic layer\u003C/li>\n\u003Cli>\u003Ccode>AcmeBankApp.Data\u003C/code> - Data access layer\u003C/li>\n\u003Cli>\u003Ccode>AcmeBankApp.Web\u003C/code> - Presentation/UI layer\u003C/li>\n\u003Cli>\u003Ccode>AcmeBankApp.Tests\u003C/code> - Unit testing project\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"current-systemdatasqlclient-usage\">Current System.Data.SqlClient Usage\u003C/h3>\n\u003Ch4 id=\"primary-usage-locations\">Primary Usage Locations\u003C/h4>\n\u003Col>\n\u003Cli>\n\u003Cp>\u003Cstrong>DataHelper.cs\u003C/strong> (in each Data project)\u003C/p>\n\u003Cul>\n\u003Cli>Direct usage of \u003Ccode>SqlConnection\u003C/code>, \u003Ccode>SqlCommand\u003C/code>, \u003Ccode>SqlDataAdapter\u003C/code>, \u003Ccode>SqlParameter\u003C/code>\u003C/li>\n\u003Cli>Line 4: \u003Ccode>using System.Data.SqlClient;\u003C/code>\u003C/li>\n\u003Cli>Contains legacy ADO.NET patterns with security vulnerabilities\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>AccountService.cs\u003C/strong> (in each Data project)\u003C/p>\n\u003Cul>\n\u003Cli>Uses System.Data.SqlClient namespace for data operations\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Project Configuration Files\u003C/strong>:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>packages.config\u003C/strong>: \u003Ccode>System.Data.SqlClient\u003C/code> version 4.6.0\u003C/li>\n\u003Cli>\u003Cstrong>.csproj files\u003C/strong>: Assembly references to System.Data.SqlClient 4.6.0\u003C/li>\n\u003Cli>\u003Cstrong>Web.config/App.config\u003C/strong>: Connection string providers\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Test Files\u003C/strong>:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>LegacyDataHelperTests.cs\u003C/strong>: Direct SqlParameter usage\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ol>\n\u003Ch3 id=\"dependencies-per-project\">Dependencies per Project\u003C/h3>\n\u003Cul>\n\u003Cli>EntityFramework 6.2.0\u003C/li>\n\u003Cli>System.Data.SqlClient 4.6.0\u003C/li>\n\u003Cli>.NET Framework 4.8\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"revised-migration-strategy-post-oracle-review\">REVISED Migration Strategy (Post Oracle Review)\u003C/h2>\n\u003Ch3 id=\"phase-0-critical-compatibility-resolution-new---required\">Phase 0: Critical Compatibility Resolution (NEW - REQUIRED)\u003C/h3>\n\u003Col>\n\u003Cli>\u003Cstrong>Entity Framework Upgrade\u003C/strong>: Upgrade EF 6.2.0 → 6.4.4 across all projects\u003C/li>\n\u003Cli>\u003Cstrong>Provider Services Installation\u003C/strong>: Add Microsoft.Data.SqlClient.EntityFramework package\u003C/li>\n\u003Cli>\u003Cstrong>DbConfiguration Setup\u003C/strong>: Configure provider services registration\u003C/li>\n\u003Cli>\u003Cstrong>Connection String Security\u003C/strong>: Update all connection strings with encryption settings\u003C/li>\n\u003Cli>\u003Cstrong>Canary Testing\u003C/strong>: Test Phase 0 changes on bank-app-1 only before proceeding\u003C/li>\n\u003C/ol>\n\u003Ch3 id=\"phase-1-pre-migration-validation\">Phase 1: Pre-Migration Validation\u003C/h3>\n\u003Col>\n\u003Cli>\u003Cstrong>Performance Baseline\u003C/strong>: Capture ADO.NET performance counters\u003C/li>\n\u003Cli>\u003Cstrong>Build Verification\u003C/strong>: Verify all 15 projects build successfully\u003C/li>\n\u003Cli>\u003Cstrong>Integration Testing\u003C/strong>: Add TLS connection health probes\u003C/li>\n\u003Cli>\u003Cstrong>Native Dependencies\u003C/strong>: Verify SNI.dll deployment on build agents\u003C/li>\n\u003C/ol>\n\u003Ch3 id=\"phase-2-package-migration\">Phase 2: Package Migration\u003C/h3>\n\u003Col>\n\u003Cli>\u003Cstrong>Entity Framework Upgrade\u003C/strong>: EF 6.2.0 → 6.4.4 (if not done in Phase 0)\u003C/li>\n\u003Cli>\u003Cstrong>Provider Package Installation\u003C/strong>: Microsoft.Data.SqlClient + EntityFramework extension\u003C/li>\n\u003Cli>\u003Cstrong>Remove System.Data.SqlClient\u003C/strong>: Clean removal from packages.config\u003C/li>\n\u003Cli>\u003Cstrong>Update Project References\u003C/strong>: Modify .csproj with new assembly references\u003C/li>\n\u003C/ol>\n\u003Ch3 id=\"phase-3-code-migration\">Phase 3: Code Migration\u003C/h3>\n\u003Col>\n\u003Cli>\u003Cstrong>Provider Configuration\u003C/strong>: Update DbConfiguration and Web.config provider settings\u003C/li>\n\u003Cli>\u003Cstrong>Namespace Updates\u003C/strong>: Change using statements to Microsoft.Data.SqlClient\u003C/li>\n\u003Cli>\u003Cstrong>Connection String Updates\u003C/strong>: Add Encrypt=false and TrustServerCertificate=true\u003C/li>\n\u003Cli>\u003Cstrong>Assembly Redirects\u003C/strong>: Verify AutoGenerateBindingRedirects for crypto dependencies\u003C/li>\n\u003C/ol>\n\u003Ch3 id=\"phase-4-enhanced-post-migration-validation\">Phase 4: Enhanced Post-Migration Validation\u003C/h3>\n\u003Col>\n\u003Cli>\u003Cstrong>Build Verification\u003C/strong>: All projects must build without errors or warnings\u003C/li>\n\u003Cli>\u003Cstrong>Integration Testing\u003C/strong>: TLS handshake validation and connection pooling tests\u003C/li>\n\u003Cli>\u003Cstrong>Performance Validation\u003C/strong>: Compare performance counters vs baseline (±5% tolerance)\u003C/li>\n\u003Cli>\u003Cstrong>Security Scanning\u003C/strong>: CodeQL/SonarQube scan for SQL injection patterns\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"detailed-implementation-plan\">Detailed Implementation Plan\u003C/h2>\n\u003Ch3 id=\"files-to-modify-per-project-revised---84-total-files-across-15-projects\">Files to Modify Per Project (REVISED - 84+ total files across 15 projects)\u003C/h3>\n\u003Ch4 id=\"phase-0-entity-framework-upgrade-new---6-files-per-project\">Phase 0: Entity Framework Upgrade (NEW - 6 files per project)\u003C/h4>\n\u003Col>\n\u003Cli>\n\u003Cp>\u003Ccode>AcmeBankApp.Data/packages.config\u003C/code>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Change\u003C/strong>: \u003Ccode>&#x3C;package id=\"EntityFramework\" version=\"6.2.0\" targetFramework=\"net48\" />\u003C/code>\u003C/li>\n\u003Cli>\u003Cstrong>To\u003C/strong>: \u003Ccode>&#x3C;package id=\"EntityFramework\" version=\"6.4.4\" targetFramework=\"net48\" />\u003C/code>\u003C/li>\n\u003Cli>\u003Cstrong>Add\u003C/strong>: \u003Ccode>&#x3C;package id=\"Microsoft.Data.SqlClient.EntityFramework\" version=\"5.0.2\" targetFramework=\"net48\" />\u003C/code>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Ccode>AcmeBankApp.Data/DbConfiguration.cs\u003C/code> (NEW FILE)\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Create\u003C/strong>: Provider services registration class\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Ccode>AcmeBankApp.Data/App.config\u003C/code>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Update\u003C/strong>: Provider configuration and connection strings\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Ccode>AcmeBankApp.Web/packages.config\u003C/code>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Update\u003C/strong>: EntityFramework version, add Microsoft.Data.SqlClient packages\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Ccode>AcmeBankApp.Web/Web.config\u003C/code>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Update\u003C/strong>: Connection strings with encryption parameters\u003C/li>\n\u003Cli>\u003Cstrong>Add\u003C/strong>: DbProviderFactories registration\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Ccode>AcmeBankApp.Web/AcmeBankApp.Web.csproj\u003C/code>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Add\u003C/strong>: AutoGenerateBindingRedirects=true property\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ol>\n\u003Ch4 id=\"package-configuration-4-files-per-project\">Package Configuration (4 files per project)\u003C/h4>\n\u003Col>\n\u003Cli>\n\u003Cp>\u003Ccode>AcmeBankApp.Data/packages.config\u003C/code>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Add\u003C/strong>: \u003Ccode>&#x3C;package id=\"Microsoft.Data.SqlClient\" version=\"5.1.1\" targetFramework=\"net48\" />\u003C/code>\u003C/li>\n\u003Cli>\u003Cstrong>Remove\u003C/strong>: \u003Ccode>&#x3C;package id=\"System.Data.SqlClient\" version=\"4.6.0\" targetFramework=\"net48\" />\u003C/code>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Ccode>AcmeBankApp.Web/packages.config\u003C/code>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Add\u003C/strong>: \u003Ccode>&#x3C;package id=\"Microsoft.Data.SqlClient\" version=\"5.1.1\" targetFramework=\"net48\" />\u003C/code>\u003C/li>\n\u003Cli>\u003Cstrong>Remove\u003C/strong>: \u003Ccode>&#x3C;package id=\"System.Data.SqlClient\" version=\"4.6.0\" targetFramework=\"net48\" />\u003C/code>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Ccode>AcmeBankApp.Data/AcmeBankApp.Data.csproj\u003C/code>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Change\u003C/strong>: Lines 47-49 System.Data.SqlClient reference\u003C/li>\n\u003Cli>\u003Cstrong>To\u003C/strong>: Microsoft.Data.SqlClient reference with updated version and path\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Ccode>AcmeBankApp.Web/AcmeBankApp.Web.csproj\u003C/code>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Change\u003C/strong>: System.Data.SqlClient reference\u003C/li>\n\u003Cli>\u003Cstrong>To\u003C/strong>: Microsoft.Data.SqlClient reference\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ol>\n\u003Ch4 id=\"source-code-4-files-per-project\">Source Code (4 files per project)\u003C/h4>\n\u003Col>\n\u003Cli>\n\u003Cp>\u003Ccode>AcmeBankApp.Data/DataHelper.cs\u003C/code>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Change\u003C/strong>: \u003Ccode>using System.Data.SqlClient;\u003C/code> (line 4)\u003C/li>\n\u003Cli>\u003Cstrong>To\u003C/strong>: \u003Ccode>using Microsoft.Data.SqlClient;\u003C/code>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Ccode>AcmeBankApp.Data/Services/AccountService.cs\u003C/code>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Change\u003C/strong>: \u003Ccode>using System.Data.SqlClient;\u003C/code>\u003C/li>\n\u003Cli>\u003Cstrong>To\u003C/strong>: \u003Ccode>using Microsoft.Data.SqlClient;\u003C/code>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Ccode>AcmeBankApp.Tests/LegacyDataHelperTests.cs\u003C/code>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Change\u003C/strong>: \u003Ccode>using System.Data.SqlClient;\u003C/code>\u003C/li>\n\u003Cli>\u003Cstrong>To\u003C/strong>: \u003Ccode>using Microsoft.Data.SqlClient;\u003C/code>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Ccode>AcmeBankApp.Data/App.config\u003C/code>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Update\u003C/strong>: Entity Framework provider configuration\u003C/li>\n\u003Cli>\u003Cstrong>Add\u003C/strong>: DbProviderFactories registration and encryption settings\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ol>\n\u003Ch3 id=\"migration-commands-revised\">Migration Commands (REVISED)\u003C/h3>\n\u003Ch4 id=\"phase-0-entity-framework-upgrade-per-project\">Phase 0: Entity Framework Upgrade (per project)\u003C/h4>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"powershell\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Navigate to each project directory\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">cd bank\u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#E1E4E8\">app\u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{n}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Upgrade Entity Framework first\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">nuget.exe\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> update EntityFramework \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#E1E4E8\">ProjectName AcmeBankApp.Data \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#E1E4E8\">Version \u003C/span>\u003Cspan style=\"color:#79B8FF\">6.4\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#79B8FF\">4\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">nuget.exe\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> update EntityFramework \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#E1E4E8\">ProjectName AcmeBankApp.Web \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#E1E4E8\">Version \u003C/span>\u003Cspan style=\"color:#79B8FF\">6.4\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#79B8FF\">4\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Install Microsoft.Data.SqlClient.EntityFramework provider\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">nuget.exe\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> install Microsoft.Data.SqlClient.EntityFramework \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#E1E4E8\">Version \u003C/span>\u003Cspan style=\"color:#79B8FF\">5.0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#F97583\"> -\u003C/span>\u003Cspan style=\"color:#E1E4E8\">ProjectName AcmeBankApp.Data\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch4 id=\"nuget-package-updates-per-project\">NuGet Package Updates (per project)\u003C/h4>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"powershell\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Install new SqlClient package (use update instead of uninstall/install)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">nuget.exe\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> update Microsoft.Data.SqlClient \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#E1E4E8\">Version \u003C/span>\u003Cspan style=\"color:#79B8FF\">5.1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#F97583\"> -\u003C/span>\u003Cspan style=\"color:#E1E4E8\">ProjectName AcmeBankApp.Data\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">nuget.exe\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> update Microsoft.Data.SqlClient \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#E1E4E8\">Version \u003C/span>\u003Cspan style=\"color:#79B8FF\">5.1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#F97583\"> -\u003C/span>\u003Cspan style=\"color:#E1E4E8\">ProjectName AcmeBankApp.Web\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Remove old package (after new one is installed)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">nuget.exe\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> uninstall System.Data.SqlClient \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#E1E4E8\">ProjectName AcmeBankApp.Data\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">nuget.exe\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> uninstall System.Data.SqlClient \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#E1E4E8\">ProjectName AcmeBankApp.Web\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch4 id=\"required-configuration-files-new\">Required Configuration Files (NEW)\u003C/h4>\n\u003Cp>\u003Cstrong>DbConfiguration.cs\u003C/strong> (Create in AcmeBankApp.Data):\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"csharp\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">using\u003C/span>\u003Cspan style=\"color:#B392F0\"> System\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Data\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Entity\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">using\u003C/span>\u003Cspan style=\"color:#B392F0\"> Microsoft\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Data\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">SqlClient\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">EntityFramework\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#B392F0\">DbConfigurationType\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">typeof\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">EfConfig\u003C/span>\u003Cspan style=\"color:#E1E4E8\">))]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">public\u003C/span>\u003Cspan style=\"color:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#B392F0\"> EfConfig\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> : \u003C/span>\u003Cspan style=\"color:#B392F0\">DbConfiguration\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#B392F0\"> EfConfig\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        SetProviderServices\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Microsoft.Data.SqlClient\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            SqlProviderServices.Instance);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        SetProviderFactory\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Microsoft.Data.SqlClient\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            Microsoft.Data.SqlClient.SqlClientFactory.Instance);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>Web.config/App.config Updates\u003C/strong>:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"xml\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">connectionStrings\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">add\u003C/span>\u003Cspan style=\"color:#B392F0\"> name\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"DefaultConnection\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">       connectionString\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Server=(LocalDB)\\MSSQLLocalDB;Database=AcmeBank;Encrypt=false;TrustServerCertificate=true;Integrated Security=true;\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">       providerName\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Microsoft.Data.SqlClient\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">connectionStrings\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">system.data\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">DbProviderFactories\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">add\u003C/span>\u003Cspan style=\"color:#B392F0\"> name\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Microsoft.Data.SqlClient\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">         invariant\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Microsoft.Data.SqlClient\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">         description\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\".NET Framework Data Provider for SQL Server (Microsoft)\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">         type\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Microsoft.Data.SqlClient.SqlClientFactory, Microsoft.Data.SqlClient\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">DbProviderFactories\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">system.data\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch4 id=\"build-commands-per-project\">Build Commands (per project)\u003C/h4>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Restore packages\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">nuget.exe\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> restore\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> AcmeBankApp.sln\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Build solution with x64 platform for SNI compatibility\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">dotnet\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> msbuild\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> AcmeBankApp.sln\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> /p:Configuration=Debug\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> /p:Platform=x64\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Run tests with x64 platform\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">vstest.console.exe\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> AcmeBankApp.Tests\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\b\u003C/span>\u003Cspan style=\"color:#9ECBFF\">in\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\D\u003C/span>\u003Cspan style=\"color:#9ECBFF\">ebug\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\A\u003C/span>\u003Cspan style=\"color:#9ECBFF\">cmeBankApp.Tests.dll\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> RunConfiguration.TargetPlatform=x64\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch4 id=\"performance-baseline-commands\">Performance Baseline Commands\u003C/h4>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"powershell\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Capture ADO.NET performance counters before migration\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">Get-Counter\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"\\\\.NET Data Provider for SqlServer(*)\\\\*\"\u003C/span>\u003Cspan style=\"color:#F97583\"> -\u003C/span>\u003Cspan style=\"color:#E1E4E8\">MaxSamples \u003C/span>\u003Cspan style=\"color:#79B8FF\">10\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"risk-assessment\">Risk Assessment\u003C/h2>\n\u003Ch3 id=\"low-risk-items\">Low Risk Items\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Namespace Changes\u003C/strong>: Simple find/replace operation\u003C/li>\n\u003Cli>\u003Cstrong>API Compatibility\u003C/strong>: Microsoft.Data.SqlClient is a drop-in replacement\u003C/li>\n\u003Cli>\u003Cstrong>Connection Strings\u003C/strong>: Existing connection strings should work unchanged\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"medium-risk-items\">Medium Risk Items\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Entity Framework Integration\u003C/strong>: Need to verify EF 6.2.0 compatibility\u003C/li>\n\u003Cli>\u003Cstrong>Package Restoration\u003C/strong>: Ensure new packages download correctly\u003C/li>\n\u003Cli>\u003Cstrong>Build Configuration\u003C/strong>: .csproj reference updates\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"critical-blockers-oracle-review-findings\">CRITICAL BLOCKERS (Oracle Review Findings)\u003C/h3>\n\u003Ch3 id=\"-blocker-1-entity-framework-620-incompatibility\">🚨 BLOCKER 1: Entity Framework 6.2.0 Incompatibility\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Issue\u003C/strong>: EF 6.2.0 does NOT understand Microsoft.Data.SqlClient provider services\u003C/li>\n\u003Cli>\u003Cstrong>Impact\u003C/strong>: EF will silently continue using System.Data.SqlClient from framework\u003C/li>\n\u003Cli>\u003Cstrong>Required Action\u003C/strong>: Must upgrade to \u003Cstrong>Entity Framework 6.4.4\u003C/strong> + \u003Cstrong>Microsoft.Data.SqlClient.EntityFramework\u003C/strong>\u003C/li>\n\u003Cli>\u003Cstrong>Status\u003C/strong>: BLOCKING - Cannot proceed without EF upgrade\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"-blocker-2-breaking-connection-string-changes\">🚨 BLOCKER 2: Breaking Connection String Changes\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Issue\u003C/strong>: Microsoft.Data.SqlClient 5.x defaults Encrypt=true (was false)\u003C/li>\n\u003Cli>\u003Cstrong>Impact\u003C/strong>: Servers without valid TLS certificates will fail to connect\u003C/li>\n\u003Cli>\u003Cstrong>Required Action\u003C/strong>: Add explicit connection string parameters\u003C/li>\n\u003Cli>\u003Cstrong>Status\u003C/strong>: BLOCKING - Must update all connection strings\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"-blocker-3-native-sni-dependencies\">🚨 BLOCKER 3: Native SNI Dependencies\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Issue\u003C/strong>: Microsoft.Data.SqlClient requires platform-specific native libraries\u003C/li>\n\u003Cli>\u003Cstrong>Impact\u003C/strong>: Build/test agents may fail without proper SNI.dll deployment\u003C/li>\n\u003Cli>\u003Cstrong>Required Action\u003C/strong>: Verify native binary deployment in CI/CD\u003C/li>\n\u003Cli>\u003Cstrong>Status\u003C/strong>: BLOCKING - Could cause runtime failures\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"potential-additional-issues\">Potential Additional Issues\u003C/h2>\n\u003Col>\n\u003Cli>\u003Cstrong>TLS Version Requirements\u003C/strong>: Default minimum TLS 1.2 may fail on older SQL Servers\u003C/li>\n\u003Cli>\u003Cstrong>Connection Pooling Changes\u003C/strong>: Different idle connection resiliency behavior\u003C/li>\n\u003Cli>\u003Cstrong>Performance Impact\u003C/strong>: SNI native path could affect CPU usage\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"quality-assurance-plan\">Quality Assurance Plan\u003C/h2>\n\u003Ch3 id=\"pre-migration-testing\">Pre-Migration Testing\u003C/h3>\n\u003Col>\n\u003Cli>\u003Cstrong>Baseline Build\u003C/strong>: Verify all 15 projects build successfully\u003C/li>\n\u003Cli>\u003Cstrong>Baseline Tests\u003C/strong>: Run all unit tests and document results\u003C/li>\n\u003Cli>\u003Cstrong>Database Connectivity\u003C/strong>: Verify database connections work\u003C/li>\n\u003C/ol>\n\u003Ch3 id=\"post-migration-testing\">Post-Migration Testing\u003C/h3>\n\u003Col>\n\u003Cli>\u003Cstrong>Build Verification\u003C/strong>: All projects must build without errors or warnings\u003C/li>\n\u003Cli>\u003Cstrong>Unit Test Execution\u003C/strong>: All existing tests must pass\u003C/li>\n\u003Cli>\u003Cstrong>Integration Testing\u003C/strong>: Enhanced verification including:\n\u003Cul>\n\u003Cli>TLS handshake validation with Encrypt=false setting\u003C/li>\n\u003Cli>Connection pooling behavior validation\u003C/li>\n\u003Cli>User authentication (ValidateUserLegacy method)\u003C/li>\n\u003Cli>Database queries (ExecuteQuery, ExecuteParameterizedQuery)\u003C/li>\n\u003Cli>Account operations (AccountService functionality)\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Cstrong>Performance Testing\u003C/strong>: Compare ADO.NET counters vs baseline (±5% tolerance)\u003C/li>\n\u003Cli>\u003Cstrong>Security Scanning\u003C/strong>: CodeQL scan for SQL injection patterns\u003C/li>\n\u003C/ol>\n\u003Ch3 id=\"success-criteria\">Success Criteria\u003C/h3>\n\u003Cul>\n\u003Cli>✅ All 15 projects build successfully\u003C/li>\n\u003Cli>✅ All existing unit tests pass\u003C/li>\n\u003Cli>✅ No runtime exceptions during basic operations\u003C/li>\n\u003Cli>✅ Database connectivity maintained\u003C/li>\n\u003Cli>✅ No performance degradation\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"timeline-and-execution\">Timeline and Execution\u003C/h2>\n\u003Ch3 id=\"automated-execution-strategy\">Automated Execution Strategy\u003C/h3>\n\u003Col>\n\u003Cli>\u003Cstrong>Parallel Processing\u003C/strong>: Use subagents to handle multiple projects simultaneously\u003C/li>\n\u003Cli>\u003Cstrong>Batch Operations\u003C/strong>: Group similar file modifications\u003C/li>\n\u003Cli>\u003Cstrong>Rollback Strategy\u003C/strong>: Git branching for easy reversion\u003C/li>\n\u003C/ol>\n\u003Ch3 id=\"execution-order\">Execution Order\u003C/h3>\n\u003Col>\n\u003Cli>\u003Cstrong>Projects 1-5\u003C/strong>: First batch for validation\u003C/li>\n\u003Cli>\u003Cstrong>Projects 6-10\u003C/strong>: Second batch after first batch success\u003C/li>\n\u003Cli>\u003Cstrong>Projects 11-15\u003C/strong>: Final batch\u003C/li>\n\u003C/ol>\n\u003Ch3 id=\"revised-estimated-duration\">REVISED Estimated Duration\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Phase 0 (EF Upgrade + Canary)\u003C/strong>: 2 hours (EF upgrade + bank-app-1 testing)\u003C/li>\n\u003Cli>\u003Cstrong>Phase 1 (Pre-Migration)\u003C/strong>: 45 minutes (performance baseline + validation)\u003C/li>\n\u003Cli>\u003Cstrong>Package Updates\u003C/strong>: 60 minutes (15 projects × 4 minutes including EF)\u003C/li>\n\u003Cli>\u003Cstrong>Code Changes + Configuration\u003C/strong>: 90 minutes (namespace updates + config files)\u003C/li>\n\u003Cli>\u003Cstrong>Enhanced Build &#x26; Test Verification\u003C/strong>: 120 minutes (performance validation)\u003C/li>\n\u003Cli>\u003Cstrong>Total\u003C/strong>: ~6 hours (increased due to EF upgrade requirements)\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"version-control-strategy\">Version Control Strategy\u003C/h2>\n\u003Ch3 id=\"git-branch-strategy\">Git Branch Strategy\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Branch Name\u003C/strong>: \u003Ccode>feature/migrate-to-microsoft-data-sqlclient\u003C/code>\u003C/li>\n\u003Cli>\u003Cstrong>Commit Strategy\u003C/strong>:\n\u003Cul>\n\u003Cli>One commit per project for package updates\u003C/li>\n\u003Cli>One commit per project for code changes\u003C/li>\n\u003Cli>Final commit with build verification\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"pull-request-requirements\">Pull Request Requirements\u003C/h3>\n\u003Cul>\n\u003Cli>Include build verification results\u003C/li>\n\u003Cli>Document any issues encountered\u003C/li>\n\u003Cli>List all modified files\u003C/li>\n\u003Cli>Include test execution summary\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"rollback-plan\">Rollback Plan\u003C/h2>\n\u003Ch3 id=\"if-migration-fails\">If Migration Fails\u003C/h3>\n\u003Col>\n\u003Cli>\u003Cstrong>Git Reset\u003C/strong>: \u003Ccode>git checkout main\u003C/code> to return to original state\u003C/li>\n\u003Cli>\u003Cstrong>Package Restoration\u003C/strong>: \u003Ccode>nuget restore\u003C/code> with original packages.config\u003C/li>\n\u003Cli>\u003Cstrong>Build Verification\u003C/strong>: Ensure original state builds correctly\u003C/li>\n\u003C/ol>\n\u003Ch3 id=\"partial-failure-handling\">Partial Failure Handling\u003C/h3>\n\u003Cul>\n\u003Cli>Complete migration on successful projects\u003C/li>\n\u003Cli>Document failed projects and specific issues\u003C/li>\n\u003Cli>Create separate remediation plan for failures\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"success-metrics\">Success Metrics\u003C/h2>\n\u003Ch3 id=\"technical-metrics\">Technical Metrics\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Build Success Rate\u003C/strong>: 100% (15/15 projects must build)\u003C/li>\n\u003Cli>\u003Cstrong>Test Pass Rate\u003C/strong>: 100% (all existing tests must pass)\u003C/li>\n\u003Cli>\u003Cstrong>Zero Regression\u003C/strong>: No new compilation errors or runtime exceptions\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"process-metrics\">Process Metrics\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Automation Coverage\u003C/strong>: 95%+ of changes automated\u003C/li>\n\u003Cli>\u003Cstrong>Manual Intervention\u003C/strong>: Minimal manual fixes required\u003C/li>\n\u003Cli>\u003Cstrong>Documentation Quality\u003C/strong>: Complete migration log\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"post-migration-recommendations\">Post-Migration Recommendations\u003C/h2>\n\u003Ch3 id=\"immediate-actions\">Immediate Actions\u003C/h3>\n\u003Col>\n\u003Cli>\u003Cstrong>Security Assessment\u003C/strong>: Address SQL injection vulnerabilities (separate task)\u003C/li>\n\u003Cli>\u003Cstrong>Dependency Updates\u003C/strong>: Consider upgrading Entity Framework to 6.4+\u003C/li>\n\u003Cli>\u003Cstrong>Code Modernization\u003C/strong>: Implement proper error handling and logging\u003C/li>\n\u003C/ol>\n\u003Ch3 id=\"long-term-improvements\">Long-term Improvements\u003C/h3>\n\u003Col>\n\u003Cli>\u003Cstrong>Migration to .NET Core/.NET 5+\u003C/strong>: Plan future framework upgrade\u003C/li>\n\u003Cli>\u003Cstrong>Dependency Injection\u003C/strong>: Replace static DataHelper with proper DI\u003C/li>\n\u003Cli>\u003Cstrong>Repository Pattern\u003C/strong>: Implement proper data access patterns\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"dependencies-and-prerequisites\">Dependencies and Prerequisites\u003C/h2>\n\u003Ch3 id=\"tools-required\">Tools Required\u003C/h3>\n\u003Cul>\n\u003Cli>NuGet CLI\u003C/li>\n\u003Cli>MSBuild or Visual Studio\u003C/li>\n\u003Cli>Git for version control\u003C/li>\n\u003Cli>VSTest.Console for test execution\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"environment-requirements\">Environment Requirements\u003C/h3>\n\u003Cul>\n\u003Cli>.NET Framework 4.8 installed\u003C/li>\n\u003Cli>Visual Studio or Build Tools\u003C/li>\n\u003Cli>SQL Server LocalDB for testing\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"team-prerequisites\">Team Prerequisites\u003C/h3>\n\u003Cul>\n\u003Cli>Access to modify all 15 repositories\u003C/li>\n\u003Cli>Build server access for CI/CD validation\u003C/li>\n\u003Cli>Database access for integration testing\u003C/li>\n\u003C/ul>",{"headings":1358,"localImagePaths":1513,"remoteImagePaths":1514,"frontmatter":1515,"imagePaths":1516},[1359,1362,1363,1366,1367,1370,1373,1376,1379,1380,1383,1386,1389,1392,1395,1398,1401,1404,1407,1410,1413,1416,1419,1422,1425,1428,1431,1434,1437,1438,1441,1442,1445,1448,1451,1454,1455,1458,1461,1464,1467,1470,1473,1476,1479,1482,1485,1488,1491,1494,1497,1498,1501,1504,1507,1510],{"depth":22,"slug":1360,"text":1361},"systemdatasqlclient-to-microsoftdatasqlclient-migration-plan","System.Data.SqlClient to Microsoft.Data.SqlClient Migration Plan",{"depth":25,"slug":122,"text":123},{"depth":25,"slug":1364,"text":1365},"current-state-analysis","Current State Analysis",{"depth":32,"slug":652,"text":653},{"depth":32,"slug":1368,"text":1369},"current-systemdatasqlclient-usage","Current System.Data.SqlClient Usage",{"depth":324,"slug":1371,"text":1372},"primary-usage-locations","Primary Usage Locations",{"depth":32,"slug":1374,"text":1375},"dependencies-per-project","Dependencies per Project",{"depth":25,"slug":1377,"text":1378},"revised-migration-strategy-post-oracle-review","REVISED Migration Strategy (Post Oracle Review)",{"depth":32,"slug":1307,"text":1308},{"depth":32,"slug":1381,"text":1382},"phase-1-pre-migration-validation","Phase 1: Pre-Migration Validation",{"depth":32,"slug":1384,"text":1385},"phase-2-package-migration","Phase 2: Package Migration",{"depth":32,"slug":1387,"text":1388},"phase-3-code-migration","Phase 3: Code Migration",{"depth":32,"slug":1390,"text":1391},"phase-4-enhanced-post-migration-validation","Phase 4: Enhanced Post-Migration Validation",{"depth":25,"slug":1393,"text":1394},"detailed-implementation-plan","Detailed Implementation Plan",{"depth":32,"slug":1396,"text":1397},"files-to-modify-per-project-revised---84-total-files-across-15-projects","Files to Modify Per Project (REVISED - 84+ total files across 15 projects)",{"depth":324,"slug":1399,"text":1400},"phase-0-entity-framework-upgrade-new---6-files-per-project","Phase 0: Entity Framework Upgrade (NEW - 6 files per project)",{"depth":324,"slug":1402,"text":1403},"package-configuration-4-files-per-project","Package Configuration (4 files per project)",{"depth":324,"slug":1405,"text":1406},"source-code-4-files-per-project","Source Code (4 files per project)",{"depth":32,"slug":1408,"text":1409},"migration-commands-revised","Migration Commands (REVISED)",{"depth":324,"slug":1411,"text":1412},"phase-0-entity-framework-upgrade-per-project","Phase 0: Entity Framework Upgrade (per project)",{"depth":324,"slug":1414,"text":1415},"nuget-package-updates-per-project","NuGet Package Updates (per project)",{"depth":324,"slug":1417,"text":1418},"required-configuration-files-new","Required Configuration Files (NEW)",{"depth":324,"slug":1420,"text":1421},"build-commands-per-project","Build Commands (per project)",{"depth":324,"slug":1423,"text":1424},"performance-baseline-commands","Performance Baseline Commands",{"depth":25,"slug":1426,"text":1427},"risk-assessment","Risk Assessment",{"depth":32,"slug":1429,"text":1430},"low-risk-items","Low Risk Items",{"depth":32,"slug":1432,"text":1433},"medium-risk-items","Medium Risk Items",{"depth":32,"slug":1435,"text":1436},"critical-blockers-oracle-review-findings","CRITICAL BLOCKERS (Oracle Review Findings)",{"depth":32,"slug":1292,"text":1293},{"depth":32,"slug":1439,"text":1440},"-blocker-2-breaking-connection-string-changes","🚨 BLOCKER 2: Breaking Connection String Changes",{"depth":32,"slug":1298,"text":1299},{"depth":25,"slug":1443,"text":1444},"potential-additional-issues","Potential Additional Issues",{"depth":25,"slug":1446,"text":1447},"quality-assurance-plan","Quality Assurance Plan",{"depth":32,"slug":1449,"text":1450},"pre-migration-testing","Pre-Migration Testing",{"depth":32,"slug":1452,"text":1453},"post-migration-testing","Post-Migration Testing",{"depth":32,"slug":1146,"text":1147},{"depth":25,"slug":1456,"text":1457},"timeline-and-execution","Timeline and Execution",{"depth":32,"slug":1459,"text":1460},"automated-execution-strategy","Automated Execution Strategy",{"depth":32,"slug":1462,"text":1463},"execution-order","Execution Order",{"depth":32,"slug":1465,"text":1466},"revised-estimated-duration","REVISED Estimated Duration",{"depth":25,"slug":1468,"text":1469},"version-control-strategy","Version Control Strategy",{"depth":32,"slug":1471,"text":1472},"git-branch-strategy","Git Branch Strategy",{"depth":32,"slug":1474,"text":1475},"pull-request-requirements","Pull Request Requirements",{"depth":25,"slug":1477,"text":1478},"rollback-plan","Rollback Plan",{"depth":32,"slug":1480,"text":1481},"if-migration-fails","If Migration Fails",{"depth":32,"slug":1483,"text":1484},"partial-failure-handling","Partial Failure Handling",{"depth":25,"slug":1486,"text":1487},"success-metrics","Success Metrics",{"depth":32,"slug":1489,"text":1490},"technical-metrics","Technical Metrics",{"depth":32,"slug":1492,"text":1493},"process-metrics","Process Metrics",{"depth":25,"slug":1495,"text":1496},"post-migration-recommendations","Post-Migration Recommendations",{"depth":32,"slug":1324,"text":1325},{"depth":32,"slug":1499,"text":1500},"long-term-improvements","Long-term Improvements",{"depth":25,"slug":1502,"text":1503},"dependencies-and-prerequisites","Dependencies and Prerequisites",{"depth":32,"slug":1505,"text":1506},"tools-required","Tools Required",{"depth":32,"slug":1508,"text":1509},"environment-requirements","Environment Requirements",{"depth":32,"slug":1511,"text":1512},"team-prerequisites","Team Prerequisites",[],[],{},[],"code-migrations/multi-repo-upgrade/sqldata-migration.md","examples",["Map",11,1520,1535,1536,1570,1571,1609,1610,1636,1637,1670,1671,1710,1711,1741,1742,1827,1828,1854,1855,1924,1925],{"id":11,"data":1521,"body":1522,"filePath":1523,"digest":1524,"rendered":1525,"legacyId":51},{},"# Examples\n\nExamples are intended to address specific use-cases with languages, frameworks, or tools.\nExamples should be concise, focused, and should always contain a Thread link to provide\nadditional context on how Amp solved an example use-case.\n\n|Example|Description|\n|:---|:---|\n|[Amp + Code Search](amp+codesearch/README.md)|Utilizing Sourcegraph code search to make targeted changes across multiple repositories|\n|[Multi-root Workspaces](multi-root-workspaces/README.md)|Working with multiple projects in a single workspace|\n|[OpenAPI Spec Generation](openapi-spec-generation/README.md)|Generating and maintaining OpenAPI specifications|\n|[GitHub Review Bot](automation/github-review-bot/README.md)|Automated code review bot using GitHub Actions and Amp CLI|\n|[GitLab Review Bot](automation/gitlab-review-bot/README.md)|Automated merge request reviews with GitLab CI and Amp|\n|[JetBrains IDE Setup](ide/jetbrains/jetbrains-amp-cli-setup.md)|Setting up Amp with JetBrains IDEs for enhanced context|\n|[SonarQube Automation](automation/sonarqube-amp/README.md)|Automated SonarQube issue processing and PR creation|","src/content/examples/README.md","ad4b67969557dc41",{"html":1526,"metadata":1527},"\u003Ch1 id=\"examples\">Examples\u003C/h1>\n\u003Cp>Examples are intended to address specific use-cases with languages, frameworks, or tools.\nExamples should be concise, focused, and should always contain a Thread link to provide\nadditional context on how Amp solved an example use-case.\u003C/p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth align=\"left\">Example\u003C/th>\u003Cth align=\"left\">Description\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd align=\"left\">\u003Ca href=\"amp+codesearch/README.md\">Amp + Code Search\u003C/a>\u003C/td>\u003Ctd align=\"left\">Utilizing Sourcegraph code search to make targeted changes across multiple repositories\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd align=\"left\">\u003Ca href=\"multi-root-workspaces/README.md\">Multi-root Workspaces\u003C/a>\u003C/td>\u003Ctd align=\"left\">Working with multiple projects in a single workspace\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd align=\"left\">\u003Ca href=\"openapi-spec-generation/README.md\">OpenAPI Spec Generation\u003C/a>\u003C/td>\u003Ctd align=\"left\">Generating and maintaining OpenAPI specifications\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd align=\"left\">\u003Ca href=\"automation/github-review-bot/README.md\">GitHub Review Bot\u003C/a>\u003C/td>\u003Ctd align=\"left\">Automated code review bot using GitHub Actions and Amp CLI\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd align=\"left\">\u003Ca href=\"automation/gitlab-review-bot/README.md\">GitLab Review Bot\u003C/a>\u003C/td>\u003Ctd align=\"left\">Automated merge request reviews with GitLab CI and Amp\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd align=\"left\">\u003Ca href=\"ide/jetbrains/jetbrains-amp-cli-setup.md\">JetBrains IDE Setup\u003C/a>\u003C/td>\u003Ctd align=\"left\">Setting up Amp with JetBrains IDEs for enhanced context\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd align=\"left\">\u003Ca href=\"automation/sonarqube-amp/README.md\">SonarQube Automation\u003C/a>\u003C/td>\u003Ctd align=\"left\">Automated SonarQube issue processing and PR creation\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>",{"headings":1528,"localImagePaths":1531,"remoteImagePaths":1532,"frontmatter":1533,"imagePaths":1534},[1529],{"depth":22,"slug":1518,"text":1530},"Examples",[],[],{},[],"ampcodesearch/readme",{"id":1535,"data":1537,"body":1538,"filePath":1539,"digest":1540,"rendered":1541,"legacyId":1569},{},"# Integrating Code Search and Amp\n\n> **_NOTE:_**: Combining Code Search and Amp should only be presented to **existing**\nCode Search customers with a valid use-case.\n\n## Using Amp on Multiple Repositories\n\n### Qualifying Questions\n\n* Is searching their **entire** organizations codebase a requirement? (Searching\nacross **EVERY** repository?)\n  * **YES:** Contact [#discuss-field-engineering](https://sourcegraph.slack.com/archives/C095PTMTS31)\n  * **NO:** Proceed to next question(s)\n\n* Do they regularly work with multiple applications that interact with one\nanother? (Separate frontend/backend and internal libraries, all in different repositories.)\n  * **YES:** Use Amp's\n  [multi-root support](https://ampcode.com/news/multi-root-workspaces). Code Search is not required\n  * **NO:** Code Search is not needed. Amp's functionality will serve their needs\n\n### Examples\n\n#### Remediating vulnerabilities in multiple repositories\n\n##### Without Code Search (Example [Thread](https://ampcode.com/threads/T-22ad3789-6991-4380-ae08-801ac4d96af4)) [Preferred Solution]\n\nAssume that the developer's repositories that all interact with each other are in a common root directory\n\n```bash\n~/sourcegraph/log4j travis.lyons@sourcegraph.com\n❯ ls\nPermissions Size User Date Modified Name\ndrwxr-xr-x@    - trly 31 Jul 10:28  Lipstick\ndrwxr-xr-x@    - trly 31 Jul 10:28  ndbench\ndrwxr-xr-x@    - trly 31 Jul 10:28  sample-vulnerable-log4j-direct-lib\ndrwxr-xr-x@    - trly 31 Jul 10:28  spring-webflow\ndrwxr-xr-x@    - trly 31 Jul 10:28  udpated-vulnerable-log4j-direct-lib\ndrwxr-xr-x@    - trly 31 Jul 10:28  updated-vulnerable-log4j-direct-app\n```\n\n1. Use Amp execute to take action on everything in the current directory.\n\n```bash\namp -x 'upgrade each application to the latest version of log4j,\n2.15.1 and commit the change to a local log4j/2.15.1 branch'\n\nSuccessfully upgraded all applications to log4j 2.15.1 and committed changes to the `log4j/2.15.1` branch in each repository. The upgrades included:\n\n- **Lipstick**: Updated from 2.8.2 to 2.15.1\n- **ndbench**: Updated log4j-to-slf4j from 2.14.1 to 2.15.1\n- **sample-vulnerable-log4j-direct-lib**: Updated from 2.14.1 to 2.15.1\n- **spring-webflow**: Updated from 2.14.0 to 2.15.1\n- **udpated-vulnerable-log4j-direct-lib**: Updated from 2.14.1 to 2.15.1\n- **updated-vulnerable-log4j-direct-app**: Updated from 2.14.1 to 2.15.1\n```\n\n##### With Code Search (Example [Thread](https://ampcode.com/threads/T-652c6d27-8ae1-4e61-923d-a4d40071cb4b))\n\n1. Identify repositories requiring remediation (log4j2 vulnerability)\n\n```bash\nsrc search -json -- '\nfile:build\\.gradle[.kts]?|pom\\.xml patterntype:regexp\norg\\.apache\\.logging\\.log4j 2\\.(0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16)(\\.[0-9]+)' \\\n| jq '.Results[] | {file: .file.path, repository: .repository.name}'\n```\n\n```json\n{\n  \"file\": \"build.gradle\",\n  \"repository\": \"github.com/spring-projects/spring-webflow\"\n}\n{\n  \"file\": \"ndbench-es-plugins/build.gradle\",\n  \"repository\": \"github.com/Netflix/ndbench\"\n}\n{\n  \"file\": \"lib/build.gradle\",\n  \"repository\": \"github.com/dhdiemer/sample-vulnerable-log4j-direct-lib\"\n}\n{\n  \"file\": \"lib/build.gradle\",\n  \"repository\": \"github.com/dhdiemer/udpated-vulnerable-log4j-direct-lib\"\n}\n{\n  \"file\": \"app/build.gradle\",\n  \"repository\": \"github.com/dhdiemer/updated-vulnerable-log4j-direct-app\"\n}\n{\n  \"file\": \"build.gradle\",\n  \"repository\": \"github.com/Netflix/Lipstick\"\n}\n```\n\n2. Pipe the search results into Amp\n\n```bash\nsrc search -json -- 'file:build\\.gradle[.kts]?|pom\\.xml\norg\\.apache\\.logging\\.log4j 2\\.(0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16)(\\.[0-9]+)\npatterntype:regexp' \\\n| jq '.Results[] | {file: .file.path, repository: .repository.name}' \\\n| amp -x 'Update log4j in each of the listed repositories to the latest version, 2.15.1\nusing a sub-agent per repository, clone then commit the change locally in a new branch named log4j/2.15.1\nProvide a list of which repositores were successfully updated and which were not.'\n\n## Update Results\n\n**All 6 repositories were successfully updated:**\n\n✅ **spring-projects/spring-webflow** - Updated from 2.14.0 → 2.15.1\n✅ **Netflix/ndbench** - Updated from 2.14.1 → 2.15.1\n✅ **dhdiemer/sample-vulnerable-log4j-direct-lib** - Updated from 2.14.1 → 2.15.1\n✅ **dhdiemer/udpated-vulnerable-log4j-direct-lib** - Updated from 2.14.1 → 2.15.1\n✅ **dhdiemer/updated-vulnerable-log4j-direct-app** - Updated from 2.14.1 → 2.15.1\n✅ **Netflix/Lipstick** - Updated from 2.8.2 → 2.15.1\n\nAll repositories now have the changes committed on branch `log4j/2.15.1`.\n```\n\n3. Validate Changes\n\n```bash\n>_ git log -n 1\ncommit b2c4637907281c95b74de3e6d3a8331c55292b80 (HEAD -> log4j/2.15.1)\nAuthor: Travis Lyons \u003Ctravis.lyons@sourcegraph.com>\nDate:   Thu Jul 31 10:16:45 2025 -0400\n\n    Update log4j to 2.15.1\n\n    Co-authored-by: Amp \u003Camp@ampcode.com>\n    Amp-Thread-ID: https://ampcode.com/threads/T-652c6d27-8ae1-4e61-923d-a4d40071cb4b\n\n\n\n>_ git diff HEAD~1\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\nmodified: build.gradle\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n@ build.gradle:129 @ project(':lipstick-server') {\n    runtime 'com.netflix.eureka:eureka-client:1.1.141'\n    runtime 'org.elasticsearch:elasticsearch:5.4.1'\n    runtime 'org.elasticsearch.client:transport:5.4.1'\n    runtime 'org.apache.logging.log4j:log4j-core:2.8.2'\n    runtime 'org.apache.logging.log4j:log4j-api:2.8.2'\n    runtime 'org.apache.logging.log4j:log4j-core:2.15.1'\n    runtime 'org.apache.logging.log4j:log4j-api:2.15.1'\n    runtime 'org.hibernate:hibernate-entitymanager:3.6.0.Final'\n    runtime 'org.codehaus.jackson:jackson-mapper-asl:1.9.10'\n  }\n```","src/content/examples/amp+codesearch/README.md","b39f63a12017d37e",{"html":1542,"metadata":1543},"\u003Ch1 id=\"integrating-code-search-and-amp\">Integrating Code Search and Amp\u003C/h1>\n\u003Cblockquote>\n\u003Cp>\u003Cstrong>\u003Cem>NOTE:\u003C/em>\u003C/strong>: Combining Code Search and Amp should only be presented to \u003Cstrong>existing\u003C/strong>\nCode Search customers with a valid use-case.\u003C/p>\n\u003C/blockquote>\n\u003Ch2 id=\"using-amp-on-multiple-repositories\">Using Amp on Multiple Repositories\u003C/h2>\n\u003Ch3 id=\"qualifying-questions\">Qualifying Questions\u003C/h3>\n\u003Cul>\n\u003Cli>\n\u003Cp>Is searching their \u003Cstrong>entire\u003C/strong> organizations codebase a requirement? (Searching\nacross \u003Cstrong>EVERY\u003C/strong> repository?)\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>YES:\u003C/strong> Contact \u003Ca href=\"https://sourcegraph.slack.com/archives/C095PTMTS31\">#discuss-field-engineering\u003C/a>\u003C/li>\n\u003Cli>\u003Cstrong>NO:\u003C/strong> Proceed to next question(s)\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>Do they regularly work with multiple applications that interact with one\nanother? (Separate frontend/backend and internal libraries, all in different repositories.)\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>YES:\u003C/strong> Use Amp’s\n\u003Ca href=\"https://ampcode.com/news/multi-root-workspaces\">multi-root support\u003C/a>. Code Search is not required\u003C/li>\n\u003Cli>\u003Cstrong>NO:\u003C/strong> Code Search is not needed. Amp’s functionality will serve their needs\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"examples\">Examples\u003C/h3>\n\u003Ch4 id=\"remediating-vulnerabilities-in-multiple-repositories\">Remediating vulnerabilities in multiple repositories\u003C/h4>\n\u003Ch5 id=\"without-code-search-example-thread-preferred-solution\">Without Code Search (Example \u003Ca href=\"https://ampcode.com/threads/T-22ad3789-6991-4380-ae08-801ac4d96af4\">Thread\u003C/a>) [Preferred Solution]\u003C/h5>\n\u003Cp>Assume that the developer’s repositories that all interact with each other are in a common root directory\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">~\u003C/span>\u003Cspan style=\"color:#E1E4E8\">/sourcegraph/log4j travis.lyons@sourcegraph.com\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">❯\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> ls\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">Permissions\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> Size\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> User\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> Date\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> Modified\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> Name\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">drwxr-xr-x@\u003C/span>\u003Cspan style=\"color:#9ECBFF\">    -\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> trly\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 31\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> Jul\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 10:28\u003C/span>\u003Cspan style=\"color:#9ECBFF\">  Lipstick\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">drwxr-xr-x@\u003C/span>\u003Cspan style=\"color:#9ECBFF\">    -\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> trly\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 31\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> Jul\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 10:28\u003C/span>\u003Cspan style=\"color:#9ECBFF\">  ndbench\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">drwxr-xr-x@\u003C/span>\u003Cspan style=\"color:#9ECBFF\">    -\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> trly\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 31\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> Jul\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 10:28\u003C/span>\u003Cspan style=\"color:#9ECBFF\">  sample-vulnerable-log4j-direct-lib\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">drwxr-xr-x@\u003C/span>\u003Cspan style=\"color:#9ECBFF\">    -\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> trly\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 31\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> Jul\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 10:28\u003C/span>\u003Cspan style=\"color:#9ECBFF\">  spring-webflow\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">drwxr-xr-x@\u003C/span>\u003Cspan style=\"color:#9ECBFF\">    -\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> trly\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 31\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> Jul\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 10:28\u003C/span>\u003Cspan style=\"color:#9ECBFF\">  udpated-vulnerable-log4j-direct-lib\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">drwxr-xr-x@\u003C/span>\u003Cspan style=\"color:#9ECBFF\">    -\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> trly\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 31\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> Jul\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 10:28\u003C/span>\u003Cspan style=\"color:#9ECBFF\">  updated-vulnerable-log4j-direct-app\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Col>\n\u003Cli>Use Amp execute to take action on everything in the current directory.\u003C/li>\n\u003C/ol>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'upgrade each application to the latest version of log4j,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">2.15.1 and commit the change to a local log4j/2.15.1 branch'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">Successfully\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> upgraded\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> all\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> applications\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> to\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> log4j\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2.15.1\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> and\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> committed\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> changes\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> to\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> the\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> `\u003C/span>\u003Cspan style=\"color:#B392F0\">log4j/2.15.1\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`\u003C/span>\u003Cspan style=\"color:#B392F0\"> branch\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> in\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> each\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> repository.\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> The\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> upgrades\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> included:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\"> **\u003C/span>\u003Cspan style=\"color:#9ECBFF\">Lipstick\u003C/span>\u003Cspan style=\"color:#79B8FF\">**\u003C/span>\u003Cspan style=\"color:#9ECBFF\">:\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> Updated\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> from\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2.8.2\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> to\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2.15.1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\"> **\u003C/span>\u003Cspan style=\"color:#9ECBFF\">ndbench\u003C/span>\u003Cspan style=\"color:#79B8FF\">**\u003C/span>\u003Cspan style=\"color:#9ECBFF\">:\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> Updated\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> log4j-to-slf4j\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> from\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2.14.1\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> to\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2.15.1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\"> **\u003C/span>\u003Cspan style=\"color:#9ECBFF\">sample-vulnerable-log4j-direct-lib\u003C/span>\u003Cspan style=\"color:#79B8FF\">**\u003C/span>\u003Cspan style=\"color:#9ECBFF\">:\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> Updated\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> from\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2.14.1\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> to\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2.15.1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\"> **\u003C/span>\u003Cspan style=\"color:#9ECBFF\">spring-webflow\u003C/span>\u003Cspan style=\"color:#79B8FF\">**\u003C/span>\u003Cspan style=\"color:#9ECBFF\">:\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> Updated\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> from\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2.14.0\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> to\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2.15.1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\"> **\u003C/span>\u003Cspan style=\"color:#9ECBFF\">udpated-vulnerable-log4j-direct-lib\u003C/span>\u003Cspan style=\"color:#79B8FF\">**\u003C/span>\u003Cspan style=\"color:#9ECBFF\">:\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> Updated\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> from\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2.14.1\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> to\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2.15.1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\"> **\u003C/span>\u003Cspan style=\"color:#9ECBFF\">updated-vulnerable-log4j-direct-app\u003C/span>\u003Cspan style=\"color:#79B8FF\">**\u003C/span>\u003Cspan style=\"color:#9ECBFF\">:\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> Updated\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> from\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2.14.1\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> to\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2.15.1\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch5 id=\"with-code-search-example-thread\">With Code Search (Example \u003Ca href=\"https://ampcode.com/threads/T-652c6d27-8ae1-4e61-923d-a4d40071cb4b\">Thread\u003C/a>)\u003C/h5>\n\u003Col>\n\u003Cli>Identify repositories requiring remediation (log4j2 vulnerability)\u003C/li>\n\u003C/ol>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">src\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> search\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -json\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> '\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">file:build\\.gradle[.kts]?|pom\\.xml patterntype:regexp\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">org\\.apache\\.logging\\.log4j 2\\.(0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16)(\\.[0-9]+)'\u003C/span>\u003Cspan style=\"color:#79B8FF\"> \\\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#B392F0\"> jq\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> '.Results[] | {file: .file.path, repository: .repository.name}'\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"json\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"file\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"build.gradle\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"repository\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"github.com/spring-projects/spring-webflow\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"file\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"ndbench-es-plugins/build.gradle\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"repository\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"github.com/Netflix/ndbench\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"file\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"lib/build.gradle\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"repository\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"github.com/dhdiemer/sample-vulnerable-log4j-direct-lib\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"file\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"lib/build.gradle\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"repository\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"github.com/dhdiemer/udpated-vulnerable-log4j-direct-lib\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"file\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"app/build.gradle\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"repository\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"github.com/dhdiemer/updated-vulnerable-log4j-direct-app\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"file\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"build.gradle\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"repository\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"github.com/Netflix/Lipstick\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Col start=\"2\">\n\u003Cli>Pipe the search results into Amp\u003C/li>\n\u003C/ol>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">src\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> search\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -json\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'file:build\\.gradle[.kts]?|pom\\.xml\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">org\\.apache\\.logging\\.log4j 2\\.(0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16)(\\.[0-9]+)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">patterntype:regexp'\u003C/span>\u003Cspan style=\"color:#79B8FF\"> \\\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#B392F0\"> jq\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> '.Results[] | {file: .file.path, repository: .repository.name}'\u003C/span>\u003Cspan style=\"color:#79B8FF\"> \\\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#B392F0\"> amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'Update log4j in each of the listed repositories to the latest version, 2.15.1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">using a sub-agent per repository, clone then commit the change locally in a new branch named log4j/2.15.1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">Provide a list of which repositores were successfully updated and which were not.'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">## Update Results\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">**\u003C/span>\u003Cspan style=\"color:#E1E4E8\">All 6 repositories were successfully updated:\u003C/span>\u003Cspan style=\"color:#F97583\">**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">✅\u003C/span>\u003Cspan style=\"color:#79B8FF\"> **\u003C/span>\u003Cspan style=\"color:#9ECBFF\">spring-projects/spring-webflow\u003C/span>\u003Cspan style=\"color:#79B8FF\">**\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> -\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> Updated\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> from\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2.14.0\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> →\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2.15.1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">✅\u003C/span>\u003Cspan style=\"color:#79B8FF\"> **\u003C/span>\u003Cspan style=\"color:#9ECBFF\">Netflix/ndbench\u003C/span>\u003Cspan style=\"color:#79B8FF\">**\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> -\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> Updated\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> from\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2.14.1\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> →\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2.15.1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">✅\u003C/span>\u003Cspan style=\"color:#79B8FF\"> **\u003C/span>\u003Cspan style=\"color:#9ECBFF\">dhdiemer/sample-vulnerable-log4j-direct-lib\u003C/span>\u003Cspan style=\"color:#79B8FF\">**\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> -\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> Updated\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> from\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2.14.1\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> →\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2.15.1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">✅\u003C/span>\u003Cspan style=\"color:#79B8FF\"> **\u003C/span>\u003Cspan style=\"color:#9ECBFF\">dhdiemer/udpated-vulnerable-log4j-direct-lib\u003C/span>\u003Cspan style=\"color:#79B8FF\">**\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> -\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> Updated\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> from\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2.14.1\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> →\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2.15.1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">✅\u003C/span>\u003Cspan style=\"color:#79B8FF\"> **\u003C/span>\u003Cspan style=\"color:#9ECBFF\">dhdiemer/updated-vulnerable-log4j-direct-app\u003C/span>\u003Cspan style=\"color:#79B8FF\">**\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> -\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> Updated\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> from\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2.14.1\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> →\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2.15.1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">✅\u003C/span>\u003Cspan style=\"color:#79B8FF\"> **\u003C/span>\u003Cspan style=\"color:#9ECBFF\">Netflix/Lipstick\u003C/span>\u003Cspan style=\"color:#79B8FF\">**\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> -\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> Updated\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> from\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2.8.2\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> →\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2.15.1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">All\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> repositories\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> now\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> have\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> the\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> changes\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> committed\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> on\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> branch\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> `\u003C/span>\u003Cspan style=\"color:#B392F0\">log4j/2.15.1\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`\u003C/span>\u003Cspan style=\"color:#79B8FF\">.\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Col start=\"3\">\n\u003Cli>Validate Changes\u003C/li>\n\u003C/ol>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003Cspan style=\"color:#E1E4E8\">_ git log -n 1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">commit\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> b2c4637907281c95b74de3e6d3a8331c55292b80\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (HEAD -\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> log4j/2.15.1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">Author:\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> Travis\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> Lyons\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x3C;\u003C/span>\u003Cspan style=\"color:#9ECBFF\">travis.lyons@sourcegraph.co\u003C/span>\u003Cspan style=\"color:#E1E4E8\">m\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">Date:\u003C/span>\u003Cspan style=\"color:#9ECBFF\">   Thu\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> Jul\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 31\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 10:16:45\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2025\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -0400\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    Update\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> log4j\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> to\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2.15.1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    Co-authored-by:\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> Amp\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x3C;\u003C/span>\u003Cspan style=\"color:#9ECBFF\">amp@ampcode.co\u003C/span>\u003Cspan style=\"color:#E1E4E8\">m\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    Amp-Thread-ID:\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> https://ampcode.com/threads/T-652c6d27-8ae1-4e61-923d-a4d40071cb4b\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003Cspan style=\"color:#E1E4E8\">_ git diff HEAD~1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">modified:\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> build.gradle\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">@\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> build.gradle:129\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> @\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> project\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">':lipstick-server'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#9ECBFF\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    runtime\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'com.netflix.eureka:eureka-client:1.1.141'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    runtime\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'org.elasticsearch:elasticsearch:5.4.1'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    runtime\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'org.elasticsearch.client:transport:5.4.1'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    runtime\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'org.apache.logging.log4j:log4j-core:2.8.2'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    runtime\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'org.apache.logging.log4j:log4j-api:2.8.2'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    runtime\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'org.apache.logging.log4j:log4j-core:2.15.1'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    runtime\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'org.apache.logging.log4j:log4j-api:2.15.1'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    runtime\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'org.hibernate:hibernate-entitymanager:3.6.0.Final'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    runtime\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'org.codehaus.jackson:jackson-mapper-asl:1.9.10'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\u003C/code>\u003C/pre>",{"headings":1544,"localImagePaths":1565,"remoteImagePaths":1566,"frontmatter":1567,"imagePaths":1568},[1545,1548,1551,1554,1555,1558,1562],{"depth":22,"slug":1546,"text":1547},"integrating-code-search-and-amp","Integrating Code Search and Amp",{"depth":25,"slug":1549,"text":1550},"using-amp-on-multiple-repositories","Using Amp on Multiple Repositories",{"depth":32,"slug":1552,"text":1553},"qualifying-questions","Qualifying Questions",{"depth":32,"slug":1518,"text":1530},{"depth":324,"slug":1556,"text":1557},"remediating-vulnerabilities-in-multiple-repositories","Remediating vulnerabilities in multiple repositories",{"depth":1559,"slug":1560,"text":1561},5,"without-code-search-example-thread-preferred-solution","Without Code Search (Example Thread) [Preferred Solution]",{"depth":1559,"slug":1563,"text":1564},"with-code-search-example-thread","With Code Search (Example Thread)",[],[],{},[],"amp+codesearch/README.md","automation/github-review-bot/readme",{"id":1570,"data":1572,"body":1573,"filePath":1574,"digest":1575,"rendered":1576,"legacyId":1608},{},"# GitHub Code Review Bot with Amp\n\nAutomated pull request reviews using GitHub Actions and Amp CLI to analyze code diffs and provide inline comments.\n\n**Stack:** GitHub Actions, Node.js, GitHub API  \n**Thread:** [GitHub Review Bot Example](https://github.com/Isuru-F/demo-latest-audiobooks/pull/82)\n\n## Amp Prompt\n\nThe bot analyzes PR diffs with a structured prompt:\n\n```bash\namp -x \"Analyze this diff for security vulnerabilities, performance issues, code quality problems, and missing tests. Format response with severity levels and specific file/line references.\"\n```\n\n## Result\n\n- Automated inline comments on pull requests\n- Categorized feedback by severity (🔴 HIGH, 🟡 MEDIUM, 🟢 LOW)\n- Auto-cleanup of previous bot reviews\n- Only comments on changed lines in the PR\n\n## Try it locally\n\n### 1. Add the Workflow File\n\nCreate `.github/workflows/amp-review-bot.yml` in your repository with the provided workflow configuration.\n\n### 2. Configure GitHub Secrets\n\nAdd these secrets in your repository settings:\n\n- **`AMP_API_KEY`** - Your Amp API key from Sourcegraph\n- **`AMP_REVIEW_GH_TOKEN`** - GitHub Personal Access Token with permissions:\n  - `contents: read`\n  - `pull-requests: write`\n\n### 3. Customize Review Focus\n\nEdit the workflow prompt to focus on specific areas:\n\n```yaml\n- Missing or insufficient unit tests\n- Security vulnerabilities  \n- Performance issues\n- Code quality problems\n- Architecture concerns\n```\n\n### Requirements\n\n- Node.js 22+\n- Valid Amp API key\n- GitHub repository with Actions enabled\n- GitHub token with proper permissions","src/content/examples/automation/github-review-bot/README.md","11686ca92794aa21",{"html":1577,"metadata":1578},"\u003Ch1 id=\"github-code-review-bot-with-amp\">GitHub Code Review Bot with Amp\u003C/h1>\n\u003Cp>Automated pull request reviews using GitHub Actions and Amp CLI to analyze code diffs and provide inline comments.\u003C/p>\n\u003Cp>\u003Cstrong>Stack:\u003C/strong> GitHub Actions, Node.js, GitHub API\u003Cbr>\n\u003Cstrong>Thread:\u003C/strong> \u003Ca href=\"https://github.com/Isuru-F/demo-latest-audiobooks/pull/82\">GitHub Review Bot Example\u003C/a>\u003C/p>\n\u003Ch2 id=\"amp-prompt\">Amp Prompt\u003C/h2>\n\u003Cp>The bot analyzes PR diffs with a structured prompt:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Analyze this diff for security vulnerabilities, performance issues, code quality problems, and missing tests. Format response with severity levels and specific file/line references.\"\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"result\">Result\u003C/h2>\n\u003Cul>\n\u003Cli>Automated inline comments on pull requests\u003C/li>\n\u003Cli>Categorized feedback by severity (🔴 HIGH, 🟡 MEDIUM, 🟢 LOW)\u003C/li>\n\u003Cli>Auto-cleanup of previous bot reviews\u003C/li>\n\u003Cli>Only comments on changed lines in the PR\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"try-it-locally\">Try it locally\u003C/h2>\n\u003Ch3 id=\"1-add-the-workflow-file\">1. Add the Workflow File\u003C/h3>\n\u003Cp>Create \u003Ccode>.github/workflows/amp-review-bot.yml\u003C/code> in your repository with the provided workflow configuration.\u003C/p>\n\u003Ch3 id=\"2-configure-github-secrets\">2. Configure GitHub Secrets\u003C/h3>\n\u003Cp>Add these secrets in your repository settings:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>\u003Ccode>AMP_API_KEY\u003C/code>\u003C/strong> - Your Amp API key from Sourcegraph\u003C/li>\n\u003Cli>\u003Cstrong>\u003Ccode>AMP_REVIEW_GH_TOKEN\u003C/code>\u003C/strong> - GitHub Personal Access Token with permissions:\n\u003Cul>\n\u003Cli>\u003Ccode>contents: read\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>pull-requests: write\u003C/code>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"3-customize-review-focus\">3. Customize Review Focus\u003C/h3>\n\u003Cp>Edit the workflow prompt to focus on specific areas:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"yaml\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">- \u003C/span>\u003Cspan style=\"color:#9ECBFF\">Missing or insufficient unit tests\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">- \u003C/span>\u003Cspan style=\"color:#9ECBFF\">Security vulnerabilities\u003C/span>\u003Cspan style=\"color:#E1E4E8\">  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">- \u003C/span>\u003Cspan style=\"color:#9ECBFF\">Performance issues\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">- \u003C/span>\u003Cspan style=\"color:#9ECBFF\">Code quality problems\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">- \u003C/span>\u003Cspan style=\"color:#9ECBFF\">Architecture concerns\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"requirements\">Requirements\u003C/h3>\n\u003Cul>\n\u003Cli>Node.js 22+\u003C/li>\n\u003Cli>Valid Amp API key\u003C/li>\n\u003Cli>GitHub repository with Actions enabled\u003C/li>\n\u003Cli>GitHub token with proper permissions\u003C/li>\n\u003C/ul>",{"headings":1579,"localImagePaths":1604,"remoteImagePaths":1605,"frontmatter":1606,"imagePaths":1607},[1580,1583,1586,1589,1592,1595,1598,1601],{"depth":22,"slug":1581,"text":1582},"github-code-review-bot-with-amp","GitHub Code Review Bot with Amp",{"depth":25,"slug":1584,"text":1585},"amp-prompt","Amp Prompt",{"depth":25,"slug":1587,"text":1588},"result","Result",{"depth":25,"slug":1590,"text":1591},"try-it-locally","Try it locally",{"depth":32,"slug":1593,"text":1594},"1-add-the-workflow-file","1. Add the Workflow File",{"depth":32,"slug":1596,"text":1597},"2-configure-github-secrets","2. Configure GitHub Secrets",{"depth":32,"slug":1599,"text":1600},"3-customize-review-focus","3. Customize Review Focus",{"depth":32,"slug":1602,"text":1603},"requirements","Requirements",[],[],{},[],"automation/github-review-bot/README.md","openapi-spec-generation/readme",{"id":1609,"data":1611,"body":1612,"filePath":1613,"digest":1614,"rendered":1615,"legacyId":1635},{},"# OpenAPI Specification Generation\n\nGenerate OpenAPI specifications from existing REST APIs using Amp.\n\n**Stack:** Express.js, Spring Boot, OpenAPI 3.0  \n**Thread:** [Express OpenAPI Generation](https://ampcode.com/threads/T-b6961337-c62b-4237-9516-6a5f1f255112)\n\n## Amp Prompt\n\nFor Express.js applications:\n```bash\namp -x \"Analyze all Express routes in src/routes/ and generate OpenAPI documentation\"\n```\n\nFor Spring Boot applications:\n```bash\namp -x \"Analyze this application's RestControllers, add the https://springdoc.org/ plugin and ensure all endpoints are properly annotated\"\n```\n\n## Result\n\n- Complete OpenAPI 3.0 specification generated from existing code\n- Automatic detection of endpoints, parameters, and response schemas\n- Integration with springdoc for Spring Boot applications\n- Ready-to-use documentation for API consumers\n\n## Try it locally\n\n### For Express.js Projects\n\n1. Navigate to your Express project directory\n2. Run the Express OpenAPI generation prompt above\n3. Amp will analyze your routes and generate `openapi.yaml`\n\n### For Spring Boot Projects  \n\n1. Navigate to your Spring Boot project directory  \n2. Run the Spring Boot prompt above ([Example Thread](https://ampcode.com/threads/T-8ad6b9be-3e3c-492e-ab19-30e989076933))\n3. Amp will add springdoc dependencies and annotations\n4. Access documentation at `/swagger-ui.html` after running your app","src/content/examples/openapi-spec-generation/README.md","57bb35eb8ed787df",{"html":1616,"metadata":1617},"\u003Ch1 id=\"openapi-specification-generation\">OpenAPI Specification Generation\u003C/h1>\n\u003Cp>Generate OpenAPI specifications from existing REST APIs using Amp.\u003C/p>\n\u003Cp>\u003Cstrong>Stack:\u003C/strong> Express.js, Spring Boot, OpenAPI 3.0\u003Cbr>\n\u003Cstrong>Thread:\u003C/strong> \u003Ca href=\"https://ampcode.com/threads/T-b6961337-c62b-4237-9516-6a5f1f255112\">Express OpenAPI Generation\u003C/a>\u003C/p>\n\u003Ch2 id=\"amp-prompt\">Amp Prompt\u003C/h2>\n\u003Cp>For Express.js applications:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Analyze all Express routes in src/routes/ and generate OpenAPI documentation\"\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>For Spring Boot applications:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Analyze this application's RestControllers, add the https://springdoc.org/ plugin and ensure all endpoints are properly annotated\"\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"result\">Result\u003C/h2>\n\u003Cul>\n\u003Cli>Complete OpenAPI 3.0 specification generated from existing code\u003C/li>\n\u003Cli>Automatic detection of endpoints, parameters, and response schemas\u003C/li>\n\u003Cli>Integration with springdoc for Spring Boot applications\u003C/li>\n\u003Cli>Ready-to-use documentation for API consumers\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"try-it-locally\">Try it locally\u003C/h2>\n\u003Ch3 id=\"for-expressjs-projects\">For Express.js Projects\u003C/h3>\n\u003Col>\n\u003Cli>Navigate to your Express project directory\u003C/li>\n\u003Cli>Run the Express OpenAPI generation prompt above\u003C/li>\n\u003Cli>Amp will analyze your routes and generate \u003Ccode>openapi.yaml\u003C/code>\u003C/li>\n\u003C/ol>\n\u003Ch3 id=\"for-spring-boot-projects\">For Spring Boot Projects\u003C/h3>\n\u003Col>\n\u003Cli>Navigate to your Spring Boot project directory\u003C/li>\n\u003Cli>Run the Spring Boot prompt above (\u003Ca href=\"https://ampcode.com/threads/T-8ad6b9be-3e3c-492e-ab19-30e989076933\">Example Thread\u003C/a>)\u003C/li>\n\u003Cli>Amp will add springdoc dependencies and annotations\u003C/li>\n\u003Cli>Access documentation at \u003Ccode>/swagger-ui.html\u003C/code> after running your app\u003C/li>\n\u003C/ol>",{"headings":1618,"localImagePaths":1631,"remoteImagePaths":1632,"frontmatter":1633,"imagePaths":1634},[1619,1622,1623,1624,1625,1628],{"depth":22,"slug":1620,"text":1621},"openapi-specification-generation","OpenAPI Specification Generation",{"depth":25,"slug":1584,"text":1585},{"depth":25,"slug":1587,"text":1588},{"depth":25,"slug":1590,"text":1591},{"depth":32,"slug":1626,"text":1627},"for-expressjs-projects","For Express.js Projects",{"depth":32,"slug":1629,"text":1630},"for-spring-boot-projects","For Spring Boot Projects",[],[],{},[],"openapi-spec-generation/README.md","automation/gitlab-review-bot/readme",{"id":1636,"data":1638,"body":1639,"filePath":1640,"digest":1641,"rendered":1642,"legacyId":1669},{},"# GitLab Code Review Bot with Amp\n\nAutomated code review bot that creates discussions on merge requests using Amp AI analysis.\n\n**Stack:** GitLab CI/CD, Node.js, GitLab API  \n**Thread:** [GitLab Review Bot Example](https://gitlab.com/Isuru-F/demo-latest-audiobooks/-/merge_requests/78)\n\n## Amp Prompt\n\nThe bot analyzes merge request diffs with a structured prompt:\n\n```bash\namp -x \"Analyze this diff for security vulnerabilities, performance issues, code quality problems, and missing tests. Format response with severity levels and specific file/line references.\"\n```\n\n## Result\n\n- Automated inline discussions on merge requests\n- Categorized feedback by severity (🔴 HIGH, 🟡 MEDIUM, 🟢 LOW)\n- Auto-cleanup of previous bot discussions\n- Only comments on changed lines in the MR\n\n## Try it locally\n\n### 1. Add the CI Configuration\n\nAdd `.gitlab-ci.yml` in your repository with the provided configuration.\n\n### 2. Add the Discussion Script\n\nAdd `create_gitlab_discussions.js` to your repository - this script handles parsing Amp output and creating GitLab discussions.\n\n### 3. Configure CI/CD Variables\n\nAdd these variables in your GitLab project's CI/CD settings:\n\n- **`GITLAB_TOKEN`** - Personal/Project Access Token with `api` scope\n- **`AMP_API_KEY`** - Your Amp API key from Sourcegraph\n\n### 4. Customize Review Focus\n\nEdit the prompt in your CI script to focus on specific areas:\n\n```yaml\n- Missing or insufficient unit tests\n- Security vulnerabilities  \n- Performance issues\n- Code quality problems\n- Architecture concerns\n```\n\n### Requirements\n\n- Node.js 22+\n- Valid Amp API key\n- GitLab project with CI/CD enabled\n- GitLab token with `api` scope permissions","src/content/examples/automation/gitlab-review-bot/README.md","e672100d38b3b771",{"html":1643,"metadata":1644},"\u003Ch1 id=\"gitlab-code-review-bot-with-amp\">GitLab Code Review Bot with Amp\u003C/h1>\n\u003Cp>Automated code review bot that creates discussions on merge requests using Amp AI analysis.\u003C/p>\n\u003Cp>\u003Cstrong>Stack:\u003C/strong> GitLab CI/CD, Node.js, GitLab API\u003Cbr>\n\u003Cstrong>Thread:\u003C/strong> \u003Ca href=\"https://gitlab.com/Isuru-F/demo-latest-audiobooks/-/merge_requests/78\">GitLab Review Bot Example\u003C/a>\u003C/p>\n\u003Ch2 id=\"amp-prompt\">Amp Prompt\u003C/h2>\n\u003Cp>The bot analyzes merge request diffs with a structured prompt:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Analyze this diff for security vulnerabilities, performance issues, code quality problems, and missing tests. Format response with severity levels and specific file/line references.\"\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"result\">Result\u003C/h2>\n\u003Cul>\n\u003Cli>Automated inline discussions on merge requests\u003C/li>\n\u003Cli>Categorized feedback by severity (🔴 HIGH, 🟡 MEDIUM, 🟢 LOW)\u003C/li>\n\u003Cli>Auto-cleanup of previous bot discussions\u003C/li>\n\u003Cli>Only comments on changed lines in the MR\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"try-it-locally\">Try it locally\u003C/h2>\n\u003Ch3 id=\"1-add-the-ci-configuration\">1. Add the CI Configuration\u003C/h3>\n\u003Cp>Add \u003Ccode>.gitlab-ci.yml\u003C/code> in your repository with the provided configuration.\u003C/p>\n\u003Ch3 id=\"2-add-the-discussion-script\">2. Add the Discussion Script\u003C/h3>\n\u003Cp>Add \u003Ccode>create_gitlab_discussions.js\u003C/code> to your repository - this script handles parsing Amp output and creating GitLab discussions.\u003C/p>\n\u003Ch3 id=\"3-configure-cicd-variables\">3. Configure CI/CD Variables\u003C/h3>\n\u003Cp>Add these variables in your GitLab project’s CI/CD settings:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>\u003Ccode>GITLAB_TOKEN\u003C/code>\u003C/strong> - Personal/Project Access Token with \u003Ccode>api\u003C/code> scope\u003C/li>\n\u003Cli>\u003Cstrong>\u003Ccode>AMP_API_KEY\u003C/code>\u003C/strong> - Your Amp API key from Sourcegraph\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"4-customize-review-focus\">4. Customize Review Focus\u003C/h3>\n\u003Cp>Edit the prompt in your CI script to focus on specific areas:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"yaml\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">- \u003C/span>\u003Cspan style=\"color:#9ECBFF\">Missing or insufficient unit tests\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">- \u003C/span>\u003Cspan style=\"color:#9ECBFF\">Security vulnerabilities\u003C/span>\u003Cspan style=\"color:#E1E4E8\">  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">- \u003C/span>\u003Cspan style=\"color:#9ECBFF\">Performance issues\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">- \u003C/span>\u003Cspan style=\"color:#9ECBFF\">Code quality problems\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">- \u003C/span>\u003Cspan style=\"color:#9ECBFF\">Architecture concerns\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"requirements\">Requirements\u003C/h3>\n\u003Cul>\n\u003Cli>Node.js 22+\u003C/li>\n\u003Cli>Valid Amp API key\u003C/li>\n\u003Cli>GitLab project with CI/CD enabled\u003C/li>\n\u003Cli>GitLab token with \u003Ccode>api\u003C/code> scope permissions\u003C/li>\n\u003C/ul>",{"headings":1645,"localImagePaths":1665,"remoteImagePaths":1666,"frontmatter":1667,"imagePaths":1668},[1646,1649,1650,1651,1652,1655,1658,1661,1664],{"depth":22,"slug":1647,"text":1648},"gitlab-code-review-bot-with-amp","GitLab Code Review Bot with Amp",{"depth":25,"slug":1584,"text":1585},{"depth":25,"slug":1587,"text":1588},{"depth":25,"slug":1590,"text":1591},{"depth":32,"slug":1653,"text":1654},"1-add-the-ci-configuration","1. Add the CI Configuration",{"depth":32,"slug":1656,"text":1657},"2-add-the-discussion-script","2. Add the Discussion Script",{"depth":32,"slug":1659,"text":1660},"3-configure-cicd-variables","3. Configure CI/CD Variables",{"depth":32,"slug":1662,"text":1663},"4-customize-review-focus","4. Customize Review Focus",{"depth":32,"slug":1602,"text":1603},[],[],{},[],"automation/gitlab-review-bot/README.md","automation/sonarqube-amp/readme",{"id":1670,"data":1672,"body":1673,"filePath":1674,"digest":1675,"rendered":1676,"legacyId":1709},{},"# SonarQube Issue Automation with Amp\n\nAutomatically process SonarQube issues by fetching them from your organization, analyzing code, and creating pull \nrequests with AI-powered fixes.\n\n**Stack:** SonarQube API, Amp CLI, GitHub CLI, Git  \n**Thread:** TODO\n\n## Amp Prompt\n\n```bash\namp -x \"Process SonarQube issues: fetch from organization, analyze code, fix issues, and create pull requests with descriptive titles and commit messages\"\n```\n\n## Result\n\n- Automated issue processing from SonarQube organizations\n- AI-powered code fixes for identified problems\n- Auto-generated pull requests with proper descriptions\n- Support for parallel processing (advanced) or sequential processing (simple)\n\n## Try it locally\n\nWe provide two implementation strategies:\n\n### Approach Comparison\n\n| Feature | Parallel Worktree | Sequential Simple |\n|---------|------------------|-------------------|\n| **Processing** | Concurrent (3+ issues at once) | One issue at a time |\n| **Git Strategy** | Git worktrees (isolated workspaces) | Branch switching |\n| **Complexity** | Advanced | Beginner-friendly |\n| **Speed** | Fast for many issues | Slower but reliable |\n| **Resource Usage** | Higher (disk space and memory) | Lower |\n| **Debugging** | Complex (multiple concurrent logs) | Simple (linear logs) |\n| **System Requirements** | More disk space, git worktree support | Standard git setup |\n\n#### Use Parallel Worktree for\n\n- High-volume processing (20+ issues)\n- When you have sufficient disk space and resources\n- Production automation environments\n\n#### Use Sequential Simple for\n\n- Learning and first-time setup\n- Smaller scale processing (less than 10 issues)  \n- Limited system resources\n- Easier debugging and monitoring\n\n## Implementation Options\n\n### Parallel Worktree (Advanced)\n\n[Get Started with Parallel Worktree →](./parallel-worktree/)\n\n- Processes multiple issues concurrently using git worktrees\n- Maximum efficiency for large-scale automation\n- Advanced git operations and concurrent processing\n- Comprehensive progress tracking and monitoring\n\n### Sequential Simple (Recommended for beginners)\n\n[Get Started with Sequential Simple →](./sequential-simple/)\n\n- Processes issues one at a time with simple branch switching\n- Easier to understand, debug, and monitor\n- Lower resource requirements\n- Straightforward error handling and recovery\n\n### Prerequisites\n\n| Tool | Installation |\n|------|-------------|\n| **Amp CLI** | `npm install -g @sourcegraph/amp` |\n| **GitHub CLI** | `gh auth login` |\n| **Git** | System package manager |\n| **SonarQube MCP** | Follow [setup guide](https://github.com/SonarSource/sonarqube-mcp-server) |\n\nChoose your preferred approach above and follow the specific implementation guide.","src/content/examples/automation/sonarqube-amp/README.md","e7d58b7f7a2fb34d",{"html":1677,"metadata":1678},"\u003Ch1 id=\"sonarqube-issue-automation-with-amp\">SonarQube Issue Automation with Amp\u003C/h1>\n\u003Cp>Automatically process SonarQube issues by fetching them from your organization, analyzing code, and creating pull\nrequests with AI-powered fixes.\u003C/p>\n\u003Cp>\u003Cstrong>Stack:\u003C/strong> SonarQube API, Amp CLI, GitHub CLI, Git\u003Cbr>\n\u003Cstrong>Thread:\u003C/strong> TODO\u003C/p>\n\u003Ch2 id=\"amp-prompt\">Amp Prompt\u003C/h2>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Process SonarQube issues: fetch from organization, analyze code, fix issues, and create pull requests with descriptive titles and commit messages\"\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"result\">Result\u003C/h2>\n\u003Cul>\n\u003Cli>Automated issue processing from SonarQube organizations\u003C/li>\n\u003Cli>AI-powered code fixes for identified problems\u003C/li>\n\u003Cli>Auto-generated pull requests with proper descriptions\u003C/li>\n\u003Cli>Support for parallel processing (advanced) or sequential processing (simple)\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"try-it-locally\">Try it locally\u003C/h2>\n\u003Cp>We provide two implementation strategies:\u003C/p>\n\u003Ch3 id=\"approach-comparison\">Approach Comparison\u003C/h3>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>Feature\u003C/th>\u003Cth>Parallel Worktree\u003C/th>\u003Cth>Sequential Simple\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>\u003Cstrong>Processing\u003C/strong>\u003C/td>\u003Ctd>Concurrent (3+ issues at once)\u003C/td>\u003Ctd>One issue at a time\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Cstrong>Git Strategy\u003C/strong>\u003C/td>\u003Ctd>Git worktrees (isolated workspaces)\u003C/td>\u003Ctd>Branch switching\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Cstrong>Complexity\u003C/strong>\u003C/td>\u003Ctd>Advanced\u003C/td>\u003Ctd>Beginner-friendly\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Cstrong>Speed\u003C/strong>\u003C/td>\u003Ctd>Fast for many issues\u003C/td>\u003Ctd>Slower but reliable\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Cstrong>Resource Usage\u003C/strong>\u003C/td>\u003Ctd>Higher (disk space and memory)\u003C/td>\u003Ctd>Lower\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Cstrong>Debugging\u003C/strong>\u003C/td>\u003Ctd>Complex (multiple concurrent logs)\u003C/td>\u003Ctd>Simple (linear logs)\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Cstrong>System Requirements\u003C/strong>\u003C/td>\u003Ctd>More disk space, git worktree support\u003C/td>\u003Ctd>Standard git setup\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Ch4 id=\"use-parallel-worktree-for\">Use Parallel Worktree for\u003C/h4>\n\u003Cul>\n\u003Cli>High-volume processing (20+ issues)\u003C/li>\n\u003Cli>When you have sufficient disk space and resources\u003C/li>\n\u003Cli>Production automation environments\u003C/li>\n\u003C/ul>\n\u003Ch4 id=\"use-sequential-simple-for\">Use Sequential Simple for\u003C/h4>\n\u003Cul>\n\u003Cli>Learning and first-time setup\u003C/li>\n\u003Cli>Smaller scale processing (less than 10 issues)\u003C/li>\n\u003Cli>Limited system resources\u003C/li>\n\u003Cli>Easier debugging and monitoring\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"implementation-options\">Implementation Options\u003C/h2>\n\u003Ch3 id=\"parallel-worktree-advanced\">Parallel Worktree (Advanced)\u003C/h3>\n\u003Cp>\u003Ca href=\"./parallel-worktree/\">Get Started with Parallel Worktree →\u003C/a>\u003C/p>\n\u003Cul>\n\u003Cli>Processes multiple issues concurrently using git worktrees\u003C/li>\n\u003Cli>Maximum efficiency for large-scale automation\u003C/li>\n\u003Cli>Advanced git operations and concurrent processing\u003C/li>\n\u003Cli>Comprehensive progress tracking and monitoring\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"sequential-simple-recommended-for-beginners\">Sequential Simple (Recommended for beginners)\u003C/h3>\n\u003Cp>\u003Ca href=\"./sequential-simple/\">Get Started with Sequential Simple →\u003C/a>\u003C/p>\n\u003Cul>\n\u003Cli>Processes issues one at a time with simple branch switching\u003C/li>\n\u003Cli>Easier to understand, debug, and monitor\u003C/li>\n\u003Cli>Lower resource requirements\u003C/li>\n\u003Cli>Straightforward error handling and recovery\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"prerequisites\">Prerequisites\u003C/h3>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>Tool\u003C/th>\u003Cth>Installation\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>\u003Cstrong>Amp CLI\u003C/strong>\u003C/td>\u003Ctd>\u003Ccode>npm install -g @sourcegraph/amp\u003C/code>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Cstrong>GitHub CLI\u003C/strong>\u003C/td>\u003Ctd>\u003Ccode>gh auth login\u003C/code>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Cstrong>Git\u003C/strong>\u003C/td>\u003Ctd>System package manager\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Cstrong>SonarQube MCP\u003C/strong>\u003C/td>\u003Ctd>Follow \u003Ca href=\"https://github.com/SonarSource/sonarqube-mcp-server\">setup guide\u003C/a>\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Cp>Choose your preferred approach above and follow the specific implementation guide.\u003C/p>",{"headings":1679,"localImagePaths":1705,"remoteImagePaths":1706,"frontmatter":1707,"imagePaths":1708},[1680,1683,1684,1685,1686,1689,1692,1695,1698,1701,1704],{"depth":22,"slug":1681,"text":1682},"sonarqube-issue-automation-with-amp","SonarQube Issue Automation with Amp",{"depth":25,"slug":1584,"text":1585},{"depth":25,"slug":1587,"text":1588},{"depth":25,"slug":1590,"text":1591},{"depth":32,"slug":1687,"text":1688},"approach-comparison","Approach Comparison",{"depth":324,"slug":1690,"text":1691},"use-parallel-worktree-for","Use Parallel Worktree for",{"depth":324,"slug":1693,"text":1694},"use-sequential-simple-for","Use Sequential Simple for",{"depth":25,"slug":1696,"text":1697},"implementation-options","Implementation Options",{"depth":32,"slug":1699,"text":1700},"parallel-worktree-advanced","Parallel Worktree (Advanced)",{"depth":32,"slug":1702,"text":1703},"sequential-simple-recommended-for-beginners","Sequential Simple (Recommended for beginners)",{"depth":32,"slug":621,"text":622},[],[],{},[],"automation/sonarqube-amp/README.md","ide/jetbrains/readme",{"id":1710,"data":1712,"body":1713,"filePath":1714,"digest":1715,"rendered":1716,"legacyId":1740},{},"# JetBrains IDE Integration with Amp\n\nSet up Amp with JetBrains IDEs to automatically include your open file and text selection with every message.\n\n**Stack:** IntelliJ IDEA, PyCharm, WebStorm, CLion, all JetBrains IDEs  \n**Thread:** TODO\n\n## Amp Prompt\n\n```bash\namp --jetbrains\n```\n\n## Result\n\n- Amp automatically includes your currently open file and highlighted text\n- No need to copy/paste code or explain context\n- Works with all JetBrains IDEs (IntelliJ, PyCharm, WebStorm, etc.)\n- Seamless integration through the Amp JetBrains plugin\n\n## Try it locally\n\n### 1. Install or update Amp CLI\n\n```bash\nnpm install -g @sourcegraph/amp\n```\n\n### 2. Launch Amp with JetBrains integration\n\nIn your IDE terminal or external terminal:\n\n```bash\namp --jetbrains\n```\n\nThe Amp CLI will automatically detect JetBrains IDEs and install the plugin. You may need to restart your IDE after the first run.\n\n### 3. Test the integration\n\n1. Open a code file in your editor\n2. Highlight a method or function\n3. In the Amp terminal, ask: \"What does this function do?\"\n\nAmp will automatically know your current file and selection context.\n\n### Troubleshooting\n\nIf Amp doesn't connect to your IDE:\n1. Ensure you're running `amp --jetbrains` from the same directory as your JetBrains project\n2. Make sure you have the latest version of Amp CLI: `npm update -g @sourcegraph/amp`\n3. Restart your JetBrains IDE after the plugin installation\n4. Check that the Amp plugin is enabled in **Settings** → **Plugins**","src/content/examples/ide/jetbrains/README.md","8fef9ce6ea1582b2",{"html":1717,"metadata":1718},"\u003Ch1 id=\"jetbrains-ide-integration-with-amp\">JetBrains IDE Integration with Amp\u003C/h1>\n\u003Cp>Set up Amp with JetBrains IDEs to automatically include your open file and text selection with every message.\u003C/p>\n\u003Cp>\u003Cstrong>Stack:\u003C/strong> IntelliJ IDEA, PyCharm, WebStorm, CLion, all JetBrains IDEs\u003Cbr>\n\u003Cstrong>Thread:\u003C/strong> TODO\u003C/p>\n\u003Ch2 id=\"amp-prompt\">Amp Prompt\u003C/h2>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --jetbrains\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"result\">Result\u003C/h2>\n\u003Cul>\n\u003Cli>Amp automatically includes your currently open file and highlighted text\u003C/li>\n\u003Cli>No need to copy/paste code or explain context\u003C/li>\n\u003Cli>Works with all JetBrains IDEs (IntelliJ, PyCharm, WebStorm, etc.)\u003C/li>\n\u003Cli>Seamless integration through the Amp JetBrains plugin\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"try-it-locally\">Try it locally\u003C/h2>\n\u003Ch3 id=\"1-install-or-update-amp-cli\">1. Install or update Amp CLI\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">npm\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> install\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -g\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> @sourcegraph/amp\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"2-launch-amp-with-jetbrains-integration\">2. Launch Amp with JetBrains integration\u003C/h3>\n\u003Cp>In your IDE terminal or external terminal:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --jetbrains\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The Amp CLI will automatically detect JetBrains IDEs and install the plugin. You may need to restart your IDE after the first run.\u003C/p>\n\u003Ch3 id=\"3-test-the-integration\">3. Test the integration\u003C/h3>\n\u003Col>\n\u003Cli>Open a code file in your editor\u003C/li>\n\u003Cli>Highlight a method or function\u003C/li>\n\u003Cli>In the Amp terminal, ask: “What does this function do?”\u003C/li>\n\u003C/ol>\n\u003Cp>Amp will automatically know your current file and selection context.\u003C/p>\n\u003Ch3 id=\"troubleshooting\">Troubleshooting\u003C/h3>\n\u003Cp>If Amp doesn’t connect to your IDE:\u003C/p>\n\u003Col>\n\u003Cli>Ensure you’re running \u003Ccode>amp --jetbrains\u003C/code> from the same directory as your JetBrains project\u003C/li>\n\u003Cli>Make sure you have the latest version of Amp CLI: \u003Ccode>npm update -g @sourcegraph/amp\u003C/code>\u003C/li>\n\u003Cli>Restart your JetBrains IDE after the plugin installation\u003C/li>\n\u003Cli>Check that the Amp plugin is enabled in \u003Cstrong>Settings\u003C/strong> → \u003Cstrong>Plugins\u003C/strong>\u003C/li>\n\u003C/ol>",{"headings":1719,"localImagePaths":1736,"remoteImagePaths":1737,"frontmatter":1738,"imagePaths":1739},[1720,1723,1724,1725,1726,1729,1732,1735],{"depth":22,"slug":1721,"text":1722},"jetbrains-ide-integration-with-amp","JetBrains IDE Integration with Amp",{"depth":25,"slug":1584,"text":1585},{"depth":25,"slug":1587,"text":1588},{"depth":25,"slug":1590,"text":1591},{"depth":32,"slug":1727,"text":1728},"1-install-or-update-amp-cli","1. Install or update Amp CLI",{"depth":32,"slug":1730,"text":1731},"2-launch-amp-with-jetbrains-integration","2. Launch Amp with JetBrains integration",{"depth":32,"slug":1733,"text":1734},"3-test-the-integration","3. Test the integration",{"depth":32,"slug":549,"text":550},[],[],{},[],"ide/jetbrains/README.md","automation/sonarqube-amp/parallel-worktree/readme",{"id":1741,"data":1743,"body":1744,"filePath":1745,"digest":1746,"rendered":1747,"legacyId":1826},{},"# Parallel Worktree SonarQube Processor\n\n## Advanced, high-performance approach for concurrent issue processing\n\nThis implementation uses git worktrees to process multiple SonarQube issues concurrently, providing maximum efficiency for large-scale automation.\n\n## How It Works\n\n1. **Fetches issues** from SonarQube organization using MCP tools\n2. **Auto-clones repositories** that don't exist locally  \n3. **Creates git worktrees** for isolated issue processing\n4. **Processes multiple issues concurrently** (configurable, default: 3 per repo)\n5. **Spawns Amp CLI threads** to fix issues with AI assistance\n6. **Creates pull requests** via GitHub CLI\n\n## Key Features\n\n- **Organization-based filtering**: Only processes issues from your specified SonarQube organization\n- **Multi-repo support**: Automatically clones and processes issues across multiple repositories\n- **Concurrent processing**: Handles multiple issues per repository using git worktrees\n- **SonarQube integration**: Fetches real issues from your SonarQube instance\n- **PR automation**: Creates pull requests with proper titles and descriptions\n- **Progress tracking**: Comprehensive logging and progress reporting\n- **Configurable paths**: Uses environment variables for flexible deployment\n\n## When to Use This Approach\n\n**Perfect for:**\n- Processing 10+ issues across multiple repositories\n- High-volume automation scenarios\n- When time efficiency is critical\n- Users comfortable with advanced git concepts\n\n**Requirements:**\n- Sufficient disk space for multiple worktrees\n- Adequate system memory for concurrent processing\n- Familiarity with git worktrees and concurrent operations\n\n## Download & Setup\n\n1. **Download the script**: [`amp-sonarqube-worker.ts`](./amp-sonarqube-worker.ts)\n2. **Install dependencies**: `npm install -g tsx` (for running TypeScript files)\n\n## Quick Start\n\n```bash\n# Run the processor\nnpx tsx amp-sonarqube-worker.ts \u003Cyour-sonar-org> --dry-run\nnpx tsx amp-sonarqube-worker.ts \u003Cyour-sonar-org>\n```\n\n## Prerequisites\n\nEnsure you have these tools installed and authenticated:\n\n| Tool | Purpose | Installation | Authentication |\n|------|---------|--------------|----------------|\n| **Amp CLI** | AI code analysis and fixing | `npm install -g @sourcegraph/amp` | Built-in authentication |\n| **GitHub CLI** | Creating pull requests | `gh auth login` | `gh auth login` |\n| **Git** | Repository operations | System package manager | `git config` user setup |\n| **Node.js** | Running TypeScript | nodejs.org | Not required |\n| **SonarQube MCP** | Fetching issues | See MCP setup below | Token-based |\n\n## Usage\n\n```bash\n# Process all issues from your SonarQube organization (default: 3 concurrent per repo)\nnpx tsx amp-sonarqube-worker.ts \u003Csonar-org>\n\n# Process specific projects with custom concurrency\nnpx tsx amp-sonarqube-worker.ts \u003Csonar-org> \"project1,project2\" \u003Cmax-concurrent-per-repo>\n\n# Dry run - see what would be processed without making changes\nnpx tsx amp-sonarqube-worker.ts \u003Csonar-org> --dry-run\n\n# Show help\nnpx tsx amp-sonarqube-worker.ts --help\n\n# Examples\nnpx tsx amp-sonarqube-worker.ts isuru-f-1\nnpx tsx amp-sonarqube-worker.ts isuru-f-1 \"my-app,my-api\" 5\nnpx tsx amp-sonarqube-worker.ts isuru-f-1 --dry-run\n```\n\n### Parameters\n\n- `\u003Csonar-org>`: **Required** - Your SonarQube organization name (e.g., \"isuru-f-1\")\n- `\"project1,project2\"`: **Optional** - Comma-separated list of specific project keys to process  \n- `\u003Cmax-concurrent-per-repo>`: **Optional** - Maximum concurrent issues per repository (default: 3)\n\n### Options\n\n- `--dry-run`: Show what would be processed without making any changes\n- `--help, -h`: Display help information and usage examples\n\n### Example PR Output \nExample PRs created by this script:\n![alt text](/images/sonarqube-prs.png)\n\nExample progress files created by this script:\n![alt text](/images/sonarqube-progress-files.png)\n\nIn the event a file is skipped,started,completed or blocked you can see the progress files in the `./output/` directory.\nEach issue is tracked in it's own file in the `./output/` directory with the SonarQube issue key as the filename.\n\n\n## Configuration\n\nThe script supports flexible configuration through the `CONFIG` object at the top of the file. Simply edit these values in `amp-sonarqube-worker.ts`:\n\n```typescript\nconst CONFIG = {\n\t// Directory where repositories will be cloned\n\tbaseRepoPath: join(process.cwd(), 'repos'),\n\t\n\t// Directory where progress files will be written  \n\toutputPath: join(process.cwd(), 'output'),\n\t\n\t// Temporary directory for git worktrees\n\tworktreeParentDir: tmpdir(),\n\t\n\t// Maximum number of concurrent issues to process per repository\n\tmaxConcurrentPerRepo: 3,\n\t\n\t// Timeout for Amp CLI operations in milliseconds (5 minutes)\n\tampTimeout: 300000\n}\n```\n\nYou can also override these settings with environment variables if needed:\n\n| Environment Variable | Purpose | Default Value |\n|---------------------|---------|---------------|\n| `REPOS_DIR` | Directory where repositories are cloned | `./repos` |\n| `OUTPUT_DIR` | Directory where progress files are written | `./output` |\n| `WORKTREE_PARENT_DIR` | Temporary directory for git worktrees | System temp directory |\n| `MAX_CONCURRENT_PER_REPO` | Maximum concurrent issues per repository | `3` |\n| `AMP_TIMEOUT_MS` | Timeout for Amp CLI operations | `300000` (5 minutes) |\n\n### File Structure & Output\n\n```text\namp-thread-processor/\n├── repos/                    # Cloned repositories (configurable)\n│   └── owner-repo-name/     # Individual repository folders\n├── output/                   # Progress tracking (configurable)\n│   └── project-name/        # Project-specific progress files\n│       ├── started-SQ_ISSUE_KEY.md   # Issue processing started\n│       ├── fixed-SQ_ISSUE_KEY.md     # Successfully resolved + PR created\n│       ├── failed-SQ_ISSUE_KEY.md    # Failed to fix\n│       ├── blocked-SQ_ISSUE_KEY.md   # Needs manual intervention\n│       └── skipped-SQ_ISSUE_KEY.md   # Already has existing fix/PR\n└── /tmp/worktree-*/         # Temporary git worktrees (configurable)\n```\n\n**Output Files Explained:**\n- **`started-SQ_ISSUE_KEY.md`**: Created when processing begins, contains issue details and real-time progress\n- **`fixed-SQ_ISSUE_KEY.md`**: Issue successfully fixed, code committed, PR created\n- **`failed-SQ_ISSUE_KEY.md`**: Technical failure (Amp CLI error, git issues, etc.)\n- **`blocked-SQ_ISSUE_KEY.md`**: Amp CLI requests manual intervention or human input\n- **`skipped-SQ_ISSUE_KEY.md`**: Issue already has existing fix or open PR\n\nEach file contains:\n- Issue details (key, severity, message, file, line)\n- Processing progress with timestamps\n- Amp CLI output and actions taken\n- Final status and any error messages\n\n### SonarQube MCP Setup\n\nThe script integrates with SonarQube through MCP (Model Context Protocol) tools. To set this up:\n\n1. **Install SonarQube MCP Server** (follow the [setup guide](https://github.com/SonarSource/sonarqube-mcp-server))\n\n2. **Configure Amp settings.json** to include the SonarQube MCP server\n\n**Note**: If SonarQube MCP is not configured, the script will automatically use demo data for testing purposes.\n\nThe script will then automatically:\n- Fetch real projects from your SonarQube organization\n- Get actual open issues from those projects  \n- Extract repository information from SonarQube data\n- Clone and process real repositories\n\n### Amp CLI Integration\nEach issue spawns an Amp CLI thread with a detailed prompt that:\n- Analyzes the specific SonarQube issue\n- Uses SonarQube MCP tools for additional context\n- Locates and fixes the problematic code\n- Commits changes and creates a PR via gh CLI\n\n## Dry-Run vs Live Execution\n\n### **Always start with a dry-run first!**\n\n```bash\n# First, see what would be processed\nnpx tsx amp-sonarqube-worker.ts your-org --dry-run\n```\n\n**Dry-run mode (`--dry-run`)**:\n- ✅ Fetches real SonarQube issues\n- ✅ Shows detailed summary of what would be processed\n- ✅ Groups issues by project and repository\n- ✅ Shows severity breakdown\n- ❌ **No repositories cloned**\n- ❌ **No files modified**\n- ❌ **No PRs created**\n- ❌ **No git operations performed**\n\n**Live execution** (without `--dry-run`):\n- ✅ Fetches SonarQube issues\n- ✅ **Clones repositories** to `./repos/` directory\n- ✅ **Creates git worktrees** for isolated processing\n- ✅ **Spawns Amp CLI** to analyze and fix issues\n- ✅ **Creates git branches** like `fix/sonar-\u003Cissue-key>`\n- ✅ **Commits changes** with descriptive messages\n- ✅ **Creates pull requests** using GitHub CLI\n- ✅ **Writes progress files** to `./output/\u003Cproject>/`\n\n## Example Workflow\n\n**Live execution steps:**\n1. Script fetches SonarQube issues for specified projects\n2. Groups issues by repository  \n3. **Clears previous output** for each project in `./output/`\n4. **Clones missing repositories** to `./repos/` directory\n5. For each issue:\n   - **Creates progress file**: `./output/\u003Cproject>/started-\u003Cissue-key>.md`\n   - **Creates git worktree** for isolation\n   - **Creates new branch**: `fix/sonar-\u003Cissue-key>`\n   - **Spawns Amp CLI** with detailed issue-specific prompt\n   - **Amp analyzes, fixes, commits** the changes\n   - **Creates pull request** via GitHub CLI\n   - **Updates progress file**: renamed to `fixed-\u003Cissue-key>.md`, `failed-\u003Cissue-key>.md`, etc.\n   - **Cleans up worktree**\n\n## Architecture\n\n- **ThreadProcessor**: Main class handling issue processing\n- **SonarIssue**: Interface for issue data structure\n- **RepoInfo**: Interface for repository information\n- **Git worktrees**: Enable concurrent processing on same repo\n- **Concurrent execution**: Limited per-repo to avoid conflicts\n\n## Logging\n\nComprehensive logging includes:\n- Issue fetching progress\n- Repository cloning/updating status  \n- Worktree creation/cleanup\n- Amp CLI execution details\n- PR creation results\n- Summary statistics\n\n## Error Handling\n\n- Graceful handling of missing repositories\n- Automatic worktree cleanup on failures\n- Detailed error logging with context\n- Process isolation prevents failures from affecting other issues\n\n## Troubleshooting\n\n### Common Issues\n\n### \"Amp CLI is not working properly\"\n- Ensure Amp CLI is installed: `npm install -g @sourcegraph/amp`\n- Test manually: `amp -x \"Hello, test message\"`\n- Check for latest version: `npm update -g @sourcegraph/amp`\n\n### \"SonarQube MCP tools not available\"\n- Verify SonarQube MCP server is installed and configured\n- Check your Amp settings.json includes the SonarQube MCP configuration\n- Test MCP connection: `amp -x \"Use mcp__sonarqube__search_my_sonarqube_projects tool\"`\n\n### \"Permission denied\" or SSH errors\n- Ensure GitHub CLI is authenticated: `gh auth login`\n- For private repositories, verify your GitHub token has appropriate permissions\n- Check SSH keys are configured: `ssh -T git@github.com`\n\n### \"Worktree creation failed\"\n- Ensure the worktree parent directory is writable\n- Check disk space in the configured temp directory\n- Verify git is properly installed and configured\n\n### Process hangs or times out\n- Increase the timeout by editing `ampTimeout` in the CONFIG object\n- Check network connectivity to GitHub and SonarQube\n- Monitor system resources (CPU, memory, disk)","src/content/examples/automation/sonarqube-amp/parallel-worktree/README.md","8b4438740b27921f",{"html":1748,"metadata":1749},"\u003Ch1 id=\"parallel-worktree-sonarqube-processor\">Parallel Worktree SonarQube Processor\u003C/h1>\n\u003Ch2 id=\"advanced-high-performance-approach-for-concurrent-issue-processing\">Advanced, high-performance approach for concurrent issue processing\u003C/h2>\n\u003Cp>This implementation uses git worktrees to process multiple SonarQube issues concurrently, providing maximum efficiency for large-scale automation.\u003C/p>\n\u003Ch2 id=\"how-it-works\">How It Works\u003C/h2>\n\u003Col>\n\u003Cli>\u003Cstrong>Fetches issues\u003C/strong> from SonarQube organization using MCP tools\u003C/li>\n\u003Cli>\u003Cstrong>Auto-clones repositories\u003C/strong> that don’t exist locally\u003C/li>\n\u003Cli>\u003Cstrong>Creates git worktrees\u003C/strong> for isolated issue processing\u003C/li>\n\u003Cli>\u003Cstrong>Processes multiple issues concurrently\u003C/strong> (configurable, default: 3 per repo)\u003C/li>\n\u003Cli>\u003Cstrong>Spawns Amp CLI threads\u003C/strong> to fix issues with AI assistance\u003C/li>\n\u003Cli>\u003Cstrong>Creates pull requests\u003C/strong> via GitHub CLI\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"key-features\">Key Features\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>Organization-based filtering\u003C/strong>: Only processes issues from your specified SonarQube organization\u003C/li>\n\u003Cli>\u003Cstrong>Multi-repo support\u003C/strong>: Automatically clones and processes issues across multiple repositories\u003C/li>\n\u003Cli>\u003Cstrong>Concurrent processing\u003C/strong>: Handles multiple issues per repository using git worktrees\u003C/li>\n\u003Cli>\u003Cstrong>SonarQube integration\u003C/strong>: Fetches real issues from your SonarQube instance\u003C/li>\n\u003Cli>\u003Cstrong>PR automation\u003C/strong>: Creates pull requests with proper titles and descriptions\u003C/li>\n\u003Cli>\u003Cstrong>Progress tracking\u003C/strong>: Comprehensive logging and progress reporting\u003C/li>\n\u003Cli>\u003Cstrong>Configurable paths\u003C/strong>: Uses environment variables for flexible deployment\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"when-to-use-this-approach\">When to Use This Approach\u003C/h2>\n\u003Cp>\u003Cstrong>Perfect for:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>Processing 10+ issues across multiple repositories\u003C/li>\n\u003Cli>High-volume automation scenarios\u003C/li>\n\u003Cli>When time efficiency is critical\u003C/li>\n\u003Cli>Users comfortable with advanced git concepts\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>Requirements:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>Sufficient disk space for multiple worktrees\u003C/li>\n\u003Cli>Adequate system memory for concurrent processing\u003C/li>\n\u003Cli>Familiarity with git worktrees and concurrent operations\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"download--setup\">Download &#x26; Setup\u003C/h2>\n\u003Col>\n\u003Cli>\u003Cstrong>Download the script\u003C/strong>: \u003Ca href=\"./amp-sonarqube-worker.ts\">\u003Ccode>amp-sonarqube-worker.ts\u003C/code>\u003C/a>\u003C/li>\n\u003Cli>\u003Cstrong>Install dependencies\u003C/strong>: \u003Ccode>npm install -g tsx\u003C/code> (for running TypeScript files)\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"quick-start\">Quick Start\u003C/h2>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Run the processor\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">npx\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> tsx\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> amp-sonarqube-worker.ts\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x3C;\u003C/span>\u003Cspan style=\"color:#9ECBFF\">your-sonar-or\u003C/span>\u003Cspan style=\"color:#E1E4E8\">g\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --dry-run\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">npx\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> tsx\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> amp-sonarqube-worker.ts\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x3C;\u003C/span>\u003Cspan style=\"color:#9ECBFF\">your-sonar-or\u003C/span>\u003Cspan style=\"color:#E1E4E8\">g\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"prerequisites\">Prerequisites\u003C/h2>\n\u003Cp>Ensure you have these tools installed and authenticated:\u003C/p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>Tool\u003C/th>\u003Cth>Purpose\u003C/th>\u003Cth>Installation\u003C/th>\u003Cth>Authentication\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>\u003Cstrong>Amp CLI\u003C/strong>\u003C/td>\u003Ctd>AI code analysis and fixing\u003C/td>\u003Ctd>\u003Ccode>npm install -g @sourcegraph/amp\u003C/code>\u003C/td>\u003Ctd>Built-in authentication\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Cstrong>GitHub CLI\u003C/strong>\u003C/td>\u003Ctd>Creating pull requests\u003C/td>\u003Ctd>\u003Ccode>gh auth login\u003C/code>\u003C/td>\u003Ctd>\u003Ccode>gh auth login\u003C/code>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Cstrong>Git\u003C/strong>\u003C/td>\u003Ctd>Repository operations\u003C/td>\u003Ctd>System package manager\u003C/td>\u003Ctd>\u003Ccode>git config\u003C/code> user setup\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Cstrong>Node.js\u003C/strong>\u003C/td>\u003Ctd>Running TypeScript\u003C/td>\u003Ctd>nodejs.org\u003C/td>\u003Ctd>Not required\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Cstrong>SonarQube MCP\u003C/strong>\u003C/td>\u003Ctd>Fetching issues\u003C/td>\u003Ctd>See MCP setup below\u003C/td>\u003Ctd>Token-based\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Ch2 id=\"usage\">Usage\u003C/h2>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Process all issues from your SonarQube organization (default: 3 concurrent per repo)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">npx\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> tsx\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> amp-sonarqube-worker.ts\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x3C;\u003C/span>\u003Cspan style=\"color:#9ECBFF\">sonar-or\u003C/span>\u003Cspan style=\"color:#E1E4E8\">g\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Process specific projects with custom concurrency\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">npx\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> tsx\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> amp-sonarqube-worker.ts\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x3C;\u003C/span>\u003Cspan style=\"color:#9ECBFF\">sonar-or\u003C/span>\u003Cspan style=\"color:#E1E4E8\">g\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"project1,project2\"\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x3C;\u003C/span>\u003Cspan style=\"color:#9ECBFF\">max-concurrent-per-rep\u003C/span>\u003Cspan style=\"color:#E1E4E8\">o\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Dry run - see what would be processed without making changes\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">npx\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> tsx\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> amp-sonarqube-worker.ts\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x3C;\u003C/span>\u003Cspan style=\"color:#9ECBFF\">sonar-or\u003C/span>\u003Cspan style=\"color:#E1E4E8\">g\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --dry-run\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Show help\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">npx\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> tsx\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> amp-sonarqube-worker.ts\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --help\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Examples\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">npx\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> tsx\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> amp-sonarqube-worker.ts\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> isuru-f-1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">npx\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> tsx\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> amp-sonarqube-worker.ts\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> isuru-f-1\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"my-app,my-api\"\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 5\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">npx\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> tsx\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> amp-sonarqube-worker.ts\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> isuru-f-1\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --dry-run\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"parameters\">Parameters\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Ccode>&#x3C;sonar-org>\u003C/code>: \u003Cstrong>Required\u003C/strong> - Your SonarQube organization name (e.g., “isuru-f-1”)\u003C/li>\n\u003Cli>\u003Ccode>\"project1,project2\"\u003C/code>: \u003Cstrong>Optional\u003C/strong> - Comma-separated list of specific project keys to process\u003C/li>\n\u003Cli>\u003Ccode>&#x3C;max-concurrent-per-repo>\u003C/code>: \u003Cstrong>Optional\u003C/strong> - Maximum concurrent issues per repository (default: 3)\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"options\">Options\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Ccode>--dry-run\u003C/code>: Show what would be processed without making any changes\u003C/li>\n\u003Cli>\u003Ccode>--help, -h\u003C/code>: Display help information and usage examples\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"example-pr-output\">Example PR Output\u003C/h3>\n\u003Cp>Example PRs created by this script:\n\u003Cimg src=\"/images/sonarqube-prs.png\" alt=\"alt text\">\u003C/p>\n\u003Cp>Example progress files created by this script:\n\u003Cimg src=\"/images/sonarqube-progress-files.png\" alt=\"alt text\">\u003C/p>\n\u003Cp>In the event a file is skipped,started,completed or blocked you can see the progress files in the \u003Ccode>./output/\u003C/code> directory.\nEach issue is tracked in it’s own file in the \u003Ccode>./output/\u003C/code> directory with the SonarQube issue key as the filename.\u003C/p>\n\u003Ch2 id=\"configuration\">Configuration\u003C/h2>\n\u003Cp>The script supports flexible configuration through the \u003Ccode>CONFIG\u003C/code> object at the top of the file. Simply edit these values in \u003Ccode>amp-sonarqube-worker.ts\u003C/code>:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> CONFIG\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">\t// Directory where repositories will be cloned\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\tbaseRepoPath: \u003C/span>\u003Cspan style=\"color:#B392F0\">join\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(process.\u003C/span>\u003Cspan style=\"color:#B392F0\">cwd\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(), \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'repos'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\t\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">\t// Directory where progress files will be written  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\toutputPath: \u003C/span>\u003Cspan style=\"color:#B392F0\">join\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(process.\u003C/span>\u003Cspan style=\"color:#B392F0\">cwd\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(), \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'output'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\t\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">\t// Temporary directory for git worktrees\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\tworktreeParentDir: \u003C/span>\u003Cspan style=\"color:#B392F0\">tmpdir\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\t\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">\t// Maximum number of concurrent issues to process per repository\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\tmaxConcurrentPerRepo: \u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\t\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">\t// Timeout for Amp CLI operations in milliseconds (5 minutes)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\tampTimeout: \u003C/span>\u003Cspan style=\"color:#79B8FF\">300000\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>You can also override these settings with environment variables if needed:\u003C/p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>Environment Variable\u003C/th>\u003Cth>Purpose\u003C/th>\u003Cth>Default Value\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>\u003Ccode>REPOS_DIR\u003C/code>\u003C/td>\u003Ctd>Directory where repositories are cloned\u003C/td>\u003Ctd>\u003Ccode>./repos\u003C/code>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ccode>OUTPUT_DIR\u003C/code>\u003C/td>\u003Ctd>Directory where progress files are written\u003C/td>\u003Ctd>\u003Ccode>./output\u003C/code>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ccode>WORKTREE_PARENT_DIR\u003C/code>\u003C/td>\u003Ctd>Temporary directory for git worktrees\u003C/td>\u003Ctd>System temp directory\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ccode>MAX_CONCURRENT_PER_REPO\u003C/code>\u003C/td>\u003Ctd>Maximum concurrent issues per repository\u003C/td>\u003Ctd>\u003Ccode>3\u003C/code>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ccode>AMP_TIMEOUT_MS\u003C/code>\u003C/td>\u003Ctd>Timeout for Amp CLI operations\u003C/td>\u003Ctd>\u003Ccode>300000\u003C/code> (5 minutes)\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Ch3 id=\"file-structure--output\">File Structure &#x26; Output\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"text\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>amp-thread-processor/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>├── repos/                    # Cloned repositories (configurable)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│   └── owner-repo-name/     # Individual repository folders\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>├── output/                   # Progress tracking (configurable)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│   └── project-name/        # Project-specific progress files\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│       ├── started-SQ_ISSUE_KEY.md   # Issue processing started\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│       ├── fixed-SQ_ISSUE_KEY.md     # Successfully resolved + PR created\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│       ├── failed-SQ_ISSUE_KEY.md    # Failed to fix\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│       ├── blocked-SQ_ISSUE_KEY.md   # Needs manual intervention\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│       └── skipped-SQ_ISSUE_KEY.md   # Already has existing fix/PR\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>└── /tmp/worktree-*/         # Temporary git worktrees (configurable)\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>Output Files Explained:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>\u003Ccode>started-SQ_ISSUE_KEY.md\u003C/code>\u003C/strong>: Created when processing begins, contains issue details and real-time progress\u003C/li>\n\u003Cli>\u003Cstrong>\u003Ccode>fixed-SQ_ISSUE_KEY.md\u003C/code>\u003C/strong>: Issue successfully fixed, code committed, PR created\u003C/li>\n\u003Cli>\u003Cstrong>\u003Ccode>failed-SQ_ISSUE_KEY.md\u003C/code>\u003C/strong>: Technical failure (Amp CLI error, git issues, etc.)\u003C/li>\n\u003Cli>\u003Cstrong>\u003Ccode>blocked-SQ_ISSUE_KEY.md\u003C/code>\u003C/strong>: Amp CLI requests manual intervention or human input\u003C/li>\n\u003Cli>\u003Cstrong>\u003Ccode>skipped-SQ_ISSUE_KEY.md\u003C/code>\u003C/strong>: Issue already has existing fix or open PR\u003C/li>\n\u003C/ul>\n\u003Cp>Each file contains:\u003C/p>\n\u003Cul>\n\u003Cli>Issue details (key, severity, message, file, line)\u003C/li>\n\u003Cli>Processing progress with timestamps\u003C/li>\n\u003Cli>Amp CLI output and actions taken\u003C/li>\n\u003Cli>Final status and any error messages\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"sonarqube-mcp-setup\">SonarQube MCP Setup\u003C/h3>\n\u003Cp>The script integrates with SonarQube through MCP (Model Context Protocol) tools. To set this up:\u003C/p>\n\u003Col>\n\u003Cli>\n\u003Cp>\u003Cstrong>Install SonarQube MCP Server\u003C/strong> (follow the \u003Ca href=\"https://github.com/SonarSource/sonarqube-mcp-server\">setup guide\u003C/a>)\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Configure Amp settings.json\u003C/strong> to include the SonarQube MCP server\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003Cp>\u003Cstrong>Note\u003C/strong>: If SonarQube MCP is not configured, the script will automatically use demo data for testing purposes.\u003C/p>\n\u003Cp>The script will then automatically:\u003C/p>\n\u003Cul>\n\u003Cli>Fetch real projects from your SonarQube organization\u003C/li>\n\u003Cli>Get actual open issues from those projects\u003C/li>\n\u003Cli>Extract repository information from SonarQube data\u003C/li>\n\u003Cli>Clone and process real repositories\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"amp-cli-integration\">Amp CLI Integration\u003C/h3>\n\u003Cp>Each issue spawns an Amp CLI thread with a detailed prompt that:\u003C/p>\n\u003Cul>\n\u003Cli>Analyzes the specific SonarQube issue\u003C/li>\n\u003Cli>Uses SonarQube MCP tools for additional context\u003C/li>\n\u003Cli>Locates and fixes the problematic code\u003C/li>\n\u003Cli>Commits changes and creates a PR via gh CLI\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"dry-run-vs-live-execution\">Dry-Run vs Live Execution\u003C/h2>\n\u003Ch3 id=\"always-start-with-a-dry-run-first\">\u003Cstrong>Always start with a dry-run first!\u003C/strong>\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># First, see what would be processed\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">npx\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> tsx\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> amp-sonarqube-worker.ts\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> your-org\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --dry-run\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>Dry-run mode (\u003Ccode>--dry-run\u003C/code>)\u003C/strong>:\u003C/p>\n\u003Cul>\n\u003Cli>✅ Fetches real SonarQube issues\u003C/li>\n\u003Cli>✅ Shows detailed summary of what would be processed\u003C/li>\n\u003Cli>✅ Groups issues by project and repository\u003C/li>\n\u003Cli>✅ Shows severity breakdown\u003C/li>\n\u003Cli>❌ \u003Cstrong>No repositories cloned\u003C/strong>\u003C/li>\n\u003Cli>❌ \u003Cstrong>No files modified\u003C/strong>\u003C/li>\n\u003Cli>❌ \u003Cstrong>No PRs created\u003C/strong>\u003C/li>\n\u003Cli>❌ \u003Cstrong>No git operations performed\u003C/strong>\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>Live execution\u003C/strong> (without \u003Ccode>--dry-run\u003C/code>):\u003C/p>\n\u003Cul>\n\u003Cli>✅ Fetches SonarQube issues\u003C/li>\n\u003Cli>✅ \u003Cstrong>Clones repositories\u003C/strong> to \u003Ccode>./repos/\u003C/code> directory\u003C/li>\n\u003Cli>✅ \u003Cstrong>Creates git worktrees\u003C/strong> for isolated processing\u003C/li>\n\u003Cli>✅ \u003Cstrong>Spawns Amp CLI\u003C/strong> to analyze and fix issues\u003C/li>\n\u003Cli>✅ \u003Cstrong>Creates git branches\u003C/strong> like \u003Ccode>fix/sonar-&#x3C;issue-key>\u003C/code>\u003C/li>\n\u003Cli>✅ \u003Cstrong>Commits changes\u003C/strong> with descriptive messages\u003C/li>\n\u003Cli>✅ \u003Cstrong>Creates pull requests\u003C/strong> using GitHub CLI\u003C/li>\n\u003Cli>✅ \u003Cstrong>Writes progress files\u003C/strong> to \u003Ccode>./output/&#x3C;project>/\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"example-workflow\">Example Workflow\u003C/h2>\n\u003Cp>\u003Cstrong>Live execution steps:\u003C/strong>\u003C/p>\n\u003Col>\n\u003Cli>Script fetches SonarQube issues for specified projects\u003C/li>\n\u003Cli>Groups issues by repository\u003C/li>\n\u003Cli>\u003Cstrong>Clears previous output\u003C/strong> for each project in \u003Ccode>./output/\u003C/code>\u003C/li>\n\u003Cli>\u003Cstrong>Clones missing repositories\u003C/strong> to \u003Ccode>./repos/\u003C/code> directory\u003C/li>\n\u003Cli>For each issue:\n\u003Cul>\n\u003Cli>\u003Cstrong>Creates progress file\u003C/strong>: \u003Ccode>./output/&#x3C;project>/started-&#x3C;issue-key>.md\u003C/code>\u003C/li>\n\u003Cli>\u003Cstrong>Creates git worktree\u003C/strong> for isolation\u003C/li>\n\u003Cli>\u003Cstrong>Creates new branch\u003C/strong>: \u003Ccode>fix/sonar-&#x3C;issue-key>\u003C/code>\u003C/li>\n\u003Cli>\u003Cstrong>Spawns Amp CLI\u003C/strong> with detailed issue-specific prompt\u003C/li>\n\u003Cli>\u003Cstrong>Amp analyzes, fixes, commits\u003C/strong> the changes\u003C/li>\n\u003Cli>\u003Cstrong>Creates pull request\u003C/strong> via GitHub CLI\u003C/li>\n\u003Cli>\u003Cstrong>Updates progress file\u003C/strong>: renamed to \u003Ccode>fixed-&#x3C;issue-key>.md\u003C/code>, \u003Ccode>failed-&#x3C;issue-key>.md\u003C/code>, etc.\u003C/li>\n\u003Cli>\u003Cstrong>Cleans up worktree\u003C/strong>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"architecture\">Architecture\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>ThreadProcessor\u003C/strong>: Main class handling issue processing\u003C/li>\n\u003Cli>\u003Cstrong>SonarIssue\u003C/strong>: Interface for issue data structure\u003C/li>\n\u003Cli>\u003Cstrong>RepoInfo\u003C/strong>: Interface for repository information\u003C/li>\n\u003Cli>\u003Cstrong>Git worktrees\u003C/strong>: Enable concurrent processing on same repo\u003C/li>\n\u003Cli>\u003Cstrong>Concurrent execution\u003C/strong>: Limited per-repo to avoid conflicts\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"logging\">Logging\u003C/h2>\n\u003Cp>Comprehensive logging includes:\u003C/p>\n\u003Cul>\n\u003Cli>Issue fetching progress\u003C/li>\n\u003Cli>Repository cloning/updating status\u003C/li>\n\u003Cli>Worktree creation/cleanup\u003C/li>\n\u003Cli>Amp CLI execution details\u003C/li>\n\u003Cli>PR creation results\u003C/li>\n\u003Cli>Summary statistics\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"error-handling\">Error Handling\u003C/h2>\n\u003Cul>\n\u003Cli>Graceful handling of missing repositories\u003C/li>\n\u003Cli>Automatic worktree cleanup on failures\u003C/li>\n\u003Cli>Detailed error logging with context\u003C/li>\n\u003Cli>Process isolation prevents failures from affecting other issues\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"troubleshooting\">Troubleshooting\u003C/h2>\n\u003Ch3 id=\"common-issues\">Common Issues\u003C/h3>\n\u003Ch3 id=\"amp-cli-is-not-working-properly\">”Amp CLI is not working properly”\u003C/h3>\n\u003Cul>\n\u003Cli>Ensure Amp CLI is installed: \u003Ccode>npm install -g @sourcegraph/amp\u003C/code>\u003C/li>\n\u003Cli>Test manually: \u003Ccode>amp -x \"Hello, test message\"\u003C/code>\u003C/li>\n\u003Cli>Check for latest version: \u003Ccode>npm update -g @sourcegraph/amp\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"sonarqube-mcp-tools-not-available\">”SonarQube MCP tools not available”\u003C/h3>\n\u003Cul>\n\u003Cli>Verify SonarQube MCP server is installed and configured\u003C/li>\n\u003Cli>Check your Amp settings.json includes the SonarQube MCP configuration\u003C/li>\n\u003Cli>Test MCP connection: \u003Ccode>amp -x \"Use mcp__sonarqube__search_my_sonarqube_projects tool\"\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"permission-denied-or-ssh-errors\">”Permission denied” or SSH errors\u003C/h3>\n\u003Cul>\n\u003Cli>Ensure GitHub CLI is authenticated: \u003Ccode>gh auth login\u003C/code>\u003C/li>\n\u003Cli>For private repositories, verify your GitHub token has appropriate permissions\u003C/li>\n\u003Cli>Check SSH keys are configured: \u003Ccode>ssh -T git@github.com\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"worktree-creation-failed\">”Worktree creation failed”\u003C/h3>\n\u003Cul>\n\u003Cli>Ensure the worktree parent directory is writable\u003C/li>\n\u003Cli>Check disk space in the configured temp directory\u003C/li>\n\u003Cli>Verify git is properly installed and configured\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"process-hangs-or-times-out\">Process hangs or times out\u003C/h3>\n\u003Cul>\n\u003Cli>Increase the timeout by editing \u003Ccode>ampTimeout\u003C/code> in the CONFIG object\u003C/li>\n\u003Cli>Check network connectivity to GitHub and SonarQube\u003C/li>\n\u003Cli>Monitor system resources (CPU, memory, disk)\u003C/li>\n\u003C/ul>",{"headings":1750,"localImagePaths":1822,"remoteImagePaths":1823,"frontmatter":1824,"imagePaths":1825},[1751,1754,1757,1760,1763,1764,1767,1768,1769,1770,1773,1776,1779,1780,1783,1786,1789,1792,1795,1798,1801,1804,1805,1806,1807,1810,1813,1816,1819],{"depth":22,"slug":1752,"text":1753},"parallel-worktree-sonarqube-processor","Parallel Worktree SonarQube Processor",{"depth":25,"slug":1755,"text":1756},"advanced-high-performance-approach-for-concurrent-issue-processing","Advanced, high-performance approach for concurrent issue processing",{"depth":25,"slug":1758,"text":1759},"how-it-works","How It Works",{"depth":25,"slug":1761,"text":1762},"key-features","Key Features",{"depth":25,"slug":1173,"text":1174},{"depth":25,"slug":1765,"text":1766},"download--setup","Download & Setup",{"depth":25,"slug":428,"text":429},{"depth":25,"slug":621,"text":622},{"depth":25,"slug":66,"text":67},{"depth":32,"slug":1771,"text":1772},"parameters","Parameters",{"depth":32,"slug":1774,"text":1775},"options","Options",{"depth":32,"slug":1777,"text":1778},"example-pr-output","Example PR Output",{"depth":25,"slug":489,"text":490},{"depth":32,"slug":1781,"text":1782},"file-structure--output","File Structure & Output",{"depth":32,"slug":1784,"text":1785},"sonarqube-mcp-setup","SonarQube MCP Setup",{"depth":32,"slug":1787,"text":1788},"amp-cli-integration","Amp CLI Integration",{"depth":25,"slug":1790,"text":1791},"dry-run-vs-live-execution","Dry-Run vs Live Execution",{"depth":32,"slug":1793,"text":1794},"always-start-with-a-dry-run-first","Always start with a dry-run first!",{"depth":25,"slug":1796,"text":1797},"example-workflow","Example Workflow",{"depth":25,"slug":1799,"text":1800},"architecture","Architecture",{"depth":25,"slug":1802,"text":1803},"logging","Logging",{"depth":25,"slug":257,"text":258},{"depth":25,"slug":549,"text":550},{"depth":32,"slug":552,"text":553},{"depth":32,"slug":1808,"text":1809},"amp-cli-is-not-working-properly","”Amp CLI is not working properly”",{"depth":32,"slug":1811,"text":1812},"sonarqube-mcp-tools-not-available","”SonarQube MCP tools not available”",{"depth":32,"slug":1814,"text":1815},"permission-denied-or-ssh-errors","”Permission denied” or SSH errors",{"depth":32,"slug":1817,"text":1818},"worktree-creation-failed","”Worktree creation failed”",{"depth":32,"slug":1820,"text":1821},"process-hangs-or-times-out","Process hangs or times out",[],[],{},[],"automation/sonarqube-amp/parallel-worktree/README.md","automation/sonarqube-amp/sequential-simple/step_1_sonarqube-issue-processor-prompt-template",{"id":1827,"data":1829,"body":1830,"filePath":1831,"digest":1832,"rendered":1833,"legacyId":1853},{},"# SonarQube Issue Processor Prompt Template\n\n## Template Usage\nReplace the placeholders below with your specific values:\n\n- `{REPO_LOCATION}`: Full path to your repository\n- `{BASE_BRANCH}`: The branch to work from (e.g., main, develop)\n- `{SONARQUBE_PROJECT_KEY}`: Your SonarQube project identifier\n- `{PLAN_DESCRIPTION}`: Brief description of your remediation plan\n\n## Prompt Template\n\n```text\nProcess SonarQube issues for repository at {REPO_LOCATION} on branch {BASE_BRANCH}.\n\n**Project Details:**\n- Repository: {REPO_LOCATION}\n- Base Branch: {BASE_BRANCH}\n- SonarQube Project: {SONARQUBE_PROJECT_KEY}\n- Plan: {PLAN_DESCRIPTION}\n\n**Tasks:**\n1. Fetch all SonarQube issues for project key: {SONARQUBE_PROJECT_KEY}\n2. Create directory `./amp-sonarqube-processor/{SONARQUBE_PROJECT_KEY}` in the current working directory (not in the repo location)\n3. For each SonarQube issue found:\n   - Create a progress file named: `NOT-STARTED-{ISSUE_KEY}-progress.md`\n   - Include issue details, resolution instructions, and progress tracking steps\n   - Structure each file with:\n     * Issue overview and severity\n     * Root cause analysis\n     * Step-by-step resolution plan\n     * Progress checklist\n     * Acceptance criteria\n\n**File Structure:**\n./amp-sonarqube-processor/\n├── NOT-STARTED-{ISSUE_KEY_1}-progress.md\n├── NOT-STARTED-{ISSUE_KEY_2}-progress.md\n└── NOT-STARTED-{ISSUE_KEY_N}-progress.md\n\n**Progress File Template:**\nEach progress file should follow this structure:\n- **Issue Summary**: Type, severity, file location\n- **Problem Description**: What the issue is and why it's problematic\n- **Resolution Strategy**: High-level approach to fix\n- **Implementation Steps**: Detailed action items with checkboxes\n- **Testing Requirements**: How to verify the fix\n- **Status Tracking**: Progress indicators and completion criteria\n\nProcess all issues systematically and create comprehensive remediation plans for effective issue resolution tracking.\n```\n\n## Example Usage\n\n```text\nProcess SonarQube issues for repository at /Users/dev/my-project on branch main.\n\n**Project Details:**\n- Repository: /Users/dev/my-project\n- Base Branch: main\n- SonarQube Project: my-app-frontend\n- Plan: Systematic remediation of all critical and high severity issues\n\n**Tasks:**\n1. Fetch all SonarQube issues for project key: my-app-frontend\n2. Create directory `./amp-sonarqube-processor` in the current working directory (not in the repo location)\n3. For each SonarQube issue found:\n   - Create a progress file named: `NOT-STARTED-{ISSUE_KEY}-progress.md`\n   - Include issue details, resolution instructions, and progress tracking steps\n...\n```","src/content/examples/automation/sonarqube-amp/sequential-simple/step_1_sonarqube-issue-processor-prompt-template.md","788c04ac45735e80",{"html":1834,"metadata":1835},"\u003Ch1 id=\"sonarqube-issue-processor-prompt-template\">SonarQube Issue Processor Prompt Template\u003C/h1>\n\u003Ch2 id=\"template-usage\">Template Usage\u003C/h2>\n\u003Cp>Replace the placeholders below with your specific values:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>{REPO_LOCATION}\u003C/code>: Full path to your repository\u003C/li>\n\u003Cli>\u003Ccode>{BASE_BRANCH}\u003C/code>: The branch to work from (e.g., main, develop)\u003C/li>\n\u003Cli>\u003Ccode>{SONARQUBE_PROJECT_KEY}\u003C/code>: Your SonarQube project identifier\u003C/li>\n\u003Cli>\u003Ccode>{PLAN_DESCRIPTION}\u003C/code>: Brief description of your remediation plan\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"prompt-template\">Prompt Template\u003C/h2>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"text\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>Process SonarQube issues for repository at {REPO_LOCATION} on branch {BASE_BRANCH}.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>**Project Details:**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>- Repository: {REPO_LOCATION}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>- Base Branch: {BASE_BRANCH}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>- SonarQube Project: {SONARQUBE_PROJECT_KEY}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>- Plan: {PLAN_DESCRIPTION}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>**Tasks:**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>1. Fetch all SonarQube issues for project key: {SONARQUBE_PROJECT_KEY}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>2. Create directory `./amp-sonarqube-processor/{SONARQUBE_PROJECT_KEY}` in the current working directory (not in the repo location)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>3. For each SonarQube issue found:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>   - Create a progress file named: `NOT-STARTED-{ISSUE_KEY}-progress.md`\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>   - Include issue details, resolution instructions, and progress tracking steps\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>   - Structure each file with:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>     * Issue overview and severity\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>     * Root cause analysis\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>     * Step-by-step resolution plan\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>     * Progress checklist\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>     * Acceptance criteria\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>**File Structure:**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>./amp-sonarqube-processor/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>├── NOT-STARTED-{ISSUE_KEY_1}-progress.md\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>├── NOT-STARTED-{ISSUE_KEY_2}-progress.md\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>└── NOT-STARTED-{ISSUE_KEY_N}-progress.md\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>**Progress File Template:**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Each progress file should follow this structure:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>- **Issue Summary**: Type, severity, file location\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>- **Problem Description**: What the issue is and why it's problematic\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>- **Resolution Strategy**: High-level approach to fix\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>- **Implementation Steps**: Detailed action items with checkboxes\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>- **Testing Requirements**: How to verify the fix\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>- **Status Tracking**: Progress indicators and completion criteria\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Process all issues systematically and create comprehensive remediation plans for effective issue resolution tracking.\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"example-usage\">Example Usage\u003C/h2>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"text\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>Process SonarQube issues for repository at /Users/dev/my-project on branch main.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>**Project Details:**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>- Repository: /Users/dev/my-project\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>- Base Branch: main\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>- SonarQube Project: my-app-frontend\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>- Plan: Systematic remediation of all critical and high severity issues\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>**Tasks:**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>1. Fetch all SonarQube issues for project key: my-app-frontend\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>2. Create directory `./amp-sonarqube-processor` in the current working directory (not in the repo location)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>3. For each SonarQube issue found:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>   - Create a progress file named: `NOT-STARTED-{ISSUE_KEY}-progress.md`\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>   - Include issue details, resolution instructions, and progress tracking steps\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>...\u003C/span>\u003C/span>\u003C/code>\u003C/pre>",{"headings":1836,"localImagePaths":1849,"remoteImagePaths":1850,"frontmatter":1851,"imagePaths":1852},[1837,1840,1843,1846],{"depth":22,"slug":1838,"text":1839},"sonarqube-issue-processor-prompt-template","SonarQube Issue Processor Prompt Template",{"depth":25,"slug":1841,"text":1842},"template-usage","Template Usage",{"depth":25,"slug":1844,"text":1845},"prompt-template","Prompt Template",{"depth":25,"slug":1847,"text":1848},"example-usage","Example Usage",[],[],{},[],"automation/sonarqube-amp/sequential-simple/step_1_sonarqube-issue-processor-prompt-template.md","automation/sonarqube-amp/sequential-simple/readme",{"id":1854,"data":1856,"body":1857,"filePath":1858,"digest":1859,"rendered":1860,"legacyId":1923},{},"# Sequential SonarQube Issue Processor\n\n## Simple, beginner-friendly approach for processing SonarQube issues one at a time\n\nThis implementation uses a two-step prompt-based approach to process SonarQube issues sequentially, making it ideal for learning the automation workflow or handling smaller batches of issues with full control and visibility.\n\n## Overview\n\nThis sequential approach breaks the automation into two clear steps:\n\n1. **Step 1: Analysis & Planning** - Fetch issues from SonarQube and create execution plans\n2. **Step 2: Sequential Execution** - Process each issue according to the plan, one at a time\n\n## When to Use This Approach\n\n**Perfect for:**\n- Learning SonarQube automation workflows\n- Processing fewer than 10 issues\n- Systems with limited resources\n- Situations requiring careful review before execution\n- Users who want full visibility into each step\n- Manual oversight and control over the process\n\n**Advantages:**\n- Simple to understand and debug\n- Full visibility into planning before execution\n- Manual review points between steps\n- Easy error recovery and intervention\n- Clear progress tracking\n- No complex git worktree management\n\n## Prerequisites\n\n- **Amp CLI**: `npm install -g @sourcegraph/amp`\n- **GitHub CLI**: `gh auth login` \n- **Git**: Standard git installation with configured user\n- **SonarQube MCP**: Configured in your Amp settings for fetching issues\n\n## Step 1: Issue Analysis & Planning\n\n### Step 1 Overview\n\nThe first step fetches SonarQube issues and creates detailed execution plans for each issue, including analysis of the code problems and step-by-step fix instructions.\n\n### How to Execute\n\nExecute this from the **parent directory** where your repositories already exist:\n\n```bash\n# Navigate to your workspace directory (where repos are located) \n\n#copy the step_1_sonarqube-analysis-prompt-template.md file [from the sequential-simple folder] to the parent directory\ncd /path/to/parent-dir-above-your-target-repo \n\n# launch Amp\namp\n\n# use this prompt referencing the template and fill in your variables \nusing @sonarqube-issue-processor-prompt-template.md generate a plan to fix the issues\n┃\n┃ REPO_LOCATION = ./demo-latest-audiobooks\n┃ BASE_BRANCH = main\n┃ SONARQUBE_PROJECT_KEY = Isuru-F_demo-latest-audiobooks\n```\n\nExample thread \u003Chttps://ampcode.com/threads/T-b199e3db-3261-4e4d-bb7c-db7951799366?q=sonarqube>\n\n\n**Template Reference**: [`step_1_sonarqube-analysis-prompt-template.md`](./step_1_sonarqube-analysis-prompt-template.md)\n\n**Example Thread**: [View Step 1 Analysis Example →](LINK_TO_STEP_1_THREAD)\n\n### Output Files\n\nAfter Step 1 completes, you'll have:\n- Individual analysis files for each SonarQube issue\n- Detailed execution plans with specific steps\n- Repository and file location information\n- Priority and complexity assessments\n\n## Step 2: Fix Implementation & Execution\n\n### Step 2 Overview\n\nThe second step takes the plans created in Step 1 and sequentially executes them, processing one issue at a time with full testing and PR creation.\n\n### Step 2 Execution\n\nExecute this from the same directory after Step 1 completes:\n\n```bash\n# Run Step 2 sequential execution\namp -x \"Use the SonarQube fix implementation template to sequentially process all planned issues. Follow the step_2_sonarqube-fix-implementation-prompt-template.md template.\"\n```\n\n### Example Execution\n\n```bash\n# Execute the planned fixes\namp -x \"Use the SonarQube fix implementation template to sequentially process all planned issues from Step 1. Follow the step_2_sonarqube-fix-implementation-prompt-template.md template and process issues one by one.\"\n```\n\n**Template Reference**: [`step_2_sonarqube-fix-implementation-prompt-template.md`](./step_2_sonarqube-fix-implementation-prompt-template.md)\n\n**Example Thread**: [View Step 2 Execution Example →](LINK_TO_STEP_2_THREAD)\n\n### What Happens During Execution\n\nFor each issue, Step 2 will:\n1. Navigate to the correct repository\n2. Create a new branch for the fix\n3. Implement the planned solution\n4. Build and test the code\n5. Commit changes with descriptive messages\n6. Create a pull request via GitHub CLI\n7. Update progress tracking\n8. Move to the next issue\n\n## Complete Workflow Example\n\nHere's a complete example of using both steps:\n\n```bash\n# 1. Navigate to your workspace (where repos exist)\ncd ~/my-workspace\n\n# 2. Run Step 1: Analysis & Planning\namp -x \"Use the SonarQube issue analysis template to fetch issues from organization 'my-sonarqube-org' and create execution plans. Follow the step_1_sonarqube-analysis-prompt-template.md template.\"\n\n# 3. Review the generated plans (optional but recommended)\nls -la sonar-issue-*.md\n\n# 4. Run Step 2: Sequential Execution  \namp -x \"Use the SonarQube fix implementation template to sequentially process all planned issues from Step 1. Follow the step_2_sonarqube-fix-implementation-prompt-template.md template.\"\n```\n\n## File Structure After Execution\n\n```text\nyour-workspace/\n├── repo-1/                     # Your existing repositories\n├── amp-sonarqube-processor\n    ├── repo-1\n        ├── NOT_STARTED-sonar-issue-ABC123.md       # Generated analysis files\n        ├── NOT_STARTED-sonar-issue-DEF456.md\n        ├── COMPLETED-sonar-execution-log.md      # Overall progress tracking\n```\n\n## Monitoring Progress\n\nBoth steps provide detailed logging and progress tracking:\n\n- **Step 1**: Creates analysis files you can review before execution\n- **Step 2**: Updates progress in real-time, moves completed issues to `sonar-completed/`\n- **Error Handling**: Clear error messages with recovery instructions\n- **PR Links**: All created PRs are tracked in `sonar-completed/pr-links.md`\n\n## Error Recovery\n\nIf Step 2 encounters issues:\n\n1. **Review the logs** in the generated files\n2. **Fix any blocking issues** manually if needed\n3. **Re-run Step 2** - it will skip already completed issues\n4. **Continue from where it left off**\n\n## Advantages Over Parallel Approach\n\n- **Manual Review Points**: Inspect plans before execution\n- **Easy local Debugging**: Debug locally if needed, using your preferred tools that you already use\n- **Intervention Possible**: Stop and resume at any point\n- **Learning Friendly**: See exactly what happens at each step\n- **Resource Efficient**: No concurrent processing overhead\n- **Controlled Execution**: Full visibility and control over each step\n\n\n## Getting Help\n\n1. **Review Template Files**: Check the referenced template files for detailed instructions\n2. **Check Example Threads**: Follow the linked example executions\n3. **Monitor Output Files**: Review generated analysis and log files\n4. **Start Small**: Try with a single repository first\n\n## Next Steps\n\n1. Ensure your repositories are already cloned in your workspace\n2. Configure SonarQube MCP in your Amp settings\n3. Run Step 1 to analyze and plan\n4. Review the generated plans\n5. Run Step 2 to execute sequentially","src/content/examples/automation/sonarqube-amp/sequential-simple/README.md","7a88eb7a23412ff7",{"html":1861,"metadata":1862},"\u003Ch1 id=\"sequential-sonarqube-issue-processor\">Sequential SonarQube Issue Processor\u003C/h1>\n\u003Ch2 id=\"simple-beginner-friendly-approach-for-processing-sonarqube-issues-one-at-a-time\">Simple, beginner-friendly approach for processing SonarQube issues one at a time\u003C/h2>\n\u003Cp>This implementation uses a two-step prompt-based approach to process SonarQube issues sequentially, making it ideal for learning the automation workflow or handling smaller batches of issues with full control and visibility.\u003C/p>\n\u003Ch2 id=\"overview\">Overview\u003C/h2>\n\u003Cp>This sequential approach breaks the automation into two clear steps:\u003C/p>\n\u003Col>\n\u003Cli>\u003Cstrong>Step 1: Analysis &#x26; Planning\u003C/strong> - Fetch issues from SonarQube and create execution plans\u003C/li>\n\u003Cli>\u003Cstrong>Step 2: Sequential Execution\u003C/strong> - Process each issue according to the plan, one at a time\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"when-to-use-this-approach\">When to Use This Approach\u003C/h2>\n\u003Cp>\u003Cstrong>Perfect for:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>Learning SonarQube automation workflows\u003C/li>\n\u003Cli>Processing fewer than 10 issues\u003C/li>\n\u003Cli>Systems with limited resources\u003C/li>\n\u003Cli>Situations requiring careful review before execution\u003C/li>\n\u003Cli>Users who want full visibility into each step\u003C/li>\n\u003Cli>Manual oversight and control over the process\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>Advantages:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>Simple to understand and debug\u003C/li>\n\u003Cli>Full visibility into planning before execution\u003C/li>\n\u003Cli>Manual review points between steps\u003C/li>\n\u003Cli>Easy error recovery and intervention\u003C/li>\n\u003Cli>Clear progress tracking\u003C/li>\n\u003Cli>No complex git worktree management\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"prerequisites\">Prerequisites\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>Amp CLI\u003C/strong>: \u003Ccode>npm install -g @sourcegraph/amp\u003C/code>\u003C/li>\n\u003Cli>\u003Cstrong>GitHub CLI\u003C/strong>: \u003Ccode>gh auth login\u003C/code>\u003C/li>\n\u003Cli>\u003Cstrong>Git\u003C/strong>: Standard git installation with configured user\u003C/li>\n\u003Cli>\u003Cstrong>SonarQube MCP\u003C/strong>: Configured in your Amp settings for fetching issues\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"step-1-issue-analysis--planning\">Step 1: Issue Analysis &#x26; Planning\u003C/h2>\n\u003Ch3 id=\"step-1-overview\">Step 1 Overview\u003C/h3>\n\u003Cp>The first step fetches SonarQube issues and creates detailed execution plans for each issue, including analysis of the code problems and step-by-step fix instructions.\u003C/p>\n\u003Ch3 id=\"how-to-execute\">How to Execute\u003C/h3>\n\u003Cp>Execute this from the \u003Cstrong>parent directory\u003C/strong> where your repositories already exist:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Navigate to your workspace directory (where repos are located) \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">#copy the step_1_sonarqube-analysis-prompt-template.md file [from the sequential-simple folder] to the parent directory\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">cd\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> /path/to/parent-dir-above-your-target-repo\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># launch Amp\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">amp\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># use this prompt referencing the template and fill in your variables \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">using\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> @sonarqube-issue-processor-prompt-template.md\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> generate\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> a\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> plan\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> to\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> fix\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> the\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> issues\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">┃\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">┃\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> REPO_LOCATION\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> =\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> ./demo-latest-audiobooks\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">┃\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> BASE_BRANCH\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> =\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> main\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">┃\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> SONARQUBE_PROJECT_KEY\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> =\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> Isuru-F_demo-latest-audiobooks\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Example thread \u003Ca href=\"https://ampcode.com/threads/T-b199e3db-3261-4e4d-bb7c-db7951799366?q=sonarqube\">https://ampcode.com/threads/T-b199e3db-3261-4e4d-bb7c-db7951799366?q=sonarqube\u003C/a>\u003C/p>\n\u003Cp>\u003Cstrong>Template Reference\u003C/strong>: \u003Ca href=\"./step_1_sonarqube-analysis-prompt-template.md\">\u003Ccode>step_1_sonarqube-analysis-prompt-template.md\u003C/code>\u003C/a>\u003C/p>\n\u003Cp>\u003Cstrong>Example Thread\u003C/strong>: \u003Ca href=\"LINK_TO_STEP_1_THREAD\">View Step 1 Analysis Example →\u003C/a>\u003C/p>\n\u003Ch3 id=\"output-files\">Output Files\u003C/h3>\n\u003Cp>After Step 1 completes, you’ll have:\u003C/p>\n\u003Cul>\n\u003Cli>Individual analysis files for each SonarQube issue\u003C/li>\n\u003Cli>Detailed execution plans with specific steps\u003C/li>\n\u003Cli>Repository and file location information\u003C/li>\n\u003Cli>Priority and complexity assessments\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"step-2-fix-implementation--execution\">Step 2: Fix Implementation &#x26; Execution\u003C/h2>\n\u003Ch3 id=\"step-2-overview\">Step 2 Overview\u003C/h3>\n\u003Cp>The second step takes the plans created in Step 1 and sequentially executes them, processing one issue at a time with full testing and PR creation.\u003C/p>\n\u003Ch3 id=\"step-2-execution\">Step 2 Execution\u003C/h3>\n\u003Cp>Execute this from the same directory after Step 1 completes:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Run Step 2 sequential execution\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Use the SonarQube fix implementation template to sequentially process all planned issues. Follow the step_2_sonarqube-fix-implementation-prompt-template.md template.\"\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"example-execution\">Example Execution\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Execute the planned fixes\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Use the SonarQube fix implementation template to sequentially process all planned issues from Step 1. Follow the step_2_sonarqube-fix-implementation-prompt-template.md template and process issues one by one.\"\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>Template Reference\u003C/strong>: \u003Ca href=\"./step_2_sonarqube-fix-implementation-prompt-template.md\">\u003Ccode>step_2_sonarqube-fix-implementation-prompt-template.md\u003C/code>\u003C/a>\u003C/p>\n\u003Cp>\u003Cstrong>Example Thread\u003C/strong>: \u003Ca href=\"LINK_TO_STEP_2_THREAD\">View Step 2 Execution Example →\u003C/a>\u003C/p>\n\u003Ch3 id=\"what-happens-during-execution\">What Happens During Execution\u003C/h3>\n\u003Cp>For each issue, Step 2 will:\u003C/p>\n\u003Col>\n\u003Cli>Navigate to the correct repository\u003C/li>\n\u003Cli>Create a new branch for the fix\u003C/li>\n\u003Cli>Implement the planned solution\u003C/li>\n\u003Cli>Build and test the code\u003C/li>\n\u003Cli>Commit changes with descriptive messages\u003C/li>\n\u003Cli>Create a pull request via GitHub CLI\u003C/li>\n\u003Cli>Update progress tracking\u003C/li>\n\u003Cli>Move to the next issue\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"complete-workflow-example\">Complete Workflow Example\u003C/h2>\n\u003Cp>Here’s a complete example of using both steps:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># 1. Navigate to your workspace (where repos exist)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">cd\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> ~/my-workspace\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># 2. Run Step 1: Analysis &#x26; Planning\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Use the SonarQube issue analysis template to fetch issues from organization 'my-sonarqube-org' and create execution plans. Follow the step_1_sonarqube-analysis-prompt-template.md template.\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># 3. Review the generated plans (optional but recommended)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">ls\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -la\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> sonar-issue-\u003C/span>\u003Cspan style=\"color:#79B8FF\">*\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.md\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># 4. Run Step 2: Sequential Execution  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">amp\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Use the SonarQube fix implementation template to sequentially process all planned issues from Step 1. Follow the step_2_sonarqube-fix-implementation-prompt-template.md template.\"\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"file-structure-after-execution\">File Structure After Execution\u003C/h2>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"text\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>your-workspace/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>├── repo-1/                     # Your existing repositories\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>├── amp-sonarqube-processor\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    ├── repo-1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>        ├── NOT_STARTED-sonar-issue-ABC123.md       # Generated analysis files\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>        ├── NOT_STARTED-sonar-issue-DEF456.md\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>        ├── COMPLETED-sonar-execution-log.md      # Overall progress tracking\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"monitoring-progress\">Monitoring Progress\u003C/h2>\n\u003Cp>Both steps provide detailed logging and progress tracking:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Step 1\u003C/strong>: Creates analysis files you can review before execution\u003C/li>\n\u003Cli>\u003Cstrong>Step 2\u003C/strong>: Updates progress in real-time, moves completed issues to \u003Ccode>sonar-completed/\u003C/code>\u003C/li>\n\u003Cli>\u003Cstrong>Error Handling\u003C/strong>: Clear error messages with recovery instructions\u003C/li>\n\u003Cli>\u003Cstrong>PR Links\u003C/strong>: All created PRs are tracked in \u003Ccode>sonar-completed/pr-links.md\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"error-recovery\">Error Recovery\u003C/h2>\n\u003Cp>If Step 2 encounters issues:\u003C/p>\n\u003Col>\n\u003Cli>\u003Cstrong>Review the logs\u003C/strong> in the generated files\u003C/li>\n\u003Cli>\u003Cstrong>Fix any blocking issues\u003C/strong> manually if needed\u003C/li>\n\u003Cli>\u003Cstrong>Re-run Step 2\u003C/strong> - it will skip already completed issues\u003C/li>\n\u003Cli>\u003Cstrong>Continue from where it left off\u003C/strong>\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"advantages-over-parallel-approach\">Advantages Over Parallel Approach\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>Manual Review Points\u003C/strong>: Inspect plans before execution\u003C/li>\n\u003Cli>\u003Cstrong>Easy local Debugging\u003C/strong>: Debug locally if needed, using your preferred tools that you already use\u003C/li>\n\u003Cli>\u003Cstrong>Intervention Possible\u003C/strong>: Stop and resume at any point\u003C/li>\n\u003Cli>\u003Cstrong>Learning Friendly\u003C/strong>: See exactly what happens at each step\u003C/li>\n\u003Cli>\u003Cstrong>Resource Efficient\u003C/strong>: No concurrent processing overhead\u003C/li>\n\u003Cli>\u003Cstrong>Controlled Execution\u003C/strong>: Full visibility and control over each step\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"getting-help\">Getting Help\u003C/h2>\n\u003Col>\n\u003Cli>\u003Cstrong>Review Template Files\u003C/strong>: Check the referenced template files for detailed instructions\u003C/li>\n\u003Cli>\u003Cstrong>Check Example Threads\u003C/strong>: Follow the linked example executions\u003C/li>\n\u003Cli>\u003Cstrong>Monitor Output Files\u003C/strong>: Review generated analysis and log files\u003C/li>\n\u003Cli>\u003Cstrong>Start Small\u003C/strong>: Try with a single repository first\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"next-steps\">Next Steps\u003C/h2>\n\u003Col>\n\u003Cli>Ensure your repositories are already cloned in your workspace\u003C/li>\n\u003Cli>Configure SonarQube MCP in your Amp settings\u003C/li>\n\u003Cli>Run Step 1 to analyze and plan\u003C/li>\n\u003Cli>Review the generated plans\u003C/li>\n\u003Cli>Run Step 2 to execute sequentially\u003C/li>\n\u003C/ol>",{"headings":1863,"localImagePaths":1919,"remoteImagePaths":1920,"frontmatter":1921,"imagePaths":1922},[1864,1867,1870,1871,1872,1873,1876,1879,1882,1885,1888,1891,1894,1897,1900,1903,1906,1909,1912,1915,1918],{"depth":22,"slug":1865,"text":1866},"sequential-sonarqube-issue-processor","Sequential SonarQube Issue Processor",{"depth":25,"slug":1868,"text":1869},"simple-beginner-friendly-approach-for-processing-sonarqube-issues-one-at-a-time","Simple, beginner-friendly approach for processing SonarQube issues one at a time",{"depth":25,"slug":122,"text":123},{"depth":25,"slug":1173,"text":1174},{"depth":25,"slug":621,"text":622},{"depth":25,"slug":1874,"text":1875},"step-1-issue-analysis--planning","Step 1: Issue Analysis & Planning",{"depth":32,"slug":1877,"text":1878},"step-1-overview","Step 1 Overview",{"depth":32,"slug":1880,"text":1881},"how-to-execute","How to Execute",{"depth":32,"slug":1883,"text":1884},"output-files","Output Files",{"depth":25,"slug":1886,"text":1887},"step-2-fix-implementation--execution","Step 2: Fix Implementation & Execution",{"depth":32,"slug":1889,"text":1890},"step-2-overview","Step 2 Overview",{"depth":32,"slug":1892,"text":1893},"step-2-execution","Step 2 Execution",{"depth":32,"slug":1895,"text":1896},"example-execution","Example Execution",{"depth":32,"slug":1898,"text":1899},"what-happens-during-execution","What Happens During Execution",{"depth":25,"slug":1901,"text":1902},"complete-workflow-example","Complete Workflow Example",{"depth":25,"slug":1904,"text":1905},"file-structure-after-execution","File Structure After Execution",{"depth":25,"slug":1907,"text":1908},"monitoring-progress","Monitoring Progress",{"depth":25,"slug":1910,"text":1911},"error-recovery","Error Recovery",{"depth":25,"slug":1913,"text":1914},"advantages-over-parallel-approach","Advantages Over Parallel Approach",{"depth":25,"slug":1916,"text":1917},"getting-help","Getting Help",{"depth":25,"slug":1149,"text":1322},[],[],{},[],"automation/sonarqube-amp/sequential-simple/README.md","automation/sonarqube-amp/sequential-simple/step_2_sonarqube-fix-implementation-prompt-template",{"id":1924,"data":1926,"body":1927,"filePath":1928,"digest":1929,"rendered":1930,"legacyId":1943},{},"# SonarQube Fix Implementation Prompt Template\n\n## Template Usage\nReplace the placeholders below with your specific values:\n\n- `{PLAN_FOLDER}`: Path to the amp-sonarqube-processor folder with progress files\n- `{REPO_LOCATION}`: Full path to your repository\n\n\n## Prompt Template\n\n```markdown\nImplement SonarQube issue fixes from plan folder {PLAN_FOLDER} in repository {REPO_LOCATION}.\n\n**Project Details:**\n- Plan Folder: {PLAN_FOLDER}\n- Repository: {REPO_LOCATION}\n- Base Branch: {BASE_BRANCH}\n- SonarQube URL: {SONARQUBE_URL}\n- SonarQube Project: {SONARQUBE_PROJECT_KEY}\n\n**Implementation Workflow:**\nFor each NOT-STARTED progress file in {PLAN_FOLDER}:\n\nRun through the following steps for each NOT-STARTED progress file in {PLAN_FOLDER} sequentally. Do not use git worktrees.  \n\n0. **Preparation**\n   - Update the progress file status from NOT-STARTED to IN-PROGRESS\n\n\n1. **Branch Creation**\n   - Extract issue key from filename (e.g., NOT-STARTED-{ISSUE_KEY}-progress.md)\n   - Create new branch: `fix/sonar-{ISSUE_KEY}`\n   - Switch to the new branch\n\n2. **Pre-Fix Validation**\n   - Run build command to ensure clean starting state\n   - Run test suite to verify current functionality\n   - Document any existing test failures\n\n3. **Issue Resolution**\n   - Follow the step-by-step resolution plan from the progress file\n   - Apply the fix according to the implementation steps\n   - Update the progress file status from NOT-STARTED to IN-PROGRESS\n\n4. **Post-Fix Validation**\n   - Run build command to verify fix doesn't break compilation\n   - Run full test suite to ensure no regressions\n   - Run any additional verification steps from the progress file\n\n5. **Pull Request Creation**\n   - Commit changes with descriptive message referencing issue key\n   - Push branch to origin\n   - Use `gh pr create --body-file pr-description.md` to create PR with detailed description\n\n6. Cleanup\n   - Update progress filename status from IN-PROGRESS to COMPLETED\n   - If the plan had issues or is blocked, update the status to BLOCKED in the filename, include why the project is blocked in the plan markdown file.\n   - Update of the progress within the plan markdown file\n   \n\n   \n   \n\n**PR Description Template:**\nCreate a temporary `pr-description.md` file for each PR with:\n\n```markdown\n## SonarQube Issue Fix: {ISSUE_KEY}\n\n### Issue Details\n- **SonarQube Link**: {SONARQUBE_URL}/project/issues?id={SONARQUBE_PROJECT_KEY}&issues={ISSUE_KEY}\n- **Issue Type**: [Bug/Code Smell/Vulnerability/Security Hotspot]\n- **Severity**: [Critical/Major/Minor/Info]\n- **File(s) Affected**: [List of files]\n\n### Problem Description\n[Brief description of the issue and why it needed fixing]\n\n### Solution Implemented\n[Description of the fix applied]\n\n### Technical Notes\n[Implementation details for developers]\n\n### Testing\n- [ ] Build passes\n- [ ] All existing tests pass\n- [ ] New tests added (if applicable)\n- [ ] Manual testing completed\n\n### SonarQube Verification\n- [ ] Issue resolved in SonarQube after merge\n- [ ] No new issues introduced\n\n\n```\n\n**Commands to Execute:**\n1. `cd {REPO_LOCATION}`\n2. `git checkout {BASE_BRANCH}`\n3. `git pull origin {BASE_BRANCH}`\n4. For each issue: `git checkout -b fix/sonar-{ISSUE_KEY}`\n5. [Apply fix]\n6. `git add .`\n7. `git commit -m \"fix: resolve SonarQube issue {ISSUE_KEY}\"`\n8. `git push origin fix/sonar-{ISSUE_KEY}`\n9. `gh pr create --title \"Fix SonarQube Issue {ISSUE_KEY}\" --body-file pr-description.md`\n\n**Progress Tracking:**\n- Update progress file status: NOT-STARTED → IN-PROGRESS → COMPLETED\n- Mark implementation steps as completed in the progress file\n- Record PR number in the progress file once created\n\nProcess each issue systematically, ensuring thorough testing and comprehensive PR documentation.\n```text\n\n## Example Usage\n\n```markdown\nImplement SonarQube issue fixes from plan folder ./amp-sonarqube-processor in repository /Users/dev/my-project.\n\n**Project Details:**\n- Plan Folder: ./amp-sonarqube-processor\n- Repository: /Users/dev/my-project\n- Base Branch: main\n- SonarQube URL: \u003Chttps://sonarqube.company.com>\n- SonarQube Project: my-app-frontend\n\n**Implementation Workflow:**\nFor each NOT-STARTED progress file in ./amp-sonarqube-processor:\n\n1. **Branch Creation**\n   - Extract issue key from filename (e.g., NOT-STARTED-AX123-progress.md)\n   - Create new branch: `fix/sonar-AX123`\n   - Switch to the new branch\n...\n```","src/content/examples/automation/sonarqube-amp/sequential-simple/step_2_sonarqube-fix-implementation-prompt-template.md","59f8c2619b408088",{"html":1931,"metadata":1932},"\u003Ch1 id=\"sonarqube-fix-implementation-prompt-template\">SonarQube Fix Implementation Prompt Template\u003C/h1>\n\u003Ch2 id=\"template-usage\">Template Usage\u003C/h2>\n\u003Cp>Replace the placeholders below with your specific values:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>{PLAN_FOLDER}\u003C/code>: Path to the amp-sonarqube-processor folder with progress files\u003C/li>\n\u003Cli>\u003Ccode>{REPO_LOCATION}\u003C/code>: Full path to your repository\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"prompt-template\">Prompt Template\u003C/h2>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"markdown\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">Implement SonarQube issue fixes from plan folder {PLAN_FOLDER} in repository {REPO_LOCATION}.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8;font-weight:bold\">**Project Details:**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">-\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Plan Folder: {PLAN_FOLDER}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">-\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Repository: {REPO_LOCATION}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">-\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Base Branch: {BASE_BRANCH}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">-\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> SonarQube URL: {SONARQUBE_URL}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">-\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> SonarQube Project: {SONARQUBE_PROJECT_KEY}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8;font-weight:bold\">**Implementation Workflow:**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">For each NOT-STARTED progress file in {PLAN_FOLDER}:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">Run through the following steps for each NOT-STARTED progress file in {PLAN_FOLDER} sequentally. Do not use git worktrees.  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">0.\u003C/span>\u003Cspan style=\"color:#E1E4E8;font-weight:bold\"> **Preparation**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   -\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Update the progress file status from NOT-STARTED to IN-PROGRESS\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">1.\u003C/span>\u003Cspan style=\"color:#E1E4E8;font-weight:bold\"> **Branch Creation**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   -\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Extract issue key from filename (e.g., NOT-STARTED-{ISSUE_KEY}-progress.md)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   -\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Create new branch: \u003C/span>\u003Cspan style=\"color:#79B8FF\">`fix/sonar-{ISSUE_KEY}`\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   -\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Switch to the new branch\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">2.\u003C/span>\u003Cspan style=\"color:#E1E4E8;font-weight:bold\"> **Pre-Fix Validation**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   -\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Run build command to ensure clean starting state\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   -\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Run test suite to verify current functionality\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   -\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Document any existing test failures\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">3.\u003C/span>\u003Cspan style=\"color:#E1E4E8;font-weight:bold\"> **Issue Resolution**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   -\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Follow the step-by-step resolution plan from the progress file\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   -\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Apply the fix according to the implementation steps\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   -\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Update the progress file status from NOT-STARTED to IN-PROGRESS\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">4.\u003C/span>\u003Cspan style=\"color:#E1E4E8;font-weight:bold\"> **Post-Fix Validation**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   -\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Run build command to verify fix doesn't break compilation\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   -\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Run full test suite to ensure no regressions\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   -\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Run any additional verification steps from the progress file\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">5.\u003C/span>\u003Cspan style=\"color:#E1E4E8;font-weight:bold\"> **Pull Request Creation**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   -\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Commit changes with descriptive message referencing issue key\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   -\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Push branch to origin\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   -\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Use \u003C/span>\u003Cspan style=\"color:#79B8FF\">`gh pr create --body-file pr-description.md`\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> to create PR with detailed description\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">6.\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Cleanup\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   -\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Update progress filename status from IN-PROGRESS to COMPLETED\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   -\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> If the plan had issues or is blocked, update the status to BLOCKED in the filename, include why the project is blocked in the plan markdown file.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">   -\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Update of the progress within the plan markdown file\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">   \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">   \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">   \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8;font-weight:bold\">**PR Description Template:**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">Create a temporary \u003C/span>\u003Cspan style=\"color:#79B8FF\">`pr-description.md`\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> file for each PR with:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">```markdown\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF;font-weight:bold\">## SonarQube Issue Fix: {ISSUE_KEY}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF;font-weight:bold\">### Issue Details\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">-\u003C/span>\u003Cspan style=\"color:#E1E4E8;font-weight:bold\"> **SonarQube Link**\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {SONARQUBE_URL}/project/issues?id={SONARQUBE_PROJECT_KEY}&#x26;issues={ISSUE_KEY}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">-\u003C/span>\u003Cspan style=\"color:#E1E4E8;font-weight:bold\"> **Issue Type**\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [Bug/Code Smell/Vulnerability/Security Hotspot]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">-\u003C/span>\u003Cspan style=\"color:#E1E4E8;font-weight:bold\"> **Severity**\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [\u003C/span>\u003Cspan style=\"color:#DBEDFF;text-decoration:underline\">Critical/Major/Minor/Info\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">-\u003C/span>\u003Cspan style=\"color:#E1E4E8;font-weight:bold\"> **File(s) Affected**\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [List of files]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF;font-weight:bold\">### Problem Description\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">[Brief description of the issue and why it needed fixing]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF;font-weight:bold\">### Solution Implemented\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">[Description of the fix applied]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF;font-weight:bold\">### Technical Notes\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">[Implementation details for developers]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF;font-weight:bold\">### Testing\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">-\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [ ] Build passes\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">-\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [ ] All existing tests pass\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">-\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [ ] New tests added (if applicable)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">-\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [ ] Manual testing completed\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF;font-weight:bold\">### SonarQube Verification\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">-\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [ ] Issue resolved in SonarQube after merge\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">-\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [ ] No new issues introduced\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>Commands to Execute:\u003C/strong>\u003C/p>\n\u003Col>\n\u003Cli>\u003Ccode>cd {REPO_LOCATION}\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>git checkout {BASE_BRANCH}\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>git pull origin {BASE_BRANCH}\u003C/code>\u003C/li>\n\u003Cli>For each issue: \u003Ccode>git checkout -b fix/sonar-{ISSUE_KEY}\u003C/code>\u003C/li>\n\u003Cli>[Apply fix]\u003C/li>\n\u003Cli>\u003Ccode>git add .\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>git commit -m \"fix: resolve SonarQube issue {ISSUE_KEY}\"\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>git push origin fix/sonar-{ISSUE_KEY}\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>gh pr create --title \"Fix SonarQube Issue {ISSUE_KEY}\" --body-file pr-description.md\u003C/code>\u003C/li>\n\u003C/ol>\n\u003Cp>\u003Cstrong>Progress Tracking:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>Update progress file status: NOT-STARTED → IN-PROGRESS → COMPLETED\u003C/li>\n\u003Cli>Mark implementation steps as completed in the progress file\u003C/li>\n\u003Cli>Record PR number in the progress file once created\u003C/li>\n\u003C/ul>\n\u003Cp>Process each issue systematically, ensuring thorough testing and comprehensive PR documentation.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"text\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>## Example Usage\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>```markdown\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Implement SonarQube issue fixes from plan folder ./amp-sonarqube-processor in repository /Users/dev/my-project.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>**Project Details:**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>- Plan Folder: ./amp-sonarqube-processor\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>- Repository: /Users/dev/my-project\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>- Base Branch: main\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>- SonarQube URL: &#x3C;https://sonarqube.company.com>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>- SonarQube Project: my-app-frontend\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>**Implementation Workflow:**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>For each NOT-STARTED progress file in ./amp-sonarqube-processor:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>1. **Branch Creation**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>   - Extract issue key from filename (e.g., NOT-STARTED-AX123-progress.md)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>   - Create new branch: `fix/sonar-AX123`\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>   - Switch to the new branch\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>...\u003C/span>\u003C/span>\u003C/code>\u003C/pre>",{"headings":1933,"localImagePaths":1939,"remoteImagePaths":1940,"frontmatter":1941,"imagePaths":1942},[1934,1937,1938],{"depth":22,"slug":1935,"text":1936},"sonarqube-fix-implementation-prompt-template","SonarQube Fix Implementation Prompt Template",{"depth":25,"slug":1841,"text":1842},{"depth":25,"slug":1844,"text":1845},[],[],{},[],"automation/sonarqube-amp/sequential-simple/step_2_sonarqube-fix-implementation-prompt-template.md"]